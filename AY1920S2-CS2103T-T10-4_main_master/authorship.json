[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "mainClassName \u003d \u0027nasa.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    compile \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    compile \u0027com.google.zxing:core:3.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    compile \u0027com.google.zxing:javase:3.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveName \u003d \u0027nasa.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 152,
      "kester-ng": 2,
      "don-tay": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param parameters Application.Parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return AppParameters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 1,
      "-": 61,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/nasa/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.NasaBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NASA ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(userPrefs.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                userPrefs.getHistoryBookFilePath(), userPrefs.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s NASA and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The data from the sample NASA will be used instead if {@code storage}\u0027s NASA is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an empty NASA will be used instead if errors occur when reading {@code storage}\u0027s NASA."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cReadOnlyNasaBook\u003e nasaBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e historyBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e uiHistoryBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyNasaBook initialNasaBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyHistory initialHistoryBook;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyHistory initialUiHistoryBook;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBookOptional \u003d storage.readNasaBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyBookOptional \u003d storage.readHistoryBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            uiHistoryBookOptional \u003d storage.readUiHistoryBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (!nasaBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample NasaBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!historyBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample HistoryBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!uiHistoryBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample UiHistoryBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d nasaBookOptional.orElseGet(SampleDataUtil::getSampleNasaBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d historyBookOptional.orElseGet(SampleDataUtil::getSampleHistoryBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d uiHistoryBookOptional.orElseGet(SampleDataUtil::getSampleUiHistoryBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new ModelManager(initialNasaBook, initialHistoryBook, initialUiHistoryBook, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param configFilePath Path"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Config"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param storage UserPrefsStorage"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UserPrefs"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NASA\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"Starting NASA \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NASA ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33,
      "EdmondOng": 38,
      "-": 139,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //Fills up entire screen when programme starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getHeight();;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getWidth();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "-": 70,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String LOG_FILE \u003d \"nasa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "kester-ng": 10,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Integer.toString(this.zeroBasedIndex + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 53,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 81,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.BarcodeFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.WriterException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.client.j2se.MatrixToImageWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.common.BitMatrix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.qrcode.QRCodeWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the byte array representation of the QR-encoding of {@code text}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param text String to be encoded."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param length Size of the QR code."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return Byte array of the QR-encoding of text."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static byte[] toQr(String text, int length) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            QRCodeWriter qrCodeWriter \u003d new QRCodeWriter();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            BitMatrix bitMatrix \u003d qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, length, length);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ByteArrayOutputStream pngOutStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            MatrixToImageWriter.writeToStream(bitMatrix, \"png\", pngOutStream);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return pngOutStream.toByteArray();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (WriterException | IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new byte[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 66,
      "don-tay": 27
    }
  },
  {
    "path": "src/main/java/nasa/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the NasaBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see nasa.model.Model#getNasaBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the user prefs\u0027 NASA file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/nasa/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.NasaBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser nasaBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookParser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    model.getHistoryManager().getUiHistoryBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"-------------------Error while setting up logic manager\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Command command \u003d nasaBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    model.getHistoryManager().getUiHistoryBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return model.getModule(moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 77,
      "EdmondOng": 9,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Calendar ics class, writes all the events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * and deadlines into .ics folder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsCalendar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to write all events and deadlines to ics file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath path for ics file to be written to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadlines all the deadline in the nasabook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param events all the event in the nasabook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void writeToIcsFile(Path filepath, HashMap\u003cModuleCode, ArrayList\u003cDeadline\u003e\u003e deadlines,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                      HashMap\u003cModuleCode, ArrayList\u003cEvent\u003e\u003e events) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        File file \u003d new File(String.valueOf(filepath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            file.mkdir(); // make sure can write to something"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(String.valueOf(filepath.resolve(\"nasa.ics\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"BEGIN:VCALENDAR\" + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"VERSION:2.0\" + System.lineSeparator());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"PRODID:-//NASA//CS2103T//EN\" + System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // write deadlines in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (ModuleCode moduleCode : deadlines.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cDeadline\u003e moduleDeadlines \u003d deadlines.get(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Deadline deadline : moduleDeadlines) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                fileWriter.write(new IcsDeadline(deadline, moduleCode).getIcsFormat());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // followed by event"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (ModuleCode moduleCode : events.keySet()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cEvent\u003e moduleEvents \u003d events.get(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Event event : moduleEvents) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                fileWriter.write(new IcsEvent(event, moduleCode).getIcsFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // end the calendar ics file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"END:VCALENDAR\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 59
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * For deadline, put it as an a VTODO."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsDeadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String ICS_TYPE \u003d \"VTODO\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private IcsSchedule icsSchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline deadline to be converted to ics"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode moduleCode the deadline belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsDeadline(Deadline deadline, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(deadline, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadline.isDone()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"COMPLETED\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (deadline.isOverdue()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"NEEDS-ACTION\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"IN-PROCESS\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsSchedule \u003d new IcsSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the ics format representation of deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return string format for deadline for ics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String icsFormat \u003d \"BEGIN:\" + ICS_TYPE + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"UID:\" + uuid.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DUE;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + deadline.getDueDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (icsSchedule.hasSchedule()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            icsFormat +\u003d icsSchedule.getIcsRule() + System.lineSeparator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsFormat +\u003d \"SUMMARY:\" + String.format(\"[%s] \", moduleCode.toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + deadline.getName().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DESCRIPTION:\" + deadline.getNote().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"STATUS:\" + status + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"END:\" + ICS_TYPE + System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return icsFormat;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 65
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to convert event to ics event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsEvent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String ICS_TYPE \u003d \"VEVENT\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private IcsSchedule icsSchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be formatted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode moduleCode the event belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsEvent(Event event, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(event, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.icsSchedule \u003d new IcsSchedule(event.getSchedule());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the ics format for event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String format for event for ics"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String icsFormat \u003d \"BEGIN:\" + ICS_TYPE + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"UID:\" + uuid.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTSTAMP:\" + (LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\")))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTSTART;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getStartDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTEND;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getEndDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (icsSchedule.hasSchedule()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            icsFormat +\u003d icsSchedule.getIcsRule() + System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsFormat +\u003d \"SUMMARY:\" + String.format(\"[%s] \", moduleCode.toString())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getName().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DESCRIPTION:\" + event.getNote().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"END:\" + ICS_TYPE + System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return icsFormat;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 62
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to get ics rule for scheduling of events/deadlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsSchedule {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param schedule schedule of the activity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * If the activity has a schedule."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if have, else false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasSchedule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(schedule.getType() \u003d\u003d 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the Ics rule for auto-scheduling"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String ics format for scheduling"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsRule() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String frequency \u003d \"RRULE:FREQ\u003d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int type \u003d schedule.getType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"WEEKLY;INTERVAL\u003d2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 44
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Clears the nasa book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": clears NASA\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: none\\nExample: clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"NASA has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "kester-ng": 19
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/CommandHint.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Dictionary of commands and their message usage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandHint {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e commandList \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddDeadlineCommand.COMMAND_WORD, AddDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddEventCommand.COMMAND_WORD, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddModuleCommand.COMMAND_WORD, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteModuleCommand.COMMAND_WORD, DeleteModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditModuleCommand.COMMAND_WORD, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ClearCommand.COMMAND_WORD, ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ContinueCommand.COMMAND_WORD, ContinueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteDeadlineCommand.COMMAND_WORD, DeleteDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteEventCommand.COMMAND_WORD, DeleteEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DoneCommand.COMMAND_WORD, DoneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditDeadlineCommand.COMMAND_WORD, EditDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditEventCommand.COMMAND_WORD, EditEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ExportCalendarCommand.COMMAND_WORD, ExportCalendarCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ExportQrCommand.COMMAND_WORD, ExportQrCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(FindCommand.COMMAND_WORD, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(HelpCommand.COMMAND_WORD, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ListCommand.COMMAND_WORD, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(QuoteCommand.COMMAND_WORD, QuoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RedoCommand.COMMAND_WORD, RedoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RefreshCommand.COMMAND_WORD, RefreshCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RepeatDeadlineCommand.COMMAND_WORD, RepeatDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RepeatEventCommand.COMMAND_WORD, RepeatEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(SortCommand.COMMAND_WORD, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(UndoCommand.COMMAND_WORD, UndoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ViewCommand.COMMAND_WORD, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static HashMap\u003cString, String\u003e getCommandList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 47
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final byte[] EMPTY_BYTE_ARRAY_DATA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EMPTY_BYTE_ARRAY_DATA \u003d new byte[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean calendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /** Qr code should be shown to the user. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final boolean showQr;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /** Qr code data to show */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final byte[] qrData;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The application should show quote."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean quote;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param feedbackToUser String"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param showHelp boolean"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param exit boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                         boolean modules, boolean calendar, boolean statistics, boolean showQr,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                         byte[] qrData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.quote \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.showQr \u003d showQr;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.qrData \u003d qrData;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param feedbackToUser String"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false, EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public byte[] getQrData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return qrData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isModules() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isCalendar() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isStatistics() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isQuote() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return quote;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isShowQr() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return showQr;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Make quote property true."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setQuote() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.quote \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 showQr \u003d\u003d otherCommandResult.showQr;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showQr);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 28,
      "EdmondOng": 4,
      "kester-ng": 83,
      "don-tay": 26
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ContinueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Sets an activity to undone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"continue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Sets index of deadline in module\u0027s deadline\u0027s list to being undone or incomplete.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: INDEX \" + PREFIX_MODULE + \" MODULE CODE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_MODULE + \"CS2030\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline set to undone!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Activity not found in module\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module not found!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ALREADY_UNDONE \u003d \"Deadline is already undone!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ContinueCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // get module and check if the activity index exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (index.getZeroBased() \u003e module.getDeadlineList().getActivityList().size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"continue\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (!deadline.isDone()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_ALREADY_UNDONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d new Deadline(deadline.getName(), deadline.getDateCreated(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getNote(), deadline.getPriority(), deadline.getDueDate(), false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.setDeadline(moduleCode, deadline, deadlineCopy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, deadline));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof ContinueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((ContinueCommand) other).index)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 moduleCode.equals(moduleCode)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 76
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to delete deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del-d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Deletes the activities identified by the index numbers used in the displayed deadline list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX (must be a positive integer) \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE + \"CS3233\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"%d. %s is successfully deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Deadline indicated does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module does not exist!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteDeadlineCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.removeDeadline(moduleCode, deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_DEADLINE_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    index.getOneBased(), deadline.getName().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both DeleteDeadlineCommand has the same index and module code."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof DeleteDeadlineCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteDeadlineCommand command \u003d (DeleteDeadlineCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.equals(((DeleteDeadlineCommand) other).moduleCode)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteDeadlineCommand) other).index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 75
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to delete event command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del-e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Deletes the event identified by the index numbers used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX (must be a positive integer) \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE + \"CS3233\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"%d. %s is successfully deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Event indicated does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module does not exist!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteEventCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event event \u003d module.getFilteredEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.removeEvent(moduleCode, event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, index.getOneBased(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getName().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both DeleteDeadlineCommand has the same index and module code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof DeleteEventCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.equals(((DeleteEventCommand) other).moduleCode)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteEventCommand) other).index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 74
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Sets an activity to done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Sets index of deadline in module to being done or completed.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example \" + COMMAND_WORD + \" 2 \" + PREFIX_MODULE + \"CS2030\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline set to done!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Activity not found in module\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module not found!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ALREADY_DONE \u003d \"Deadline already set to done!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DoneCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // get module and check if the activity index exist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (index.getZeroBased() \u003e module.getDeadlineList().getActivityList().size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // check if activity already done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"done\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (deadline.isDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_ALREADY_DONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d new Deadline(deadline.getName(), deadline.getDateCreated(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getNote(), deadline.getPriority(), deadline.getDueDate(), true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.setDeadline(moduleCode, deadline, deadlineCopy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, deadline));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DoneCommand) other).index)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 moduleCode.equals(moduleCode)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 80
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a specific deadline in the moduleCode\u0027s list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deadline identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the index number used in the displayed moduleCode\u0027s deadline list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DUE DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Assignment 2.3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_DEADLINE_SUCCESS \u003d \"Edited Deadline successfully.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_PAST_DEADLINE \u003d \"Cannot edit deadline to a date that has passed.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditDeadlineCommand.EditDeadlineDescriptor editDeadlineDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditDeadlineCommand to edit a deadline"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * with the specified {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param index index of the deadline item as specified in the corresponding module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code which the deadline item is found in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editDeadlineDescriptor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditDeadlineCommand(Index index, ModuleCode moduleCode, EditDeadlineDescriptor editDeadlineDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(index, moduleCode, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editDeadlineDescriptor \u003d new EditDeadlineDescriptor(editDeadlineDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCode)) { // throw exception if module code is not found in nasa book"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cDeadline\u003e lastShownList \u003d model.getFilteredDeadlineList(moduleCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline deadlineToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(deadlineToEdit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline editedDeadline \u003d createEditedDeadline(deadlineToEdit, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // check due date validity only when due date is edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isDueDateEdited() \u0026\u0026 !editedDeadline.isValidDeadline(editedDeadline.getDueDate())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_PAST_DEADLINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edit made to deadline is exactly the same"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (deadlineToEdit.isSameDeadline(editedDeadline)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedDeadline.setSchedule(deadlineToEdit.getSchedule());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setDeadline(moduleCode, deadlineToEdit, editedDeadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DEADLINE_SUCCESS, editedDeadline));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns an {@code Deadline} with the details of {@code deadlineToEdit}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Deadline createEditedDeadline(Deadline deadlineToEdit,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                                 EditDeadlineDescriptor editDeadlineDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(deadlineToEdit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name updatedName \u003d editDeadlineDescriptor.getName().orElse(deadlineToEdit.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // by default date created cannot be edited, and will take previous value"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDateCreated \u003d editDeadlineDescriptor.getDateCreated().orElse(deadlineToEdit.getDateCreated());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Note updatedNote \u003d editDeadlineDescriptor.getNote().orElse(deadlineToEdit.getNote());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Priority updatedPriority \u003d editDeadlineDescriptor.getPriority().orElse(deadlineToEdit.getPriority());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDueDate \u003d editDeadlineDescriptor.getDueDate().orElse(deadlineToEdit.getDueDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Deadline(updatedName, updatedDateCreated, updatedNote, updatedPriority, updatedDueDate,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                deadlineToEdit.isDone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if due date has been edited and returns true. Else, false."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if {@code editDeadlineDescriptor} is updated with new due date. Else, return false."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isDueDateEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.editDeadlineDescriptor.getDueDate().isPresent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 index.equals(((EditDeadlineCommand) other).index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditDeadlineCommand) other).moduleCode)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editDeadlineDescriptor.equals(((EditDeadlineCommand) other).editDeadlineDescriptor));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the deadline with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the moduleCode."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditDeadlineDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dateCreated;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dueDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditDeadlineDescriptor() {}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditDeadlineDescriptor(EditDeadlineCommand.EditDeadlineDescriptor toCopy) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDateCreated(toCopy.dateCreated);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDueDate(toCopy.dueDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateCreated, note, priority, dueDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDateCreated() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dateCreated);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDueDate() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dueDate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditDeadlineCommand.EditDeadlineDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditDeadlineCommand.EditDeadlineDescriptor e \u003d (EditDeadlineCommand.EditDeadlineDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDateCreated().equals(e.getDateCreated())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDueDate().equals(e.getDueDate());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 27,
      "don-tay": 217
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a specific event in the moduleCode\u0027s list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the index number used in the displayed moduleCode\u0027s event list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_START_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_END_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Assignment 2.3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event successfully.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_PAST_EVENT \u003d \"Cannot edit event to an end date that has passed.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Cannot edit event to have end date before start date.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditEventCommand.EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditEventCommand to edit a event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * with the specified {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param index index of the event item as specified in the corresponding module"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code which the event item is found in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editEventDescriptor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditEventCommand(Index index, ModuleCode moduleCode, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(index, moduleCode, editEventDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCode)) { // throw exception if module code is not found in nasa book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList(moduleCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editedEvent.isValidStartEndDates(editedEvent.getStartDate(), editedEvent.getEndDate())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // check end date validity only when end date is edited"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isEndDateEdited() \u0026\u0026 !editedEvent.isValidFutureEvent(editedEvent.getEndDate())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_PAST_EVENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (eventToEdit.isSameEvent(editedEvent)) { // if edit is exactly the same as the original"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedEvent.setSchedule(eventToEdit.getSchedule());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setEvent(moduleCode, eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns an {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDateCreated \u003d editEventDescriptor.getDateCreated().orElse(eventToEdit.getDateCreated());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Note updatedNote \u003d editEventDescriptor.getNote().orElse(eventToEdit.getNote());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedStartDate \u003d editEventDescriptor.getStartDate().orElse(eventToEdit.getStartDate());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedEndDate \u003d editEventDescriptor.getEndDate().orElse(eventToEdit.getEndDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Event(updatedName, updatedDateCreated, updatedNote, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if end date has been edited and returns true. Else, false."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if {@code editEventDescriptor} is updated with new end date. Else, return false."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isEndDateEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.editEventDescriptor.getEndDate().isPresent();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 index.equals(((EditEventCommand) other).index)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditEventCommand) other).moduleCode)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(((EditEventCommand) other).editEventDescriptor));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the moduleCode."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dateCreated;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditEventDescriptor(EditEventCommand.EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDateCreated(toCopy.dateCreated);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateCreated, note, priority, startDate, endDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDateCreated() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dateCreated);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditEventCommand.EditEventDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditEventCommand.EditEventDescriptor e \u003d (EditEventCommand.EditEventDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDateCreated().equals(e.getDateCreated())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 26,
      "don-tay": 233
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting NASA as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, true, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 15,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExportCalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.calendar.IcsCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Exports current calendar to ics format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the command for exporting of calendar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports calendar to .ics format\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: FILEPATH\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" f/./Data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to export calendar!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully exported calendar!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Path filepath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath filepath to write the ics file to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ExportCalendarCommand(Path filepath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            filepath \u003d model.getUserPrefs().getCalendarExportPath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            HashMap\u003cModuleCode, ArrayList\u003cDeadline\u003e\u003e deadlines \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            HashMap\u003cModuleCode, ArrayList\u003cEvent\u003e\u003e events \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cDeadline\u003e moduleDeadlines \u003d new ArrayList\u003c\u003e(module.getFilteredDeadlineList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cEvent\u003e moduleEvents \u003d new ArrayList\u003c\u003e(module.getFilteredEventList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlines.put(module.getModuleCode(), moduleDeadlines);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                events.put(module.getModuleCode(), moduleEvents);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            IcsCalendar.writeToIcsFile(filepath, deadlines, events);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof ExportCalendarCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((ExportCalendarCommand) other).filepath \u003d\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filepath.equals(((ExportCalendarCommand) other).filepath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 87
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExportQrCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Format contents of NasaBook to Qr code for export."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class ExportQrCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the deadlines and events to QR code.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"QR code generated.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String STRING_DELIMITER \u003d \"****************\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String DEFAULT_INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(STRING_DELIMITER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(module.toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d model.getFilteredDeadlineList(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d model.getFilteredEventList(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\"Deadlines\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (deadlineObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"No deadlines for this module.\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            for (Deadline d : deadlineObservableList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                int index \u003d deadlineObservableList.indexOf(d) + 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(index).append(\". \").append(d.getName().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(d.getDueDate().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"Priority: \").append(d.getPriority().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (!isEmptyNoteString(d.getNote().toString())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(d.getNote().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (d.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(\"DONE\").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\"Events\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (eventObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"No events for this module.\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            for (Event e : eventObservableList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                int index \u003d eventObservableList.indexOf(e) + 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(index).append(\". \").append(e.getName().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(e.getStartDate().toString()).append(\" to \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        .append(e.getEndDate().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (!isEmptyNoteString(e.getNote().toString())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(e.getNote().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, false, true,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                StringUtil.toQr(sb.toString(), 500));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if note is empty, given by {@code Activity.EMPTY_NOTE_STRING}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param str note string to be tested."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if note is empty (ie. \"-\"), else false."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isEmptyNoteString(String str) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (str.equals(Activity.EMPTY_NOTE_STRING)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "don-tay": 95
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Finds and lists all activities in NASA whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the command for finding specific activities."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all activities whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" assignment lab tutorial\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_REFRESH \u003d \"Screen has been refreshed.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Predicate predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand(Predicate predicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateHistory(\"find\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            getNumberOfFilteredActivities(model.getFilteredModuleList())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getNumberOfFilteredActivities(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int numberOfActivities \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            numberOfActivities +\u003d module.getFilteredDeadlineList().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            numberOfActivities +\u003d module.getFilteredEventList().size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return numberOfActivities;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 5,
      "kester-ng": 60
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all modules.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: m/[MODULE_CODE]\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ListCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"list\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            list.add(moduleCode.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.updateFilteredModuleList(new NameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.updateHistory(\"list\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(moduleCode + \" listed successfully!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(\"Module cannot be found!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 48,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/QuoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command class to activate quote."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class QuoteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quote\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": quote.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String quoteMessage \u003d model.quote();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        CommandResult result \u003d new CommandResult(quoteMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        result.setQuote();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 3,
      "kester-ng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to handle redo previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redo latest action.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"No last action to redo.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.redoHistory()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RefreshCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to refresh the page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class RefreshCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refresh\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": refresh data.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Refreshed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Refreshed failed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // show all activities and modules"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredModuleList(model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //model.updateSchedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // now update all deadlines and events"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cDeadline\u003e deadlines \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cEvent\u003e events \u003d module.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Deadline deadline : deadlines) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Deadline deadlineCopy \u003d new Deadline(deadline.getName(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.getDateCreated(), deadline.getNote(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.getPriority(), deadline.getDueDate(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.isDone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    model.setDeadline(module.getModuleCode(), deadline, deadlineCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Event event : events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Event eventCopy \u003d new Event(event.getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        event.getStartDate(), event.getEndDate(), event.getNote());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    eventCopy.setSchedule(event.getSchedule());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    model.setEvent(module.getModuleCode(), event, eventCopy); // auto set to its done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 2,
      "kester-ng": 57
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RepeatDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Repeat an activity for a week, twice a week or monthly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat-d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": repeat a deadline activity.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Parameters: ITEM_INDEX m/MODULE_CODE r/REPETITION (0: cancel, 1: weekly, 2: biweekly, 3: monthly)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for monthly repetition: \" + COMMAND_WORD + \" 1 m/CS3233 r/3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added a repeat!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unsuccessfully added. Please check for correctness in module code or\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"activity name.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_NO_MODULE \u003d \"No such module, try again with a correct module.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatDeadlineCommand(ModuleCode module, Index index, Index schedule) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module, index, schedule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.setDeadlineSchedule(module, index, schedule)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new CommandResult(String.format(\"%s for %s %s %s\", MESSAGE_SUCCESS, module, index.getZeroBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    schedule.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof RepeatDeadlineCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 module.equals(((RepeatDeadlineCommand) other).module)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 index.equals(((RepeatDeadlineCommand) other).index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 schedule.equals(((RepeatDeadlineCommand) other).schedule));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return String.format(\"%s %d %d\", module, index.getZeroBased(), schedule.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 66
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RepeatEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Repeat an activity for a week, twice a week or monthly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat-e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": repeat a event activity.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Parameters: ITEM_INDEX m/MODULE_CODE r/REPETITION (0: cancel, 1: weekly, 2: biweekly, 3: monthly)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for monthly repetition: \" + COMMAND_WORD + \" 1 m/CS3233 r/3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added a repeat!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unsuccessfully added. Please check for correctness in module code or\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"activity name.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_NO_MODULE \u003d \"No such module, try again with a correct module.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatEventCommand(ModuleCode module, Index index, Index schedule) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module, index, schedule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.setEventSchedule(module, index, schedule)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new CommandResult(String.format(\"%s for %s %s %s\", MESSAGE_SUCCESS, module, index.getZeroBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    schedule.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof RepeatEventCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 module.equals(((RepeatEventCommand) other).module)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 index.equals(((RepeatEventCommand) other).index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 schedule.equals(((RepeatEventCommand) other).schedule));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return String.format(\"%s %s %d\", module, index.getZeroBased(), schedule.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 66
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all deadlines and events according to the \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"the method specified.\\nParameters: SORT_METHOD\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"priority\";;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all deadlines and events successfully.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final SortMethod sortMethod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethod \u003d sortMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.sortActivityList(sortMethod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 sortMethod.equals(((SortCommand) other).sortMethod)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 41
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"These are the statistics.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Predicate\u003cDeadline\u003e deadlinePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public StatisticsCommand(Predicate\u003cDeadline\u003e deadlinePredicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadlinePredicate \u003d deadlinePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //model.updateFilteredD(deadlinePredicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, true, false,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 27,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to undo the previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo latest action.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: None \\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Undo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.undoHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/* @@author CharmaineKoh */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Switches view to specified tabPane."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change view to specified tab.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"\\nParameters: TAB_NAME\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"statistics\";;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changed view to %s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final View tabName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ViewCommand(View tabName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, tabName.toString().toLowerCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (tabName \u003d\u003d View.MODULES) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, true, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (tabName \u003d\u003d View.CALENDAR) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, false, false, true, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 45
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds any activity to a module\u0027s activity list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_ACTIVITY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"This activity already exist in the module\u0027s activity list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"The module does not exist!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Activity toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code activity} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity Activity to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the activity is to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddCommand(Activity activity, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((AddCommand) other).moduleCode));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds a deadline task to a module\u0027s list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline added!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"NOTE \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"20-05-2020 02:30 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"SEA Group Programming Assignment \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Focus on computational geometry and DP.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code deadline} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline Deadline task to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where deadline is to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand(Deadline deadline, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "       super(deadline, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addDeadline(moduleCode, (Deadline) toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 52
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds an event activity to a module\u0027s list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"NOTE\" + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_START_DATE + \"12-05-2020 02:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_END_DATE + \"12-05-2020 04:00 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"CP contest  \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Remember to study content before coming.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code event} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event Event to be added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the event is to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand(Event event, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(event, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addEvent(moduleCode, (Event) toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 51
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds a module to NASA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to NASA. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Competitive Programming\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module %s added!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_MODULE \u003d \"This module already exist!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module Module to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 18,
      "kester-ng": 42
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Deletes a module identified using it\u0027s code from NASA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Deletes the module specified by the code in NASA.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[MODULE_CODE]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"CS2030\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"%1$s is deleted successfully!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Module indicated does not exist!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleToDelete;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a DeleteModuleCommand to delete the specified {@code module}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteModuleCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleToDelete \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(moduleToDelete)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleToDelete.equals(((DeleteModuleCommand) other).moduleToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13,
      "kester-ng": 42,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a module in the NASA book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the module code in the displayed NASA application. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_MODULE_NAME + \"MODULE NAME]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2020 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Data Structures and Algorithms\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String EXCESS_MODULE_CODE \u003d \"Failed to edit module code. EXACTLY 2 module codes must be \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"entered to edit module code.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditModuleCommand.EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditModuleCommand to edit a module at specified {@code index}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode Module code of the module to be edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editModuleDescriptor EditModuleDescriptor helper to edit the module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleCommand(ModuleCode moduleCode, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCodeToEdit \u003d this.moduleCode;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module moduleToEdit \u003d model.getModule(moduleCodeToEdit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when module to be edited is not found in the NasaBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCodeToEdit)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edit made is exactly the same as original"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleToEdit.equals(editedModule)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edited module exists in model, and module is not target {@code moduleCodeToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!moduleCodeToEdit.equals(editedModule.getModuleCode()) \u0026\u0026 model.hasModule(editedModule.getModuleCode())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setModule(moduleToEdit.getModuleCode(), editedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                             EditModuleCommand.EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleName updatedModuleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getModuleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d moduleToEdit.getDeadlineList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cDeadline\u003e obsDeadlineList \u003d moduleToEdit.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueEventList eventList \u003d moduleToEdit.getEventList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cEvent\u003e obsEventList \u003d moduleToEdit.getFilteredEventList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module newModule \u003d new Module(updatedModuleCode, updatedModuleName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setDeadlines(deadlineList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setDeadlines(obsDeadlineList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setEvents(eventList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setEvents(obsEventList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditModuleCommand) other).moduleCode)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(((EditModuleCommand) other).editModuleDescriptor));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor(EditModuleCommand.EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleCode, moduleName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditModuleCommand.EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditModuleCommand.EditModuleDescriptor e \u003d (EditModuleCommand.EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode()) \u0026\u0026 getModuleName().equals(e.getModuleName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 7,
      "don-tay": 180
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the first value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Optional\u003cString\u003e getFirstValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 59,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITY_NAME \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_REPEAT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"-e\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 4,
      "kester-ng": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ContinueCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a ContinueCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandParser implements Parser\u003cContinueCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ContinueCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a ContinueCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ContinueCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ContinueCommand(index, moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code DeleteDeadlineCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommandParser implements Parser\u003cDeleteDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input argument and returns a {@code DeleteDeadlineCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input argument"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code DeleteDeadlineCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteDeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * If PREFIX_MODULE exist, then return DeleteActivityCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * else throw exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteDeadlineCommand(index, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 52,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Constructor to delete an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input argument and returns a {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input argument"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code DeleteEventCommand}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * If PREFIX_MODULE exist, then return DeleteActivityCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * else throw exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteEventCommand(index, moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 1,
      "kester-ng": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DoneCommand(index, moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditDeadlineCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Format: edit-d INDEX"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditDeadlineCommandParser implements Parser\u003cEditDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDeadlineCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditDeadlineCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE, PREFIX_NOTE, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        PREFIX_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditDeadlineCommand.MESSAGE_USAGE, pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, ne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditDeadlineCommand.EditDeadlineDescriptor editDeadlineDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditDeadlineCommand.EditDeadlineDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setDueDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITY_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editDeadlineDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditDeadlineCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditDeadlineCommand(index, moduleCode, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 17,
      "don-tay": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_NOTE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        PREFIX_PRIORITY, PREFIX_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditEventCommand.EditEventDescriptor editEventDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITY_NAME).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditEventCommand(index, moduleCode, editEventDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 18,
      "don-tay": 56
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ExportCalendarCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and return an ExportCalendarCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandParser implements Parser\u003cExportCalendarCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCalendarCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an ExportCalendarCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ExportCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Path filepath \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            filepath \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ExportCalendarCommand(filepath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 31
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new FindCommand(new ActivityContainsKeyWordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "kester-ng": 27
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code ListCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input command and returns a {@code ListCommandParser}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code ListCommandParser}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ListCommand(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 32
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/NasaBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.ExportQrCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.QuoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddDeadlineCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddEventCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.AddModuleCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.DeleteModuleCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.EditModuleCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ContinueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ContinueCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DeleteDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case ExportQrCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new ExportQrCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ExportCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ExportCalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RepeatDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RepeatDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RepeatEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RepeatEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case QuoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new QuoteCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 80,
      "EdmondOng": 17,
      "kester-ng": 52,
      "don-tay": 9
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param userInput String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return T"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 13,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code zeroBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Index parseZeroIndex(String zeroBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedIndex \u003d zeroBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the string date is of valid form."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date of the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object created based on user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateTrimmed \u003d date.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(dateTrimmed)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Date(dateTrimmed);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String name is not empty or does not only consists of whitespaces."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name of the activity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Name object of the activity"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Name parseActivityName(String name) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameTrimmed \u003d name.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(nameTrimmed)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Name(nameTrimmed);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String note} into a {@code Note}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String note isn\u0027t empty or doesn\u0027t only contain whitespaces."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note of the activity"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note object of the activity"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteTrimmed \u003d note.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(noteTrimmed)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Note(noteTrimmed);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String priority} into a {@code Priority}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String priority is a correct integer."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priority of the activity"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Priority object of the activity"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityTrimmed \u003d priority.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Priority.isValidPriorityValue(priorityTrimmed)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Priority(priorityTrimmed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String view} into a {@code View}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String view is a valid view."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param view requested to be shown"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return View to be shown"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static View parseView(String view) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(view);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String viewTrimmed \u003d view.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!View.isValidView(viewTrimmed.toUpperCase())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(View.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return View.valueOf(view.toUpperCase());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleCode} into a {@code moduleCode}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleCode is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleCode object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleCodeTrimmed \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCodeTrimmed)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleCode(moduleCodeTrimmed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleName} into a {@code moduleName}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleName is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleName of the module"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleName object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleName parseModuleName(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameTrimmed \u003d moduleName.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleNameTrimmed)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleName(moduleNameTrimmed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the string date is of valid form."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param parameter of the user input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String object created based on user input"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static String parseStatistics(String parameter) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String parameterTrimmed \u003d parameter.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String sortMethod} into a {@code SortMethod}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String sortMethod is correct."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param sortMethod to be used to sort activity list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return SortMethod object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static SortMethod parseSortMethod(String sortMethod) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String sortMethodTrimmed \u003d sortMethod.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!SortMethod.isValidSortMethod(sortMethodTrimmed)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(SortMethod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new SortMethod(sortMethodTrimmed);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String filepath} into a {@code Path}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if string of filepath is correct."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Path parseFilePath(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            requireNonNull(filepath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String filepathTrimmed \u003d filepath.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return Paths.get(filepathTrimmed);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(\"File path is of a incorrect format\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "kester-ng": 198,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * E.g. \u0027m/\u0027 in \u0027add m/CS2103T\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/RepeatDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Parser for repeat command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatDeadlineCommandParser implements Parser\u003cRepeatDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * and returns an RepeatCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_REPEAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    RepeatDeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_MODULE, PREFIX_REPEAT};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean arePrefixesPresent \u003d Stream.of(prefixes).allMatch(prefix -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(arePrefixesPresent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index type \u003d ParserUtil.parseZeroIndex(argMultimap.getValue(PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.getZeroBased() \u003e 3 || type.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(\"Index out of bounds, please indicate [r/0 r/1 r/2 r/3]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new RepeatDeadlineCommand(moduleCode, index, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 57,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/RepeatEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Parser for repeat command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatEventCommandParser implements Parser\u003cRepeatEventCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * and returns an RepeatCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_REPEAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    RepeatEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_MODULE, PREFIX_REPEAT};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean arePrefixesPresent \u003d Stream.of(prefixes).allMatch(prefix -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(arePrefixesPresent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index type \u003d ParserUtil.parseZeroIndex(argMultimap.getValue(PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.getZeroBased() \u003e 3 || type.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(\"Index out of bounds, please indicate [r/0 r/1 r/2 r/3]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new RepeatEventCommand(moduleCode, index, type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 56,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        SortMethod sortMethod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        sortMethod \u003d ParserUtil.parseSortMethod(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new SortCommand(sortMethod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 1,
      "don-tay": 32
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/StatisticsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates an Statistics object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an StatisticsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new StatisticsCommand(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        View view;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        view \u003d ParserUtil.parseView(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new ViewCommand(view);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.addcommands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddCommandParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param argumentMultimap ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param prefixes Prefix..."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 5,
      "kester-ng": 19
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddDeadlineCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    PREFIX_ACTIVITY_NAME, PREFIX_PRIORITY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            PREFIX_DATE, PREFIX_ACTIVITY_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d new Deadline(activityName, dueDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadline.setNote(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadline.setPriority(priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommand(deadline, moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Deadline.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 17,
      "kester-ng": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddEventCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_ACTIVITY_NAME, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_NOTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_ACTIVITY_NAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event event \u003d new Event(activityName, startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                event.setNote(note);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommand(event, moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // if the start date is \u003e end date or end date is already in the past"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "EdmondOng": 1,
      "kester-ng": 47
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddModuleCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_MODULE_NAME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "kester-ng": 39
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DeleteModuleCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12,
      "kester-ng": 28
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/EditModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditModuleCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Valid format: edit m/MODULE CODE [m/MODULE CODE] [n/MODULE NAME]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Exactly 1 or 2 module code must be provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Any number of module name can be provided, only the last module name will be used."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final int NUM_ARGS_TO_EDIT_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditModuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String argsWithWhitespace \u003d addStartWhitespace(args); // helper method to provide empty string as preamble arg"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(argsWithWhitespace, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    ne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e allModuleCodeParsed \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when exactly 2 module code is entered, allowing for module code to be edited"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isModuleCodeEditable(allModuleCodeParsed)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleName(ParserUtil.parseModuleName("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_MODULE_NAME).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (isExcessModuleCodeParsed(allModuleCodeParsed)) { // case when more than 2 module code provided"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                throw new ParseException((EditModuleCommand.EXCESS_MODULE_CODE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditModuleCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Helper method to add a whitespace to the start of args, as ArgumentTokenizer requires a preamble, which"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * the user input format for edit module does not have."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param args Original argument passed to EditModuleCommandParser class to be parsed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return original argument with an additional whitespace at the start"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private String addStartWhitespace(String args) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return \" \" + args;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if two module code prefixes are parsed, which indicates module code will be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If non-two \u0027/m\u0027, received, returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if exactly two module codes provided, otherwise false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isModuleCodeEditable(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003d\u003d NUM_ARGS_TO_EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if more than two module code prefixes are parsed, which indicates module code will not be edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If more than two \u0027/m\u0027, received, returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if more than two module codes provided, otherwise false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isExcessModuleCodeParsed(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003e NUM_ARGS_TO_EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13,
      "don-tay": 97
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Construct a class to store undo and redo history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryBook\u003cT\u003e implements ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistoryCollector;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistoryCollector \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook(ReadOnlyHistory\u003cT\u003e history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        resetData(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset history with new data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newData Date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetData(ReadOnlyHistory\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.setStack(newData.getModuleListHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getModuleListHistory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleListHistory(ModuleListHistory\u003cT\u003e moduleListHistory) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleListHistory \u003d moduleListHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Add recent action into history."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param item T"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.push(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistoryCollector.resetItem();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Undo previous action."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is history"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasHistory \u003d !moduleListHistory.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasHistory) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistoryCollector.pushDirectly(moduleListHistory.getPop());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.pop();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasHistory;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Redo previous action."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is undo history"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean checkItem \u003d !moduleListHistoryCollector.isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (checkItem) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.push(moduleListHistoryCollector.popDirectly());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return checkItem;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.getPop();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getUndoItem() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistoryCollector.getPop();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 90
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A wrapper class to handle various history data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryManager\u003cT\u003e implements HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryBook\u003cT\u003e historyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryBook\u003cString\u003e uiHistoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager(ReadOnlyHistory\u003cT\u003e historyBook, ReadOnlyHistory\u003cString\u003e uiHistoryBook) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBook);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(uiHistoryBook);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBook \u003d new HistoryBook\u003c\u003e(historyBook);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.uiHistoryBook \u003d new HistoryBook\u003c\u003e(uiHistoryBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getHistoryList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getModuleListHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cT\u003e getHistoryBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cString\u003e getUiHistoryBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getItem();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String getUiItem() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBook.getItem();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addUiHistory(String uiList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.add(uiList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T moduleList, String uiList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.add(moduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.add(uiList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.undo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.undo();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.redo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.redo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 65
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API of History interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean undo();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean redo();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void add(T list, String uiList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 13,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for modules that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for activities that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return GuiSettings"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param guiSettings GuiSettings"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Path"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBookFilePath Path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBookFilePath(Path nasaBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces address book data with the data in {@code nasaBook}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook ReadOnlyNasaBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBook(ReadOnlyNasaBook nasaBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the NasaBook"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyNasaBook"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the HistoryBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyHistory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyHistory getHistoryBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the UiHistoryBook"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyHistory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyHistory getUiHistoryBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Getter method for existing module in model\u0027s {@code UniqueModuleList} by moduleCode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return module with module code {@code moduleCode}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    Module getModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must exist in the nasa book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target ModuleCode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void deleteModule(ModuleCode target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code module} must not already exist in the nasa book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param module Module"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the nasa book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target Module code of the module that exists in model\u0027s nasaBook"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedModule newly edited Module"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule(ModuleCode target, Module editedModule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addDeadline(ModuleCode moduleCode, Deadline deadline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addEvent(ModuleCode moduleCode, Event event);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeEvent(ModuleCode moduleCode, Event event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeDeadline(ModuleCode moduleCode, Deadline deadline);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void setEvent(ModuleCode moduleCode, Event target, Event editedEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cDeadline\u003e getFilteredDeadlineList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void sortActivityList(SortMethod sortMethod);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateSchedule();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    String quote();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    String currentUiLocation();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateHistory(String type);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateHistory(List\u003cString\u003e input, String type);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void undoHistory();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean redoHistory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean setDeadlineSchedule(ModuleCode module, Index index, Index schedule);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean setEventSchedule(ModuleCode module, Index index, Index schedule);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasActivity(ModuleCode module, Activity activity);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 127,
      "kester-ng": 29,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.quote.Quote;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the in-memory module manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryManager\u003cUniqueModuleList\u003e historyManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes a ModelManager with the given NasaBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook    ReadOnlyNasaBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param historyBook ReadOnlyHistory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs   ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        ReadOnlyHistory\u003cString\u003e uiHistoryBook,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(nasaBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Initializing with NASA: \" + nasaBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook \u003d new NasaBook(nasaBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.nasaBook.getModuleList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyManager \u003d new HistoryManager\u003c\u003e(historyBook, uiHistoryBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        initialisation();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Startup setup for Nasa book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void initialisation() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateSchedule();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"null\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update the schedule for each activity."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateSchedule() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.scheduleAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the history manager list every time there is a change."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateHistory(String type) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final UniqueModuleList temp \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setModules(nasaBook.getDeepCopyList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyManager.add(temp, type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the history manager list every time there is a change."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateHistory(List\u003cString\u003e input, String type) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final UniqueModuleList temp \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setModules(nasaBook.getDeepCopyList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        output.append(type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        input.forEach(x -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            output.append(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            output.append(x);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyManager.add(temp, output.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Refresh filter settings."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void refreshUi() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String temp \u003d historyManager.getUiItem();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cString\u003e test \u003d Arrays.asList(temp.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        System.out.println(test.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String type \u003d test.get(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!type.equals(\"null\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (test.get(1).equals(\"activity\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                test \u003d test.subList(2, test.size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                if (!test.get(0).equals(\"null\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    if (type.equals(\"list\") || type.equals(\"find\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        updateFilteredModuleList(x-\u003etrue);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        updateFilteredActivityList(new ActivityContainsKeyWordsPredicate(test));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    updateFilteredModuleList(x-\u003etrue);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            } else if (test.get(1).equals(\"module\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                List\u003cString\u003e listTemp \u003d test.subList(2, 3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                updateFilteredModuleList(new NameContainsKeywordsPredicate(listTemp));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                List\u003cString\u003e activityCurrentlyDisplayed \u003d test.subList(4, test.size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                updateFilteredActivityList(new ActivityContainsKeyWordsPredicate(activityCurrentlyDisplayed));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.equals(\"null\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void undoHistory() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasUndoHistory \u003d historyManager.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasUndoHistory) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem().getDeepCopyList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            refreshUi();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redoHistory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasRedoHistory \u003d historyManager.redo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasRedoHistory) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem().getDeepCopyList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            refreshUi();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasRedoHistory;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getNasaBookFilePath();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setNasaBookFilePath(nasaBookFilePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NasaBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBook(ReadOnlyNasaBook nasaBook) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook.resetData(nasaBook);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"null\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cUniqueModuleList\u003e getHistoryBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager.getHistoryBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cString\u003e getUiHistoryBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager.getUiHistoryBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode module) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.hasModule(module);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueModuleList uniqueModuleList \u003d nasaBook.getUniqueModuleList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return uniqueModuleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void deleteModule(ModuleCode target) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModule(target);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"delete\" + currentUiLocation());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(module);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"add\" + currentUiLocation() + \" \" + module.getModuleCode().toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(ModuleCode target, Deadline deadline) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.addDeadline(target, deadline);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation() + \" \" + deadline.getName().name);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(ModuleCode target, Event event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.addEvent(target, event);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation() + \" \" + event.getName().name);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(ModuleCode target, Deadline deadline) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.removeDeadline(target, deadline);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(ModuleCode target, Event event) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.removeEvent(target, event);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"module\" + currentUiLocation());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedDeadline);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setDeadline(moduleCode, target, editedDeadline);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setEvent(ModuleCode moduleCode, Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setEvent(moduleCode, target, editedEvent);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Find out current UI filter property."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String currentUiLocation() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        StringBuilder location \u003d new StringBuilder();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (getFilteredModuleList().size() \u003e 1) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            //not in Find"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" activity\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            boolean test \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredDeadlineList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredDeadlineList()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            i \u003d 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredEventList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredEventList()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            System.out.println(location.toString());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!test) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                location.append(\" null\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else if (getFilteredModuleList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" module \");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(getFilteredModuleList().get(0).getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" activity\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            boolean test \u003d false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredDeadlineList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredDeadlineList()"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            i \u003d 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredEventList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredEventList()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            System.out.println(location.toString());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!test) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                location.append(\" null\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return \" null\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return location.toString();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setDeadlineSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(module, index, type);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean hasExecuted \u003d nasaBook.setDeadlineSchedule(module, index, type);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"schedule\" + currentUiLocation());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return hasExecuted;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setEventSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(module, index, type);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean hasExecuted \u003d nasaBook.setEventSchedule(module, index, type);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"schedule\" + currentUiLocation());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return hasExecuted;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return nasaBook.hasActivity(moduleCode, activity);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module module \u003d nasaBook.getModule(moduleCode);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return module.getFilteredEventList();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module module \u003d nasaBook.getModule(moduleCode);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        for (Module module : filteredModules) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            module.sortDeadlineList(sortMethod);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            module.sortEventList(sortMethod);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"sort\" + currentUiLocation());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : getFilteredModuleList()) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            module.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String quote() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Quote.getQuote();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.equals(other.nasaBook)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 282,
      "kester-ng": 53,
      "don-tay": 140
    }
  },
  {
    "path": "src/main/java/nasa/model/NasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Wraps all data at the Nasa Book Level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NasaBook implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a NasaBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toBeCopied ReadOnlyNasaBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBook(ReadOnlyNasaBook toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the {@code UniqueEventList} of module {@code moduleCode} with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueEventList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueEventList getEvents(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleList.getModule(moduleCode).getEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the contents of the activities of module {@code moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueDeadlineList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueDeadlineList getDeadlines(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleList.getModule(moduleCode).getDeadlineList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces current module list with another module list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleList must not be empty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(UniqueModuleList moduleList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single event to module {@code moduleCode} with {@code event}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code event} must not contain duplicate activities."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event      Event"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(ModuleCode moduleCode, Event event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.addEvent(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in Nasa Book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target      Event"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedEvent Event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvent(ModuleCode moduleCode, Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(moduleCode, target, editedEvent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueEventList eventList \u003d getEvents(moduleCode);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assert eventList !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivity(target, editedEvent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove a single event from module code with {@code moduleCode} with {@code event}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code event} must exist in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event      Event"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(ModuleCode moduleCode, Event event) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.removeEvent(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single deadline to module {@code moduleCode} with {@code deadline}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code deadline} must not contain duplicate activities."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline   Deadline"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(ModuleCode moduleCode, Deadline deadline) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.addDeadline(deadline);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given deadline {@code target} in the list with {@code editedDeadline}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The deadline identity of {@code editedDeadline} must not be the same as another existing deadline in Nasa Book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target         Deadline"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedDeadline Deadline"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(moduleCode, target, editedDeadline);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d getDeadlines(moduleCode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assert deadlineList !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivity(target, editedDeadline);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove a single deadline from module {@code module} with {@code deadline}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code deadline} must exist in the list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline   Deadline"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(ModuleCode moduleCode, Deadline deadline) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.removeDeadline(deadline);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Resets the existing data of this {@code NasaBook} with {@code newData}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newData ReadOnlyNasaBook"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void resetData(ReadOnlyNasaBook newData) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //// module-Level operations"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if an module has the same identity as {@code module} exits in NasaBook."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.contains(moduleCode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds a module to the NasaBook."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must not already exist in the NasaBook"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param module Module"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in Nasa Book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target       Module"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedModule Module"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes {@code key} from this {@code NasaBook}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code key} must exist in the Nasa Book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param key ModuleCode"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModule(ModuleCode key) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.remove(key);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueModuleList getList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return a new NasaBook, to avoid pointing to the same data when testing."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return NasaBook"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook deepCopyNasaBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook newNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newNasaBook.setModuleList(getDeepCopyList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newNasaBook;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Reschedule all activity based on user presets."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void scheduleAll() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.asModifiableObservableList()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .forEach(x -\u003e {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    x.getModifiableDeadlineList()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                            .forEach(Deadline::regenerate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    x.getModifiableEventList()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                            .forEach(Event::regenerate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setDeadlineSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (hasModule(module)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module item \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            item.setDeadlineSchedule(index, type);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setEventSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (hasModule(module)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module item \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            item.setEventSchedule(index, type);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList().size() + \" moduleList\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //TODO: refine Later"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public UniqueModuleList getUniqueModuleList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Ensure that the class being extracted does not points to the same object."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : moduleList.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deepCopyList.add(mods.getDeepCopyModule());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof NasaBook"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 moduleList.equals(((NasaBook) other).moduleList));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.hashCode();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if activity is found in the module with {@code moduleCode}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code of the module to be searched"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param activity activity to be searched"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if activity found in the module, else false"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return module.hasActivity(activity);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 150,
      "kester-ng": 173,
      "don-tay": 9
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API for History book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cT\u003e getModuleListHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 15,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyNasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Unmodifiable view of an Nasa book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public interface ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Gets the underlying {@code UniqueModuleList} from the NasaBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueModuleList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    UniqueModuleList getUniqueModuleList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getDeepCopyList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 6,
      "kester-ng": 13,
      "don-tay": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getCalendarExportPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 6,
      "kester-ng": 11
    }
  },
  {
    "path": "src/main/java/nasa/model/Regenerable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Allows activities to auto-repeat."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public interface Regenerable\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    T regenerate();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 5,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Path nasaBookFilePath \u003d Paths.get(\"data\" , \"nasabook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path historyBookFilePath \u003d Paths.get(\"data\" , \"history.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path uiHistoryBookFilePath \u003d Paths.get(\"data\", \"uiHistory.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Path calendarExportPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newUserPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setNasaBookFilePath(newUserPrefs.getNasaBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        setHistoryBookFilePath(newUserPrefs.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        setUiHistoryBookFilePath(newUserPrefs.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookFilePath \u003d nasaBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setHistoryBookFilePath(Path historyBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBookFilePath \u003d historyBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUiHistoryBookFilePath(Path uiHistoryBookFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.uiHistoryBookFilePath \u003d uiHistoryBookFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 nasaBookFilePath.equals(o.nasaBookFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 historyBookFilePath.equals(o.historyBookFilePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 uiHistoryBookFilePath.equals(o.uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Objects.hash(guiSettings, nasaBookFilePath, historyBookFilePath, uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + nasaBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sb.append(\"\\nLocal history data file location : \" + historyBookFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sb.append(\"\\nLocal ui history data file location : \" + uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Path getCalendarExportPath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return calendarExportPath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "EdmondOng": 32,
      "kester-ng": 77
    }
  },
  {
    "path": "src/main/java/nasa/model/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Enum for views in NASA."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public enum View {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    CALENDAR, MODULES, STATISTICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Valid views are Modules, Calendar, Statistics.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks if String corresponds to valid enum."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param aName input to be checked"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return true if name is valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidView(String aName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        View[] aViews \u003d View.values();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (View aView : aViews) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (aView.toString().equals(aName)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 27
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for activities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class Activity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String EMPTY_NOTE_STRING \u003d \"-\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date dateCreated;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create an activity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of the activity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity(Name name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateCreated \u003d Date.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        note \u003d new Note(EMPTY_NOTE_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d new Schedule(dateCreated);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create an activity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of the activity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity(Name name, Date dateCreated, Note note) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d new Schedule(dateCreated);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the note of the activity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the note of the activity."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the name of the activity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to the set the name of the activity."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the dateCreated of the activity."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return dateCreated"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getDateCreated() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this.dateCreated;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to the set the dateCreated of the activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param dateCreated"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dateCreated);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getScheduleDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return schedule.getRepeatDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(type, dateCreated);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to check if the activity occurs in that month."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param month Month currently in"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if occurs else false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public abstract boolean occurInMonth(int month);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public abstract Activity deepCopy();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public abstract void regenerate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 25,
      "kester-ng": 90,
      "don-tay": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/ActivityContainsKeyWordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to allow activities to be filtered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ActivityContainsKeyWordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ActivityContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().name, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof ActivityContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 29,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Date of an Activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Dates should only be in the format DD-MM-YYYY HH:MM, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d constructDateTime(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts a past date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date A past date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Date acceptPastDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date temp \u003d new Date();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setDate(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void setDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d constructDateTime(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static LocalDateTime constructDateTime(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Construct current date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object of current date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Date now() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String now \u003d LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(now);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if the string matches date format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.setLenient(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.parse(test);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateTimeFormatter.parse(test);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isAfter(other.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isBefore(other.getDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEqual(Date other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isEqual(other.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getDifference(Date other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Duration duration \u003d Duration.between(other.getDate(), date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return (int) duration.toDaysPart();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param numOfDaysToAdd number of days from the current day"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date addDaysToCurrDate(int numOfDaysToAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusDays(numOfDaysToAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param numOfMonthsToAdd number of months from the current day"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date addMonthsToCurrDate(int numOfMonthsToAdd) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusMonths(numOfMonthsToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 58,
      "kester-ng": 78,
      "don-tay": 12
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents Deadlines method in NASA."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Deadline extends Activity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Deadline has already passed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isOverdue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create a new deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param dueDate date the deadline is due"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Date dueDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dueDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidDeadline(dueDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isOverdue \u003d isOverdue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialise Deadlines with a particular unique {@code name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Note"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param priority Priority"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param dueDate Date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Deadline(Name name, Date date, Note note, Priority priority, Date dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(name, date, note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(priority, dueDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        isOverdue \u003d isOverdue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to return due date of the deadline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return dueDate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Return the difference in due date and date of creation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getDifferenceInDay() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return dueDate.getDifference(getDateCreated());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the dueDate."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dueDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the priority."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the priority."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(priority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Unmark deadline as done, and set {@code isOverdue} if overdue."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void unmarkAsDone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (isOverdue()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            isOverdue \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            isOverdue \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !isDone \u0026\u0026 Date.now().isAfter(dueDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        getSchedule().setType(type, dueDate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int dueDateMonth \u003d this.dueDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return month \u003d\u003d dueDateMonth;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity deepCopy() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name nameCopy \u003d new Name(getName().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dueDateCopy \u003d new Date(getDueDate().toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note noteCopy \u003d new Note(getNote().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateCreatedCopy \u003d Date.acceptPastDate(getDateCreated().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority priorityCopy \u003d new Priority(getPriority().toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline copy \u003d new Deadline(nameCopy, dateCreatedCopy, noteCopy, priorityCopy, dueDateCopy, isDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            copy.markAsDone();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        copy.setSchedule(getSchedule().getDeepCopy());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void regenerate() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        getSchedule().update();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (Date.now().isAfter(dueDate) \u0026\u0026 getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setDueDate(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDateCreated(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDone(false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidDeadline(Date dueDate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(dueDate.isBefore(Date.now()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if both are the same deadline with same deadline attributes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * This defines a stronger notion of equality between two deadlines."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isSameDeadline(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherDeadline.getName().equals(getName())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getDueDate().equals(getDueDate())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getDateCreated().equals(getDateCreated())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getNote().equals(getNote());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 43,
      "kester-ng": 111,
      "don-tay": 23
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Event method in Nasa Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Event extends Activity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_EVENT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Event provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Start date should be before end date.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PAST_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"The event has already passed.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isOver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidStartEndDates(startDate, endDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidFutureEvent(endDate), PAST_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This constructor is use for testing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name of event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param startDate Start date of event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param endDate End date of event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Notes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date startDate, Date endDate, Note note) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super.setNote(note);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Initialise Event with a particular unique {@code name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param startDate Date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param endDate Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event(Name name, Date date, Note note, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(name, date, note);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidStartDate(startDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(endDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidEndDate(endDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if start date is valid (ie. start date is after end date)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param startDate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidStartDate(Date startDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if end date is valid (ie. end date is after start date)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param endDate"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidEndDate(Date endDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(endDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int startDateMonth \u003d this.startDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int endDateMonth \u003d this.endDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d startDateMonth; i \u003c\u003d endDateMonth; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (i \u003d\u003d month) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidStartEndDates(Date start, Date end) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(end.isBefore(start));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidFutureEvent(Date end) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return (!end.isBefore(Date.now()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isOver() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return endDate.isBefore(Date.now());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Return the difference in due date and date of creation."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return endDate.getDifference(startDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        getSchedule().setType(type, startDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void regenerate() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        getSchedule().update();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (Date.now().isAfter(endDate) \u0026\u0026 getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            int timeDiff \u003d getDuration();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setEndDate(getSchedule().getRepeatDate().addDaysToCurrDate(timeDiff));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setStartDate(endDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDateCreated(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity deepCopy() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name nameCopy \u003d new Name(getName().toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date startDateCopy \u003d new Date(getStartDate().toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date endDateCopy \u003d new Date(getEndDate().toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note noteCopy \u003d new Note(getNote().toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dateCreatedCopy \u003d new Date(getDateCreated().toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Schedule scheduleCopy \u003d new Schedule();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setDefaultDate(dateCreatedCopy);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setRepeatDate(getScheduleDate());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setType(getSchedule().getType());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event eventCopy \u003d new Event(nameCopy, dateCreatedCopy, noteCopy, startDateCopy, endDateCopy);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        eventCopy.setSchedule(scheduleCopy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventCopy;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if both are the same event with same event attributes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isSameEvent(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getDateCreated().equals(getDateCreated())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getNote().equals(getNote());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 55,
      "kester-ng": 103,
      "don-tay": 23
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Name of an Activity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Names should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "-": 48,
      "kester-ng": 8,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Notes should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The notes String must contain at least one non-whitespace"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * character, otherwise a bunch of tabs and spaces will"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * qualify as a note which should not be the case."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALIDATION_REGEX_EMPTY \u003d \"^$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param content Valid notes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidNote(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is considered valid notes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 content.equals(((Note) other).content)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "kester-ng": 59
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: an integer of range 1 to 5, default value set to 1 if no value received upon instantiation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority should range from 1 to 5 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Valid integers that cannot start with the digit \u00270\u0027, and within range of 1 to 5."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"([1-5]\\\\d{0})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Priority level set to 1 as default value if not specified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Variable is not set as final to allow user to set default priority level (TBD)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static int defaultPriorityLevel \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final int priorityLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with default priority level, when no argument is passed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d defaultPriorityLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with the value {@code priorityLevel}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priorityLevel priority level of the given activity, a String in the integer range of 1 to 5 inclusive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority(String priorityLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidPriorityValue(priorityLevel), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d Integer.parseInt(priorityLevel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return priorityLevel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static int getDefaultPriorityLevel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return defaultPriorityLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given priority level string is in the valid integer range of 1 to 5."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidPriorityValue(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALID_INTEGER_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Integer.toString(priorityLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 priorityLevel \u003d\u003d ((Priority) other).priorityLevel); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 3,
      "kester-ng": 61,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Represents schedule class in Nasa book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Allows user to regenerate activity automatically."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Schedule should be from 0 to 3 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Valid integers that start from 0 to 3."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"([0-3]\\\\d{0})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date dateToRepeat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date defaultDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Construct an empty Schedule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        type \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dateToRepeat \u003d Date.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        defaultDate \u003d Date.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct a schedule from string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param input String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] in \u003d input.split(\",\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d Integer.parseInt(in[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d new Date(in[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        defaultDate \u003d Date.acceptPastDate(in[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with the default type of 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with specific type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date, int type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidSchedule(String.valueOf(type)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Method to extend the date of a module activity."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean update() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasUpdate \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        while (Date.now().isAfter(dateToRepeat) \u0026\u0026 type !\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            init();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            hasUpdate \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasUpdate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set scheduling."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setType(int type, Date dueDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidSchedule(String.valueOf(type)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dateToRepeat \u003d dueDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Setting the type."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Stop scheduling."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void cancel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d defaultDate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize schedules."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 0 :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            cancel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runOnceAWeek();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runTwiceAWeek();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 3 :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runMonthly();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Set default date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDefaultDate(Date date) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Set date to repeat"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setRepeatDate(Date date) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get type of schedule."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get type"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String typeInString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"WEEKLY\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"FORTNIGHTLY\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 3) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"MONTHLY\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get next running date."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Date"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getRepeatDate() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return dateToRepeat;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it weekly."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runOnceAWeek() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addDaysToCurrDate(7);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it twice weekly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runTwiceAWeek() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addDaysToCurrDate(14);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it monthly."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runMonthly() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addMonthsToCurrDate(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule getDeepCopy() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Schedule temp \u003d new Schedule();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setType(type);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        temp.setDefaultDate(defaultDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        temp.setRepeatDate(dateToRepeat);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static boolean isValidSchedule(String test) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return test.matches(VALID_INTEGER_REGEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return String.format(\"%d,%s,%s\", type, dateToRepeat, defaultDate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 166,
      "kester-ng": 45
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * As such, adding and updating of activity uses Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * for equality so as to ensure that the activity being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * unique in terms of identity in the UniqueActivityList. However, the removal of a activity uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Activity#equals(Object) so as to ensure that the activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class UniqueActivityList\u003cT extends Activity\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if the list contains an equivalent T as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds a activity to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toAdd Activity."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getActivityList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public T getActivityByIndex(Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public T getActivityByName(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getName().equals(name))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivity(T targetActivity, T editedActivity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(targetActivity, editedActivity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int index \u003d internalList.indexOf(targetActivity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when editedActivity is a non-target activity that already exists in { @code UniqueActivityList }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!targetActivity.equals(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toRemove Activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent activity from the list by index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param index Index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeByIndex(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Empty all the activity inside the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset activities with the given list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param replacement UniqueActivityList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(replacement.getDeepCopyList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param activities List"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(List\u003cT\u003e activities) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return a copy of activity list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Activity activity : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deepCopyList.add(activity.deepCopy());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        T item \u003d internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item.setSchedule(type.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index.getZeroBased(), item);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getInternalList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getInternalUnmodifiableList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 59,
      "kester-ng": 117,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueDeadlineList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for uniqueDeadlineList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class UniqueDeadlineList extends UniqueActivityList\u003cDeadline\u003e {}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 2,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for uniqueEventList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class UniqueEventList extends UniqueActivityList\u003cEvent\u003e {}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 2,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/DuplicateActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation will result in duplicate Activity (Activity are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * they have the same notes and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(\"Operation would result in duplicate activity\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Abstract History class to store users actions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public abstract class History\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Stack\u003cT\u003e stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private T item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d new Stack\u003cT\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History(Stack\u003cT\u003e history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d history;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item into stack from item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item must not be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void push(T item) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (this.item !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            stack.push(this.item);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item directly into the stack."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item must not be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void pushDirectly(T item) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.push(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack. To get previous item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean pop() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            item \u003d stack.pop();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack directly."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return T."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T popDirectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.pop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasItem() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getPop() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset redo action."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetItem() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setStack(List\u003cT\u003e stack) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.stack.addAll(stack);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Stack\u003cT\u003e getStack() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.isEmpty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 89,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/history/ModuleListHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Class that manage all histories."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleListHistory\u003cT\u003e extends History\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory(Stack\u003cT\u003e moduleListStack) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(moduleListStack);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return unmodifiable list containing histories."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cT\u003e list \u003d new ArrayList\u003c\u003e(super.getStack());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cT\u003e newList \u003d FXCollections.observableArrayList(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 32,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueEventList eventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FilteredList\u003cEvent\u003e filteredEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueDeadlineList deadlineList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FilteredList\u003cDeadline\u003e filteredDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code module}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleName ModuleName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.eventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filteredEvent \u003d new FilteredList\u003c\u003e(eventList.getActivityList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filteredDeadline \u003d new FilteredList\u003c\u003e(deadlineList.getActivityList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the moduleCode of the module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String moduleCode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the module moduleCode to a new moduleCode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing module code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.add(deadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.add(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(Deadline toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.remove(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(Event toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.remove(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueDeadlineList getDeadlineList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueEventList getEventList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlines(UniqueDeadlineList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivities(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlines(List\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivities(deadlines);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivities(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivities(events);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlineSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setSchedule(index, type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEventSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setSchedule(index, type);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filteredDeadline;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filteredEvent;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyDeadlineList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList.getDeepCopyList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getModifiableDeadlineList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deadlineList.getActivityList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyEventList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList.getDeepCopyList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cEvent\u003e getModifiableEventList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return eventList.getActivityList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getDeepCopyModule() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module newModule \u003d new Module(getModuleCode(), getModuleName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cActivity\u003e deadlines \u003d deadlineList.getDeepCopyList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e deadlinesCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Activity activity : deadlines) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlinesCopy.add((Deadline) activity);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        newModule.setDeadlines(deadlinesCopy);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cActivity\u003e events \u003d eventList.getDeepCopyList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cEvent\u003e eventsCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Activity activity : events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventsCopy.add((Event) activity);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        newModule.setEvents(eventsCopy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cDeadline\u003e deadlineIterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cEvent\u003eeventIterator() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList.iterator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Updates module\u0027s underlying filtered activity lists"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param predicate Predicate"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        filteredDeadline.setPredicate(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        filteredEvent.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts module\u0027s deadline list by the specified {@code sortMethod}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod Method of sorting in the module deadline list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortDeadlineList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e comparator \u003d sortMethod.getDeadlineComparator();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        getModifiableDeadlineList().sort(comparator);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts module\u0027s event list by the specified {@code sortMethod}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod Method of sorting in the module event list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortEventList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e comparator \u003d sortMethod.getEventComparator();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        getModifiableEventList().sort(comparator);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both are the same module with same module name and module code."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return String.format(\"%s %s\", moduleCode, moduleName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if deadline is found in the module\u0027s {@code UniqueDeadlineList}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if deadline is present in the module\u0027s deadline list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Deadline currentDeadline : deadlineList.getActivityList()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (currentDeadline.isSameDeadline(deadline)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if event is found in the module\u0027s {@code UniqueEventList}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if event is present in the module\u0027s event list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Event currentEvent : eventList.getActivityList()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (currentEvent.isSameEvent(event)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if activity is found in the module."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param activity"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if activity is present in the module"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return hasDeadline((Deadline) activity);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return hasEvent((Event) activity);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 65,
      "kester-ng": 149,
      "don-tay": 35
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents module code of a Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \"Module codes contain 1 to 10 alphanumeric characters and have no whitespace.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Module code should not contain any whitespace, and all values must be alphanumeric."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ALPHA_NUMERIC_VALIDATION_REGEX \u003d \"[a-zA-Z0-9]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NON_EMPTY_STRING_VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MAX_10_CHAR_REGEX \u003d \"\\\\b\\\\w{1,10}\\\\b\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return test.matches(ALPHA_NUMERIC_VALIDATION_REGEX) \u0026\u0026 test.matches(NON_EMPTY_STRING_VALIDATION_REGEX)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 test.matches(MAX_10_CHAR_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Equality check for ModuleCode, which is case-insensitive."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.toLowerCase().equals(((ModuleCode) other)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .moduleCode.toLowerCase())); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 2,
      "kester-ng": 57,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the official name of the module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \"Module name should only contain alphanumeric characters and spaces, and it should not blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleName(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Arrays.stream(moduleName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .trim().replaceAll(\" +\", \" \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .split(\" \"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .map(word -\u003e Character.toTitleCase("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                word.charAt(0)) + word.substring(1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .toLowerCase()).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleName.equals(((ModuleName) other).moduleName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12,
      "EdmondOng": 1,
      "kester-ng": 42,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/module/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to filter based on activity name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(module.getModuleCode().moduleCode, keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 8,
      "-": 24,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/module/SortMethod.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Represents a SortMethod in NASA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Event and deadline have separate comparators, given by {@link #generateDeadlineComparator(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and {@link #generateEventComparator(String)} respectively."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSortMethod(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortMethod {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sort method must be either name, date, or priority.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Comparator STUB_COMPARATOR \u003d (a, b) -\u003e 0; //Stub comparator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final String sortMethodString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Comparator\u003cDeadline\u003e deadlineComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Comparator\u003cEvent\u003e eventComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a {@code SortMethod}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param method A valid method of sorting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortMethod(String method) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidSortMethod(method), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethodString \u003d method;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.deadlineComparator \u003d generateDeadlineComparator(method);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.eventComparator \u003d generateEventComparator(method);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if a given string is a valid method of sorting."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static boolean isValidSortMethod(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return (test.equals(\"name\") || test.equals(\"date\") || test.equals(\"priority\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the string value of the sort method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The string representation of the method of sorting."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String getSortMethodString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return sortMethodString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the DeadlineComparator of the sort method."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The Comparator used to sort the deadline list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cDeadline\u003e getDeadlineComparator() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return deadlineComparator;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the EventComparator of the sort method."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The EventComparator used to sort the event list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cEvent\u003e getEventComparator() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return eventComparator;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Generates and returns the DeadlineComparator used to sort the deadline list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Default deadline comparator, sorts in ascending order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Lexicographically smallest(a-z), earliest due date, highest priority at the top of the module deadline list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The DeadlineComparator of this instance of {@code SortMethod}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cDeadline\u003e generateDeadlineComparator(String method) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e nameSorter \u003d Comparator.comparing(l -\u003e l.getName().toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e dateSorter \u003d Comparator.comparing(l -\u003e l.getDueDate().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e prioritySorter \u003d Comparator.comparing(l -\u003e l.getPriority().toString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Comparator.reverseOrder());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return nameSorter;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return prioritySorter;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + getSortMethodString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Generates and returns the EventComparator used to sort the event list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Default event comparator, sorts in ascending order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Lexicographically smallest(a-z), earliest start date, at the top of the module event list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Will not sort based on priority."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The DeadlineComparator of this instance of {@code SortMethod}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cEvent\u003e generateEventComparator(String method) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e nameSorter \u003d Comparator.comparing(l -\u003e l.getName().toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e dateSorter \u003d Comparator.comparing(l -\u003e l.getStartDate().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e prioritySorter \u003d STUB_COMPARATOR;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return nameSorter;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return prioritySorter;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + getSortMethodString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return getSortMethodString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 1,
      "don-tay": 124
    }
  },
  {
    "path": "src/main/java/nasa/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A Module is considered unique by comparing using {@code Module#equals(Module)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * As such, adding and updating of Module uses Module#equals(Module)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * for equality so as to ensure that the Module being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a Module uses"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Module#equals(Object) so as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if the list contains an equivalent ModuleCode as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Note: Underlying implementation of equality check on ModuleCode is case-insensitive."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toCheck ModuleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.getModuleCode().equals(toCheck));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds a Module to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The Module must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toAdd Module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (contains(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the ModuleCode {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode identity of {@code editedModule} must not be the same as another existing Module in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target ModuleCode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param editedModule Module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode editedModuleCode \u003d editedModule.getModuleCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int index \u003d internalList.indexOf(getModule(target));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // case when editedModule is a non-target module that already exists in { @code UniqueModuleList }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!target.equals(editedModuleCode) \u0026\u0026 contains(editedModuleCode)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent ModuleCode from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toRemove ModuleCode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove(ModuleCode toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!internalList.remove(getModule(toRemove))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param modules List"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * get a particular module from the list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getModuleCode().equals(moduleCode))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlineSchedule(ModuleCode moduleCode, Index index, Index type) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.setDeadlineSchedule(index, type);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.updateFilteredActivityList(x -\u003e true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEventSchedule(ModuleCode moduleCode, Index index, Index type) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.setEventSchedule(index, type);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.updateFilteredActivityList(x -\u003e true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Module moduleTemp \u003d new Module(mods.getModuleCode(), mods.getModuleName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlinesCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e deadlines \u003d mods.getDeepCopyDeadlineList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Activity activity : deadlines) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinesCopy.add((Deadline) activity);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleTemp.setDeadlines(deadlinesCopy);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventsCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e events \u003d mods.getDeepCopyEventList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Activity activity : events) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                eventsCopy.add((Event) activity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleTemp.setEvents(eventsCopy);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            deepCopyList.add(moduleTemp);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param modules List"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 165,
      "kester-ng": 32,
      "don-tay": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation will result in duplicate Module (Module are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * they have the same module code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(\"Operation would result in duplicate module\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/quote/Quote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.quote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Class to store motivation quotes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class Quote {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Quotes being stored in {@code lines}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static ObservableList\u003cString\u003e lines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ObservableList\u003cString\u003e getLines() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise data by retrieving it from resources."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static void readFile() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Path relative \u003d Path.of(\"data/quotes.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            InputStream readQuote \u003d Quote.class.getClassLoader()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    .getResourceAsStream(\"text/quotes.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assert readQuote !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String res \u003d new String(readQuote.readAllBytes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FileUtil.createIfMissing(relative);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FileUtil.writeToFile(relative, res);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            lines.addAll(FileUtil.readFromFile(relative).split(\"\\n\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(error.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static String getQuote() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int i \u003d random.nextInt(lines.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return lines.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 41,
      "kester-ng": 13
    }
  },
  {
    "path": "src/main/java/nasa/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains utility methods for populating {@code NasaBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static Module geh1001 \u003d new Module(new ModuleCode(\"GEH1001\"), new ModuleName(\"Globalisation\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static Module cs2106 \u003d new Module(new ModuleCode(\"CS2106\"), new ModuleName(\"Operating System\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline project \u003d new Deadline(new Name(\"Weekly Quiz\"), new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        project.setNote(new Note(\"To read readings\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        project.setSchedule(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline tutorial \u003d new Deadline(new Name(\"Tutorial\"), new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        tutorial.setSchedule(1); //repeat weekly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        geh1001.addDeadline(project);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        geh1001.addDeadline(tutorial);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //TODO add activities"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"), new ModuleName(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + \"Professionals\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new Module(new ModuleCode(\"CS2105\"), new ModuleName(\"Introduction to Computer Network\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            cs2106,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            geh1001"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static UniqueModuleList[] getSampleModuleList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list1 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list2 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list3 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list1.add(new Module(new ModuleCode(\"CS2101\"), new ModuleName(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                + \"Professionals\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list1.add(new Module(new ModuleCode(\"CS2105\"), new ModuleName(\"Introduction to Computer Network\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.setModules(list1.getDeepCopyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.add(cs2106);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.add(geh1001);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new UniqueModuleList[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            list3, list1, list2"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static List\u003cString\u003e getSampleUiList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cString\u003e sample \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"null\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"find activity Tutorial\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"find activity Project\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sample;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static ReadOnlyNasaBook getSampleNasaBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook sampleNb \u003d new NasaBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            sampleNb.addModule(sampleModule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ReadOnlyHistory\u003cUniqueModuleList\u003e getSampleHistoryBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cUniqueModuleList\u003e sampleNb \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (UniqueModuleList sampleModuleList : getSampleModuleList()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            sampleNb.add(sampleModuleList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ReadOnlyHistory\u003cString\u003e getSampleUiHistoryBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e sampleNb \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (String sampleUiList : getSampleUiList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            sampleNb.add(sampleUiList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 30,
      "EdmondOng": 70
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String dueDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given activity details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"date\") String date, @JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"dueDate\") String dueDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"schedule\") String schedule,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"isDone\") String isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d source.getDateCreated().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dueDate \u003d source.getDueDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d source.getSchedule().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d Boolean.toString(source.isDone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Deadline} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Priority.isValidPriorityValue(priority)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(dueDate)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDueDate \u003d new Date(dueDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Schedule modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(modelName, modelDate, modelNote, modelPriority, modelDueDate,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Boolean.parseBoolean(isDone));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 1,
      "kester-ng": 110,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given activity details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"note\") String note, @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"schedule\") String schedule) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d source.getDateCreated().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d source.getSchedule().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date eventStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Schedule modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new Event(modelName, modelDate, modelNote, eventStartDate, modelEndDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        event.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 2,
      "kester-ng": 108
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedFilterProperty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Jackson-friendly version filter property."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedFilterProperty {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String filterProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedFilterProperty(@JsonProperty(\"filterProperty\") String filterProperty) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filterProperty \u003d filterProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toModelType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filterProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 21
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Jackson friendly use of History."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "@JsonRootName(value \u003d \"historybook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedHistory {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct History with details of module list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleList List"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(@JsonProperty(\"moduleList\") List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts a given module list for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param source ReadOnlyHistory"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(ReadOnlyHistory\u003cUniqueModuleList\u003e source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.addAll(source.getModuleListHistory().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .map(x -\u003e x.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    .map(JsonAdaptedModule::new).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts Jackson to adapted history object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return HistoryBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cUniqueModuleList\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final List\u003cUniqueModuleList\u003e historyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (List\u003cJsonAdaptedModule\u003e list : moduleList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            final UniqueModuleList uniqueList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (JsonAdaptedModule module : list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                uniqueList.add(module.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyList.add(uniqueList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final ModuleListHistory\u003cUniqueModuleList\u003e temp \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setStack(historyList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cUniqueModuleList\u003e historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.setModuleListHistory(temp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 64,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final List\u003cJsonAdaptedDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                             @JsonProperty(\"moduleName\") String moduleName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                             @JsonProperty(\"deadlines\") List\u003cJsonAdaptedDeadline\u003e deadlines,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                             @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadlines !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            this.deadlineList.addAll(deadlines);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (events !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            this.eventList.addAll(events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleName \u003d source.getModuleName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.addAll(source.getDeadlineList().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .map(JsonAdaptedDeadline::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.addAll(source.getEventList().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleName modelModuleName \u003d new ModuleName(moduleName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final List\u003cDeadline\u003e moduleDeadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (JsonAdaptedDeadline deadline : deadlineList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleDeadlines.add(deadline.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final UniqueDeadlineList uniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueDeadlineList.setActivities(moduleDeadlines);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final List\u003cEvent\u003e moduleEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (JsonAdaptedEvent event : eventList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleEvents.add(event.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueEventList.setActivities(moduleEvents);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Module module \u003d new Module(modelModuleCode, modelModuleName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(uniqueDeadlineList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(uniqueEventList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 71,
      "EdmondOng": 2,
      "kester-ng": 35,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedUiHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Storage to store data for Ui history."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "@JsonRootName(value \u003d \"uiHistoryBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedUiHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cJsonAdaptedFilterProperty\u003e name \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given activity details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedUiHistory(@JsonProperty(\"name\") List\u003cJsonAdaptedFilterProperty\u003e name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (name !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedUiHistory(ReadOnlyHistory\u003cString\u003e uiHistory) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name.addAll(uiHistory.getModuleListHistory().stream().map(JsonAdaptedFilterProperty::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return HistoryBook using json file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return HistoryBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cString\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final List\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (JsonAdaptedFilterProperty list : name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            input.add(list.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final ModuleListHistory\u003cString\u003e temp \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setStack(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.setModuleListHistory(temp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 57
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonNasaBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A class to access NasaBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorage implements NasaBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNasaBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathOne;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathTwo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathThree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonNasaBookStorage(Path filePathOne, Path filePathTwo, Path filePathThree) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathOne \u003d filePathOne;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathTwo \u003d filePathTwo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathThree \u003d filePathThree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathOne;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathTwo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathThree;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readNasaBook(filePathOne);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #readNasaBook()}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cJsonSerializableNasaBook\u003e jsonNasaBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                filePath, JsonSerializableNasaBook.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!jsonNasaBook.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.of(jsonNasaBook.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(filePathTwo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #readHistoryBook()}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cJsonAdaptedHistory\u003e jsonHistoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                filePath, JsonAdaptedHistory.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!jsonHistoryBook.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.of(jsonHistoryBook.get().toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readUiHistoryBook(filePathThree);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #readUiHistoryBook()}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cJsonAdaptedUiHistory\u003e jsonHistoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                filePath, JsonAdaptedUiHistory.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!jsonHistoryBook.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.of(jsonHistoryBook.get().toModelType());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveNasaBook(nasaBook, filePathOne);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #saveNasaBook(ReadOnlyNasaBook)}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, uiHistoryBook, filePathOne, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Save data into json files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param historyBook"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param uiHistoryBook"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathOne"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathTwo"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathThree"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathOne);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathTwo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathThree);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathOne);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathTwo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathThree);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePathOne);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedHistory(historyBook), filePathTwo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedUiHistory(uiHistoryBook), filePathThree);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 71,
      "EdmondOng": 112
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonSerializableNasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An Immutable NASA that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "@JsonRootName(value \u003d \"nasabook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonSerializableNasaBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonSerializableNasaBook} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code ReadOnlyNasaBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNASABook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(ReadOnlyNasaBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this nasa book into the model\u0027s {@code NasaBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public NasaBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (nasaBook.hasModule(module.getModuleCode())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBook.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 57,
      "kester-ng": 3,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/nasa/storage/NasaBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.NasaBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface NasaBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns NASABook data as a {@link ReadOnlyNasaBook}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #getNasaBookFilePath()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link ReadOnlyNasaBook} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param nasaBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #saveNasaBook(ReadOnlyNasaBook)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      ReadOnlyHistory\u003cString\u003e uiHistoryBook) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      Path filePathTwo, Path filePathThree) throws IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43,
      "EdmondOng": 21
    }
  },
  {
    "path": "src/main/java/nasa/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Storage extends NasaBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "EdmondOng": 7
    }
  },
  {
    "path": "src/main/java/nasa/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Manages storage of NASA data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NasaBookStorage nasaBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StorageManager(NasaBookStorage nasaBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookStorage \u003d nasaBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NASA methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.getNasaBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.getHistoryBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return readNasaBook(nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.readNasaBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.readHistoryBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(nasaBookStorage.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readUiHistoryBook(nasaBookStorage.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.readUiHistoryBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        saveNasaBook(nasaBook, nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookStorage.saveNasaBook(nasaBook, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, uiHistoryBook, nasaBookStorage.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                nasaBookStorage.getHistoryBookFilePath(), nasaBookStorage.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePathOne + filePathTwo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBookStorage.saveUltimate(nasaBook, historyBook, uiHistoryBook, filePathOne, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 77,
      "EdmondOng": 51
    }
  },
  {
    "path": "src/main/java/nasa/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Optional"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link nasa.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 30,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/ui/CalendarView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * UI component to represent the calendar view."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentMonth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleObservableList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Button next;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Button prev;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private HBox calendarDetails;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor for the controller."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules listed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CalendarView(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // initialize the calendar grid and its contents"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentYear \u003d currentDateTime.getYear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentMonth \u003d currentDateTime.getMonthValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleObservableList \u003d moduleObservableList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update the Label"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update calendar"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update contents in calendar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // allow updating of calendar"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // TODO: whenever a module is added, do this also"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                resetCalendar();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to update the calendar as activities are edited/removed/added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void updateCalendar(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d module.getFilteredEventList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlineObservableList.addListener(new ListChangeListener\u003cDeadline\u003e() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Deadline\u003e c) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    resetCalendar();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventObservableList.addListener(new ListChangeListener\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Event\u003e c) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    resetCalendar();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the header for the calendar."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeCalendarHeader() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dayHeader \u003d new VBox();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            GridPane.setVgrow(dayHeader, Priority.NEVER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setText(DayOfWeek.of(i).getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.getChildren().add(day);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.getStyleClass().add(\"date-header\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dayHeader, i - 1, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the date grids for the calendar."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeDateGrids() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime monthDetails \u003d LocalDateTime.of(currentYear, currentMonth, 1, 0, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int firstDayOfMonth \u003d monthDetails.getDayOfWeek().getValue(); // get when the first date lies on which day"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d monthDetails.getMonth().maxLength(); // get total days in current month"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to adjust totalDaysInMonth for Feb (leap year)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDate date \u003d LocalDate.of(currentYear, currentMonth, 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!date.isLeapYear() \u0026\u0026 date.getMonth() \u003d\u003d Month.FEBRUARY) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            totalDaysInMonth--; // need to minus 1 as not leap year"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int nullDays \u003d firstDayOfMonth - 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int currentDate \u003d 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the first row of the calendar grid"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ScrollPane dateContentSp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setFitToWidth(true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setFitToHeight(true);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setContent(dateContent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (i \u003c nullDays) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // not in current month, set to white color"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // set to purple color plus add date number"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setStyle(\"-fx-text-fill:black\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                currentDate++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dateContentSp, i, 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the rest of the grids as per normal"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ScrollPane dateContentSp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setFitToWidth(true);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setFitToHeight(true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setContent(dateContent);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // check if current grid is still within the month"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (currentDate \u003c\u003d totalDaysInMonth) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    currentDate++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    // create a white pane"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                calendarGrid.add(dateContentSp, j, i);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Load all activities into the calendar."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules in the application"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void loadActivities(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Deadline deadline : deadlineObservableList) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d (Deadline) deadline.deepCopy();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Name name \u003d new Name(String.format(\"[%s] %s\", module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getName().toString()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setName(name);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (deadline.occurInMonth(currentMonth)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (deadline.getDueDate().getDate().getYear() !\u003d currentYear) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    int activityDate \u003d getDayOfMonth(deadline);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (activityHashMap.containsKey(activityDate)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.get(activityDate).add(deadlineCopy);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activities.add(deadlineCopy);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.put(activityDate, activities);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                module.getFilteredEventList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            addEvents(eventObservableList, activityHashMap, module.getModuleCode());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // now we populate those grids that has activities"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Integer i : activityHashMap.keySet()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cActivity\u003e dateActivities \u003d activityHashMap.get(i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int size \u003d dateActivities.size();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(i));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ScrollPane dateContentSp \u003d (ScrollPane) node;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d (VBox) dateContentSp.getContent();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Activity activity : dateActivities) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label activityLabel \u003d getActivityLabel(activity);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    activityLabel.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(activityLabel);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the label representing the activity."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed in calendar"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label getActivityLabel(Activity activity) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Label activityLabel \u003d new Label();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it red"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color: purple; -fx-background-radius: 5\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \" 5 5 5\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (activity instanceof Event) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it yellow"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color: darkblue\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it green"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color:green\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return activityLabel;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the whole calendar."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeWholeCalendar() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeCalendarHeader();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeDateGrids();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the start months of the activities."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed on calendar"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getDayOfMonth(Activity activity) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Deadline) activity).getDueDate().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Event) activity).getStartDate().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to reset the whole calendar (remove all activities)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void resetCalendar() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cNode\u003e calendarCells \u003d calendarGrid.getChildren();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Node cell : calendarCells) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (GridPane.getRowIndex(cell) !\u003d null"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 GridPane.getRowIndex(cell) !\u003d 0) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cNode\u003e nodes \u003d ((VBox) ((ScrollPane) cell).getContent()).getChildren();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (nodes.size() \u003e 1) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    nodes.remove(1, nodes.size());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Updates the calendar to the next month\u0027s schedule."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void onClickNext() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (currentMonth \u003d\u003d 12) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // set to first month of next year"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth \u003d 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentYear +\u003d 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth +\u003d 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeDateGrids();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);*/"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update the calendar to previous month\u0027s schedule."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void onClickPrevious() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (currentMonth \u003d\u003d 1) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // set to last month of last year"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth \u003d 12;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentYear -\u003d 1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth -\u003d 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update label based on current months."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateLabel() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setText(String.format(\"%s %s\", Month.of(currentMonth), Year.of(currentYear)));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds event to the calendar."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param events list of events to be added"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to show activities on the calendar"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvents(ObservableList\u003cEvent\u003e events, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                          ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int startYear \u003d event.getStartDate().getDate().getYear();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int endYear \u003d event.getEndDate().getDate().getYear();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event eventCopy \u003d (Event) event.deepCopy();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Name name \u003d new Name(String.format(\"[%s] %s\", moduleCode.toString(),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                event.getName().toString()));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventCopy.setName(name);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (startYear \u003e currentYear"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || endYear \u003c currentYear) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                continue; // event not happening this year at all"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // now check for month"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                int startMonth \u003d event.getStartDate().getDate().getMonthValue();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                int endMonth \u003d event.getEndDate().getDate().getMonthValue();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (startYear \u003d\u003d currentYear \u0026\u0026 endYear \u003d\u003d currentYear) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    addEventHelper(startMonth, endMonth, eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else if (startYear \u003c currentYear \u0026\u0026 currentYear \u003c endYear) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    // any month will be filled with events"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (startYear \u003d\u003d currentYear) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        endMonth \u003d 12;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        startMonth \u003d 1;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (startMonth \u003e currentMonth || endMonth \u003c currentMonth) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (startMonth \u003c currentMonth \u0026\u0026 currentMonth \u003c endMonth) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (startYear \u003d\u003d currentYear \u0026\u0026 startMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthFromStartToEnd(eventCopy, activityHashMap,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            event.getStartDate().getDate().getDayOfMonth(), getMaxDaysInMonth());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (endYear \u003d\u003d currentYear \u0026\u0026 endMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthFromStartToEnd(eventCopy, activityHashMap,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            1, event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Helper method to populate month with event {@code event}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param startMonth"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param endMonth"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEventHelper(int startMonth, int endMonth, Event event,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (startMonth \u003e currentMonth || endMonth \u003c currentMonth) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // check if month in-between"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (startMonth \u003c currentMonth \u0026\u0026 currentMonth \u003c endMonth) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // means the whole month has the event"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthWithEvents(event, activityHashMap);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else if (startMonth \u003d\u003d currentMonth \u0026\u0026 endMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from start date to end-date"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap,"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getStartDate().getDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else if (startMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from start to last day of month"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getStartDate().getDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    getMaxDaysInMonth());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from first day of month to end"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap, 1,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Populates month with event that span over multiple days."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be shown"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to store activities"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param startDate start date of event"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param endDate end date of event"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void populateMonthFromStartToEnd(Event event, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            int startDate, int endDate) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d startDate; i \u003c\u003d endDate; i++) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (activityHashMap.containsKey(i)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.get(i).add(event);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activities.add(event);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.put(i, activities);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Populates months with event."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be shown"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to store activities"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void populateMonthWithEvents(Event event, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d getMaxDaysInMonth();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalDaysInMonth; i++) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (activityHashMap.containsKey(i)) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.get(i).add(event);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activities.add(event);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.put(i, activities);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getMaxDaysInMonth() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime monthDetails \u003d LocalDateTime.of(currentYear, currentMonth, 1, 0, 0);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d monthDetails.getMonth().maxLength(); // get total days in current month"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to adjust totalDaysInMonth for Feb (leap year)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDate date \u003d LocalDate.of(currentYear, currentMonth, 1);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!date.isLeapYear() \u0026\u0026 date.getMonth() \u003d\u003d Month.FEBRUARY) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            totalDaysInMonth--; // need to minus 1 as not leap year"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return totalDaysInMonth;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 506,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandHint;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final HashMap\u003cString, String\u003e commandList \u003d CommandHint.getCommandList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ListIterator\u003cString\u003e commandHistoryIterator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private String matchedCommand \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MainWindow main;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, MainWindow main) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistoryIterator \u003d commandHistory.listIterator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_RELEASED, (key) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (key.isControlDown() \u0026\u0026 key.getCode() \u003d\u003d KeyCode.V) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            switch (key.getCode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case LEFT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.backward();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case RIGHT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.forward();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.previous());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.next());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (isValidCommand()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    main.getHint(commandList.get(matchedCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.requestFocus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                } else if (main.isHintShowing()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    main.hideHint();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Verifies if text in command field is a valid command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isValidCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        boolean isCommand \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (String command : commandList.keySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandTextField.getText().trim().toLowerCase().startsWith(command)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                isCommand \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                matchedCommand \u003d command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return isCommand;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistoryIterator \u003d commandHistory"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            matchedCommand \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (main.isHintShowing()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                main.hideHint();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * @see nasa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 154
    }
  },
  {
    "path": "src/main/java/nasa/ui/ExportQrWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Window showing the qr code to export NasaBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class ExportQrWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String FXML \u003d \"ExportQrWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* Logger to track if qr code displayed to user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExportQrWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ImageView qrCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates a new ExportWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param root Stage to use as the root of the ExportWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ExportQrWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ExportQrWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Updates the content of the window, with the qr code given by (@code pngData)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param pngData new qr code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void update(byte[] pngData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Image qrCode \u003d new Image(new ByteArrayInputStream(pngData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.qrCode.setImage(qrCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Shows window to user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.logger.fine(\"Showing QR Code to user\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.getRoot().isShowing();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().hide();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().requestFocus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 70
    }
  },
  {
    "path": "src/main/java/nasa/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-T10-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 98
    }
  },
  {
    "path": "src/main/java/nasa/ui/HintWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * UI component for hint window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class HintWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"HintWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private GridPane popUp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label parameters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label example;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label commandMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label parametersMessage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label exampleMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label copyMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Button copyExample;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public HintWindow() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Updates the input of the hint window"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popUp.setFocusTraversable(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup \u003d new Popup();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setHideOnEscape(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandMessage.setText(input.split(\"\\n\")[0].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        parametersMessage.setText(input.split(\"\\n\")[1].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        exampleMessage.setText(input.split(\"\\n\")[2].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.getContent().add(popUp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Displays the hint panel to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param stage Stage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void show(Stage stage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popUp.setMaxWidth(stage.getWidth() * 3 / 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.show(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setAnchorX(stage.getX());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (stage.isFullScreen()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            popup.setAnchorY(stage.getHeight() - 125 - popup.getHeight());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            popup.setAnchorY(stage.getHeight() - 100 - popup.getHeight());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.hide();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return popup !\u003d null \u0026\u0026 popup.isShowing();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Copies the example for the command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void copyExample() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ClipboardContent example \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        example.putString(exampleMessage.getText());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        clipboard.setContent(example);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 91
    }
  },
  {
    "path": "src/main/java/nasa/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HintWindow hintWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private QuotePanel quotePanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ExportQrWindow exportQrWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem undoMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem redoMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow \u003d new ExportQrWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        quotePanel \u003d new QuotePanel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.addEventFilter(KeyEvent.KEY_RELEASED, event -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.next();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow \u003d new HintWindow();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanel \u003d new TabPanel(logic);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.heightProperty().addListener((obs, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPanel.updateModuleList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.widthProperty().addListener((obs, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPanel.updateModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getNasaBookFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hideHint() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isHintShowing() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return hintWindow.isShowing();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void getQuote(String input) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        quotePanel.setText(input);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        quotePanel.show(getPrimaryStage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles undo."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleUndo() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"undo\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles redo."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleRedo() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"redo\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getHint(String input) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.setInput(input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.show(getPrimaryStage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Handles export qr code."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void handleExportQr(byte[] qrData) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow.update(qrData);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!exportQrWindow.isShowing()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            exportQrWindow.show();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            exportQrWindow.focus();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow.hide();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isModules()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getModules();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isCalendar()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getCalendar();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isStatistics()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getStatistics();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (commandResult.isQuote()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                getQuote(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (commandResult.isShowQr()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                handleExportQr(commandResult.getQrData());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 90,
      "EdmondOng": 3,
      "-": 170,
      "kester-ng": 10,
      "don-tay": 22
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.activity.DeadlineListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.ui.activity.EventListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeadlineListPanel deadlineListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox activityListPanelPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleCard(Module module, int width) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMinWidth(width);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMaxWidth(width);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMaxHeight(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        code.setText(module.getModuleCode().toString() + \" \" + module.getModuleName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListPanel \u003d new DeadlineListPanel(module.getFilteredDeadlineList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListPanel \u003d new EventListPanel(module.getFilteredEventList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityListPanelPlaceholder.getChildren().add(deadlineListPanel.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 58,
      "kester-ng": 8,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox moduleListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label noModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleObservableList \u003d moduleObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!moduleObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            noModules.setManaged(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setModuleListView();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setModuleListView();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setModuleListView() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListView.getChildren().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int width \u003d Math.max((int) scrollPane.getWidth() / moduleObservableList.size(), 275);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module :moduleObservableList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            moduleListView.getChildren().add(new ModuleCard(module, width).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 62
    }
  },
  {
    "path": "src/main/java/nasa/ui/QuotePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * UI component for quote panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class QuotePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"QuotePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int time \u003d 5000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private AnchorPane pane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Create a quote panel."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public QuotePanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup \u003d new Popup();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        label.setMaxWidth(400);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        pane.prefWidthProperty().bind(label.prefWidthProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        pane.prefHeightProperty().bind(label.prefHeightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.setAutoHide(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.getContent().add(pane);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setText(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        label.setText(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Show quote message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param stage Stage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void show(Stage stage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (popup.isShowing()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new Timeline(new KeyFrame(Duration.millis(time), runtime -\u003e popup.hide())).play();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.centerOnScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Timeline(new KeyFrame(Duration.millis(time), runtime -\u003e popup.hide())).play();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.show(stage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 25,
      "kester-ng": 34
    }
  },
  {
    "path": "src/main/java/nasa/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatisticsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel showing statistics on modules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackedBarChart\u003cString, Integer\u003e stackedBarChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsPanel(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.setMinWidth(500);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.setMinWidth(500);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                resetStatistics();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        updateStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Method to update statistics as activities are edited/removed/added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void updateStatistics(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlineObservableList.addListener(new ListChangeListener\u003cDeadline\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Deadline\u003e c) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    resetStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Set statistics."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void loadStatistics(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cPieChart.Data\u003e pieData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            pieData.add(new PieChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    module.getFilteredDeadlineList().size()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e chartData \u003d FXCollections.observableArrayList(pieData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.setData(chartData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        chartData.forEach(data -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                data.nameProperty().bind(data.pieValueProperty().getValue() \u003e 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        ? Bindings.concat("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                data.getName(), \" - \", data.pieValueProperty().intValue(), \" deadlines\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        : Bindings.concat("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                data.getName(), \" - \", data.pieValueProperty().intValue(), \" deadline\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                )"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //Bar chart"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e tasksCompleted \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tasksCompleted.getData().add(new XYChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getFilteredDeadlineList()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .filter(activity -\u003e activity.isDone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .count()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tasksCompleted.setName(\"Completed\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e tasksNotCompleted \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tasksNotCompleted.getData().add(new XYChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getFilteredDeadlineList()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .filter(activity -\u003e !activity.isDone())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .count()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tasksNotCompleted.setName(\"Not completed\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.getData().addAll(tasksCompleted, tasksNotCompleted);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void resetStatistics() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.getData().clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.getData().clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 123,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/nasa/ui/TabPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Tab for modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TabPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox statisticsList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TabPanel(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarView \u003d new CalendarView(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getStyleClass().add(\"background\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.setTabMinWidth(tabPane.getWidth() / 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.setTabMaxWidth(tabPane.getWidth() / 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void updateModuleList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanel.setModuleListView();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getModules() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getCalendar() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getStatistics() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Switches to the subsequent tab or the first tab if current tab is the last tab."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void next() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectNext();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 81
    }
  },
  {
    "path": "src/main/java/nasa/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nasa.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            mainWindow.getQuote(logic.execute(\"quote\").getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 9,
      "EdmondOng": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/DeadlineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeadlineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"DeadlineCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Deadline deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox deadlinePane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CheckBox isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label dateToRepeat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeadlineCard(Deadline deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name.setText(displayedIndex + \". \" + deadline.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date.setText(\"Due by: \" + deadline.getDueDate().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note.setText(deadline.getNote().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat.setText(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadline.getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            dateToRepeat.setText(\"Repeat: \" + deadline.getSchedule().typeInString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone.setSelected(deadline.isDone());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone.setMouseTransparent(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            deadline.setDone(!deadline.isDone());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //mainWindow.handleDeadlineClick(displayedIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (!deadline.isOverdue()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinePane.getParent().setStyle(\"-fx-background-color: #C7CEEA;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinePane.getParent().setStyle(\"-fx-background-color: darkred;\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            isDone.setSelected(deadline.isDone());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setPriority();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a Ui representation of the priority."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setPriority() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (deadline.getPriority().getPriorityLevel()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#00bc6b;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#85ba00;\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#d0d000;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#e1b400;\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!!!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#e80303;\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof DeadlineCard)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeadlineCard card \u003d (DeadlineCard) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 100,
      "EdmondOng": 2,
      "kester-ng": 15
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/DeadlineListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeadlineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeadlineListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ListView\u003cDeadline\u003e deadlineListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeadlineListPanel(ObservableList\u003cDeadline\u003e deadlineList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setItems(deadlineList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        deadlineListView.setMaxHeight(deadlineList.size() * 50 + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setWidth(double width) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setPrefWidth(width);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        protected void updateItem(Deadline deadline, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            prefWidthProperty().bind(deadlineListView.widthProperty().subtract(10));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            deadlineListView.setMaxHeight((deadlineListView.getItems().size() + 1) * 100);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setStyle(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (!deadline.isOverdue()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #C7CEEA;\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFB2AE;\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(new DeadlineCard(deadline, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "EdmondOng": 1,
      "kester-ng": 58
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox eventPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name.setText(displayedIndex + \". \" + event.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        date.setText(\"From \" + event.getStartDate().toString() + \" to \" + event.getEndDate().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note.setText(event.getNote().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/EventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        eventListView.setMaxHeight(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            prefWidthProperty().bind(eventListView.widthProperty().subtract(10));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            eventListView.setMaxHeight((eventListView.getItems().size() + 1) * 75);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setStyle(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (!event.isOver()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    setStyle(\"-fx-background-color: #aee4ff;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFB2AE;\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "kester-ng": 53
    }
  },
  {
    "path": "src/main/resources/text/quotes.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Life is what we make it, always has been, always will be.” – Grandma Moses"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You may be disappointed if you fail, but you are doomed if you don’t try.” – Beverly Sills"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Dream big and dare to fail.” – Norman Vaughan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It does not matter how slowly you go as long as you do not stop.” – Confucius"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Build your own dreams, or someone else will hire you to build theirs.” – Farrah Gray"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I would rather die of passion than of boredom.” – Vincent van Gogh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I didn’t fail the test. I just found 100 ways to do it wrong.” – Benjamin Franklin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Limitations live only in our minds. But if we use our imaginations, our possibilities become limitless.” – Jamie Paolinetti"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Challenges are what make life interesting and overcoming them is what makes life meaningful.” – Joshua J. Marine"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Too many of us are not living our dreams because we are living our fears.” – Les Brown"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If the wind will not serve, take to the oars.” – Latin Proverb"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you’re offered a seat on a rocket ship, don’t ask what seat! Just get on.” – Sheryl Sandberg"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Happiness is not something readymade. It comes from your own actions.” – Dalai Lama"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“When I let go of what I am, I become what I might be.” – Lao Tzu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Everything has beauty, but not everyone can see.” – Confucius"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Few things can help an individual more than to place responsibility on him, and to let him know that you trust him.” – Booker T. Washington"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“There is only one way to avoid criticism: do nothing, say nothing, and be nothing.” – Aristotle"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best revenge is massive success.” – Frank Sinatra"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Either you run the day, or the day runs you.” – Jim Rohn"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Winning isn’t everything, but wanting to win is.” – Vince Lombardi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Your time is limited, so don’t waste it living someone else’s life.” – Steve Jobs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Life is what happens to you while you’re busy making other plans.” – John Lennon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Just know, when you truly want success, you’ll never give up on it. No matter how bad the situation may get.” – Unknown"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I don’t regret the things I’ve done, I regret the things I didn’t do when I had the chance.” – Unknown"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Happiness cannot be traveled to, owned, earned, or worn. It is the spiritual experience of living every minute with love, grace \u0026 gratitude.” – Denis Waitley"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I am thankful for all of those who said NO to me. Its because of them I’m doing it myself.” – Albert Einstein"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t worry about failures, worry about the chances you miss when you don’t even try.” – Jack Canfield"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Nobody ever wrote down a plan to be broke, fat, lazy, or stupid. Those things are what happen when you don’t have a plan.” – Larry Winget"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Though no one can go back and make a brand new start, anyone can start from now and make a brand new ending.” – Carl Bard"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I don’t regret the things I’ve done, I regret the things I didn’t do – Lucas ( Rory Cochrane, Empire Records)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Never give up on something that you can’t go a day without thinking about.” – Unknown"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“When you feel like giving up, remember why you held on for so long in the first place.” – Unknown"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Always be a first-rate version of yourself, instead of a second-rate version of somebody else.” – Judy Garland"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What lies behind us and what lies before us are tiny matters compared to what lies within us.” – Henry S. Haskins"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Challenge yourself with something you know you could never do, and what you’ll find is that you can overcome anything.” – Unknown"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It is never too late to be what you might have been.” – George Eliot"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“All our dreams can come true–if we have the courage to pursue them.” – Walt Disney"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best way to predict the future is to invent it.” – Alan Kay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you cannot do great things, do small things in a great way.” – Napoleon Hill"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“An obstacle is often a stepping stone.” – William Prescott"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You make a living by what you get; you make a life by what you give.” – Winston Churchill"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The journey of a thousand miles begins with one step.” – Lao Tzu"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What you do speaks so loudly that I cannot hear what you say.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You must be the change you wish to see in the world.” – Gandhi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Tough times never last, but tough people do.” – Dr. Robert Schuller"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Keep your face to the sunshine and you can never see the shadow.” – Helen Keller"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best way out is always through.” – Robert Frost"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Make each day your masterpiece.” – John Wooden"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best dreams happen when you’re awake.” – Cherie Gilderbloom"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t count the days, make the days count.” – Muhammad Ali"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The difference between ordinary and extraordinary is that little extra.” – Jimmy Johnson"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You must not only aim right, but draw the bow with all your might.” – Henry David Thoreau"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Even if you’re on the right track, you’ll get run over if you just sit there.” – Will Rogers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Every strike brings me closer to the next home run.” – Babe Ruth"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t wait. The time will never be just right.” – Napoleon Hill"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“A year from now you may wish you had started today.” – Karen Lamb"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It is never too late to be what you might have been.” – George Eliot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If there is no struggle, there is no progress.” – Frederick Douglass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What we fear doing most is usually what we most need to do.” – Tim Ferriss"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The more I want to get something done, the less I call it work.” – Richard Bach"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Your imagination is your preview of life’s coming attractions.” – Albert Einstein"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Do what you love and the money will follow.” – Marsha Sinetar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The harder I work, the luckier I get.” – Gary Player"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Even if you fall on your face, you’re still moving forward.” – Victor Kiam"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The purpose of our lives is to be happy.” – Dalai Lama"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The dreamers are the saviors of the world.” – James Allen"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Obsessed is just a word the lazy use to describe the dedicated.” – Russell Warren"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Someday is not a day of the week.” – Denise Brennan-Nelson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you can’t outplay them, outwork them.” – Ben Hogan"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Champions keep playing until they get it right.” – Billie Jean King"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Change your thoughts and you change your world.” – Norman Vincent Peale"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Action is the foundational key to all success – Pablo Picasso"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I will go anywhere as long as it is forward.” – David Livingston"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you aren’t going all the way, why go at all? – Joe Namath"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Just keep going. Everybody gets better if they keep at it.” – Ted Williams"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t wish it were easier, wish you were better.” – Jim Rohn"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The creation of a thousand forests is in one acorn.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It wasn’t raining when Noah built the ark.” – Howard Ruff"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Never let your memories be greater than your dreams.” – Doug Ivester"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you have built castles in the air, your work need not be lost; that is where they should be. Now put the foundations under them.” – Henry David Thoreau"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“There are two primary choices in life: to accept conditions as they exist, or accept the responsibility for changing them.” – Denis Waitley"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“We are what we repeatedly do. Excellence, then, is not an act, but a habit.” – Aristotle"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The greatest discovery of my generation is that a human being can alter his life by altering the attitudes of his mind.” – William James"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“In three words I can sum up everything I’ve learned about life: It goes on.” – Robert Frost"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The aim of an argument or discussion should not be victory, but progress.” – Joseph Joubert"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Only those who will risk going too far can possibly find out how far one can go.” – T.S. Eliot"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“To live is the rarest thing in the world. Most people exist, that is all.” – Oscar Wilde"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Freedom is not the absence of commitments, but the ability to choose yours.” – Paulo Coelho"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Conformity is the jailer of freedom and the enemy of growth.” – John F. Kennedy"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I am tomorrow, or some future day, what I establish today. I am today what I established yesterday or some previous day.” – James Joyce"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It’s time to start living the life you’ve imagined – Henry James"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Every man dies. Not every man really lives.” – William Wallace"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t be pushed by your problems. Be led by your dreams.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Action is the foundational key to all success.” – Pablo Picasso"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Nothing important was ever achieved without someone taking a chance.” – H. Jackson Brown, Jr"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 95
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "   \u003cHBox fx:id\u003d\"calendarDetails\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003cButton fx:id\u003d\"prev\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onClickPrevious\" text\u003d\"Previous\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cLabel fx:id\u003d\"monthAndYear\" layoutX\u003d\"100.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"206.0\" styleClass\u003d\"cell_big_label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003cButton fx:id\u003d\"next\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onClickNext\" text\u003d\"Next\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" gridLinesVisible\u003d\"true\" layoutX\u003d\"36.0\" layoutY\u003d\"32.0\" styleClass\u003d\"calendarGrid\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints fx:id\u003d\"CalendarGrid\" minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColorAdjust /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "kester-ng": 52
    }
  },
  {
    "path": "src/main/resources/view/DeadlineCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox fx:id\u003d\"deadlinePane\" alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cCheckBox fx:id\u003d\"isDone\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"0.0\" right\u003d\"15.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cGridPane VBox.vgrow\u003d\"ALWAYS\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"80.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"20.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"activity_big_label\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"activity_priority_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.rowIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dateToRepeat\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 36,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" text\u003d\"Deadlines\" styleClass\u003d\"activity-label\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cListView  fx:id\u003d\"deadlineListView\"  /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox fx:id\u003d\"eventPane\" id\u003d\"event\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cGridPane VBox.vgrow\u003d\"ALWAYS\" hgap\u003d\"1\" vgap\u003d\"3\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"activity_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 26
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" text\u003d\"Events\" styleClass\u003d\"activity-label\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cListView  fx:id\u003d\"eventListView\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15
    }
  },
  {
    "path": "src/main/resources/view/ExportQrWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"QR code\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u003cImageView fx:id\u003d\"qrCode\" fitHeight\u003d\"250.0\" fitWidth\u003d\"250.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "don-tay": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/HintWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cGridPane fx:id\u003d\"popUp\" hgap\u003d\"5\" vgap\u003d\"3\" styleClass\u003d\"hint_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100.0\"  prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100.0\"  prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"command\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" text\u003d\"Description\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"parameters\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" text\u003d\"Parameters\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"example\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" text\u003d\"Example\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"commandMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"parametersMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"exampleMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"copyMessage\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           text\u003d\"Copy example\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cfx:define\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cImage fx:id\u003d\"btnImage\" url\u003d\"@/images/clipboard.png\" requestedHeight\u003d\"30\" requestedWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/fx:define\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cButton id\u003d\"clipboard-button\" fx:id\u003d\"copyExample\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyExample\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cImageView image\u003d\"$btnImage\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         title\u003d\"Nice And Amazing Student Assistant\" minWidth\u003d\"800\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cImage url\u003d\"@/images/nasa.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabPanelPlaceholder\" AnchorPane.topAnchor\u003d\"25.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"125\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"80.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"50\" prefHeight\u003d\"50\" maxHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"50\" prefHeight\u003d\"50\" maxHeight\u003d\"50\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"30\" prefHeight\u003d\"30\" maxHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 25,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cVBox fx:id\u003d\"activityListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cScrollPane styleClass\u003d\"pane-with-border\" fx:id\u003d\"scrollPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cHBox styleClass\u003d\"pane-with-border\" fx:id\u003d\"moduleListView\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"noModules\" styleClass\u003d\"no-modules\" maxWidth\u003d\"Infinity\" minHeight\u003d\"200\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           maxHeight\u003d\"Infinity\" wrapText\u003d\"true\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "           text\u003d\"No modules added... Use add m/[MODULE_CODE] n/[MODULE_NAME] to add your first module!\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/resources/view/QuotePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"pane\" prefHeight\u003d\"50.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "       \u003cLabel fx:id\u003d\"label\" styleClass\u003d\"highlight_label\" text\u003d\"Label\" AnchorPane.bottomAnchor\u003d\"27.0\" AnchorPane.leftAnchor\u003d\"26.0\" AnchorPane.rightAnchor\u003d\"234.0\" AnchorPane.topAnchor\u003d\"23.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " \u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"50\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cPieChart fx:id\u003d\"pieChart\" layoutX\u003d\"50.0\" title\u003d\"Percentage of activities by module\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              id\u003d\"pieChart\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cStackedBarChart fx:id\u003d\"stackedBarChart\" id\u003d\"barChart\" title\u003d\"Number of activities per module\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     legendVisible\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     verticalGridLinesVisible\u003d\"false\" horizontalGridLinesVisible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" label\u003d\"Modules\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" label\u003d\"Deadlines\" upperBound\u003d\"2\" tickUnit\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/StackedBarChart\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cAnchorPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"calendarPlaceholder\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"25.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                           AnchorPane.rightAnchor\u003d\"25.0\" AnchorPane.bottomAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cHBox fx:id\u003d\"statisticsList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"500\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      prefHeight\u003d\"1000\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43
    }
  },
  {
    "path": "src/test/java/nasa/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/nasa/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 63
    }
  },
  {
    "path": "src/test/java/nasa/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nasa.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/nasa/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookStorage(temporaryFolder.resolve(\"nasaBook.json\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"historyBook.json\"), temporaryFolder.resolve(\"uiHistory.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String deleteCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Setup LogicManager with JsonNasaBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionNasaBook.json\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionHistoryBook.json\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionHistoryBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String addCommand \u003d AddModuleCommand.COMMAND_WORD + MODULE_CODE_DESC_CS2030 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module expectedModule \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleBuilder().withCode(VALID_MODULE_CODE_CS2030).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class JsonNasaBookIoExceptionThrowingStub extends JsonNasaBookStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        private JsonNasaBookIoExceptionThrowingStub(Path filePath, Path filePathTwo, Path filePathThree) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            super(filePath, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                 ReadOnlyHistory\u003cString\u003e uiHistoryBook,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                 Path filePathOne, Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39,
      "EdmondOng": 19,
      "-": 120
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(CommandException.class, AddModuleCommand.MESSAGE_DUPLICATED_MODULE, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2101 \u003d new ModuleBuilder().withCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommand \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2101Command \u003d new AddModuleCommand(cs2101);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommandCopy \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(addCS2101Command));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 70
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// Integrated test TODO: changed name to AddModuleCommandTest"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_NAME \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003cUniqueModuleList\u003e(), new HistoryBook\u003cString\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newModule_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module validModule \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUiHistoryBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new AddModuleCommand(validModule), model, String.format(AddModuleCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                validModule), expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateModule_fail() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // fails"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        AddModuleCommand command \u003d new AddModuleCommand(module);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command.execute(model); //add one time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // cannot add the same module again"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // check if it passes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleInList \u003d model.getNasaBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(moduleInList), model, AddModuleCommand.MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 8,
      "kester-ng": 57
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_emptyNasaBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_nonEmptyNasaBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "EdmondOng": 4
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                true, false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "kester-ng": 1,
      "-": 48,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Test util."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid module names and codes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1231 \u003d \"CS1231\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS2030 \u003d \"Programming Methodology II\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS1231 \u003d \"Discrete Structures\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid activity names and their parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_HWK \u003d \"Homework 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_TUTORIAL \u003d \"Weekly Tutorial\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_EXAM \u003d \"Final Paper\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_NOTES_TEST \u003d \"This is merely a testing of the notes\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_NOTES_TEST_2 \u003d \"Notes test two\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST_2 \u003d \"14-12-2020 23:59\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // parameters with their prefixes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS2030 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS1231 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS2030 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS1231 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_HWK \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_EXAM \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NOTES_DESC_TEST \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String NOTES_DESC_TEST_2 \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST_2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String DATE_DESC_TEST_2 \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_FROM \u003d \" \" + PREFIX_START_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_TO \u003d \" \" + PREFIX_END_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // invalid parameters with their prefixes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_DESC \u003d \" \" + PREFIX_MODULE + \"@31_+\"; //only alphanumeric char"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_NAME_DESC \u003d \" \" + PREFIX_MODULE_NAME + \"\\t\"; //only whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_ACTIVITY_NAME_DESC \u003d \" \" + PREFIX_ACTIVITY_NAME"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"\\t\\t\"; // only whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_NOTES_DESC \u003d \" \" + PREFIX_NOTE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"        \"; //only whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"r\"; //not an integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020-12-31 11:00\"; //not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_FROM_DESC \u003d \" \" + PREFIX_START_DATE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_TO_DESC \u003d \" \" + PREFIX_END_DATE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    //extra test strings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS2030;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS1231;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS2030 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS2030)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS2030).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS1231 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS1231)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        NasaBook expectedAddressBook \u003d new NasaBook(actualModel.getNasaBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getNasaBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 114,
      "don-tay": 18
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ContinueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validCommandUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ContinueCommand continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(ContinueCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand.execute(model); // set the activity to done for it to be undone"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(continueCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_moduleNotFoundUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ContinueCommand continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, new ModuleCode(\"MA1101R\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, model, ContinueCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is wrong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        continueCommand \u003d new ContinueCommand(Index.fromOneBased(10000), moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, model, ContinueCommand.MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that is already undone"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, expectedModel, ContinueCommand.MESSAGE_ACTIVITY_ALREADY_UNDONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityUndone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityToDone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 78
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validActivityUnfilteredList_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(INDEX_FIRST_ACTIVITY.toString()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.removeActivityByIndex(moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is invalid (\u003e list.size())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_SECOND_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(Index.fromOneBased(6), moduleCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"UTW1001K\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 4,
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * {@code DeleteModuleCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validModuleUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to add in filtered next"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                moduleToDelete.getModuleCode().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"DAO2703\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validModuleFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(new Index(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a  module that does not exist"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(new ModuleCode(\"MA1521\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2101\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 1,
      "kester-ng": 119
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validCommandUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_moduleNotFoundUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, new ModuleCode(\"MA1101R\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, model, doneCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is wrong"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand \u003d new DoneCommand(Index.fromOneBased(10000), moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, model, doneCommand.MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that is already done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, expectedModel, doneCommand.MESSAGE_ACTIVITY_ALREADY_DONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityToDone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 6,
      "kester-ng": 61
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.util.SampleDataUtil.getSampleNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and unit tests for EditModuleCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final Model model \u003d new ModelManager(getSampleNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode firstModuleCodeToEdit \u003d model.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode lastModuleCodeToEdit \u003d model.getFilteredModuleList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "             .get(model.getFilteredModuleList().size() - 1).getModuleCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build(); // module with attribute moduleName and moduleCode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Descriptor built off editedModule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Command making edits to moduleCode with descriptor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Initializing model with same initial state as global model variable"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Replace existing module in model with new, editedModule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.setModule(firstModuleCodeToEdit, editedModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Check if successful message from editModuleCommand is equal to expectedMessage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * and model is equal to expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Module firstModule \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // new EditModuleDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        final EditModuleCommand standardCommand \u003d new EditModuleCommand(lastModuleCodeToEdit, DESC_CS1231);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_CS1231);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand commandWithSameValues \u003d new EditModuleCommand(lastModuleCodeToEdit, copyDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(firstModuleCodeToEdit, DESC_CS1231)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(lastModuleCodeToEdit, DESC_CS2030)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 5,
      "don-tay": 103
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditModuleDescriptor(DESC_CS2030);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(DESC_CS2030));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(DESC_CS1231));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030).withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "don-tay": 44
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ExportCalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null file paths"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand otherCommand \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(command, otherCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same file paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        otherCommand \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(command, otherCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different file paths"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        otherCommand \u003d new ExportCalendarCommand(Path.of(\"./Test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertNotEquals(command, otherCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 31
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_zeroKeywords_noActivityFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_multipleKeywords_multipleActivitiesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\"Lab\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            CommandResult res \u003d findCommand.execute(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(res, new CommandResult(expectedMessage));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code userInput} into a {@code ActivityContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ActivityContainsKeyWordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ActivityContainsKeyWordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 1,
      "kester-ng": 89,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 5,
      "-": 14,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 4,
      "-": 25,
      "kester-ng": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new RepeatDeadlineCommand(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_scheduleIndexOutOfBounds() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name name \u003d new Name(\"Homework\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index correctIndex \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index wrongIndex \u003d Index.fromZeroBased(4);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(String.format(\"%s for %s %s %s\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                RepeatDeadlineCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                CS2103T.getModuleCode(), name, correctIndex.getZeroBased()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        RepeatDeadlineCommand repeatCommand \u003d new RepeatDeadlineCommand(CS2103T.getModuleCode(), Index.fromZeroBased(1),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                correctIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        RepeatDeadlineCommand incorrectRepeatCommand \u003d new RepeatDeadlineCommand(CS2103T.getModuleCode(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Index.fromZeroBased(1), wrongIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        //     assertEquals(expectedResult, repeatCommand.execute(model));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // } catch (Exception error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        //     System.out.println(\"Error in test case\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertThrows(IllegalArgumentException.class, () -\u003e incorrectRepeatCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 8,
      "kester-ng": 24,
      "don-tay": 18
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.TypicalModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void multipleUndoCheck() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //add -\u003e add -\u003e add -\u003e undo -\u003e undo -\u003e undo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2102);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2105\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2107\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2102\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void inBetweenUndoCheck() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //add -\u003e undo -\u003e add -\u003e undo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2105\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2107\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void complexCheck() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseOne \u003d new Deadline(new Name(\"Hello World\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-04-2020 00:00\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseTwo \u003d new Deadline(new Name(\"Check\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseThree \u003d new Deadline(new Name(\"SEA\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseFourth \u003d new Deadline(new Name(\"TEST\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS3233 n/Competitive Programming"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS3033 n/Competitive Programming"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2102);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS3233 a/Hello World d/20-04-2020 00:00"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseOne);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //repeat m/CS3233 a/Hello World r/1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.setDeadlineSchedule(new ModuleCode(\"CS2105\"), Index.fromOneBased(1), Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS2105 n/Software"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS2105 a/Check d/20-06-2020 00:00"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseTwo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS3233 d/20-05-2020 02:30 a/SEA"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseThree);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //-\u003e undo -\u003e undo -\u003e redo -\u003e redo"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //Ensure redo is working properly."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        redoCommand.execute(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        redoCommand.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //undo -\u003e add deadline -\u003e undo"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseFourth);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseFourth));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 79,
      "kester-ng": 46
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_calendar_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS, \"calendar\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.CALENDAR), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_modules_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS, \"modules\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.MODULES), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_statistics_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \"statistics\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.STATISTICS), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newDeadline_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.addModule(new Module(new ModuleCode(VALID_MODULE_CODE_CS1231),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new ModuleName(VALID_MODULE_NAME_CS1231)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addDeadline(new ModuleCode(VALID_MODULE_CODE_CS1231), deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddDeadlineCommand command \u003d new AddDeadlineCommand(deadline, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String.format(AddDeadlineCommand.MESSAGE_SUCCESS, deadline), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new AddDeadlineCommand(null, new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d (new DeadlineBuilder().build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddDeadlineCommand(deadline, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 4,
      "kester-ng": 51,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.EventBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addModule(new Module(new ModuleCode(VALID_MODULE_CODE_CS1231),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ModuleName(VALID_MODULE_NAME_CS1231)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addEvent(module.getModuleCode(), event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddEventCommand command \u003d new AddEventCommand(event, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, String.format(AddEventCommand.MESSAGE_SUCCESS, event), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(event, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "EdmondOng": 4,
      "kester-ng": 50
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.AddModuleCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // create the the cs1231 module, contains empty list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module cs1231 \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module codes - only the last one is taken into account"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2030 + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module names - only the last one is taken into account"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS2030 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // multiple tags - all accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module name prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS1231 + VALID_MODULE_NAME_CS1231,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "kester-ng": 79,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ContinueCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ContinueCommandParser parser \u003d new ContinueCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new ContinueCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"-4\" + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 45
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteDeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteDeadlineCommandParser parser \u003d new DeleteDeadlineCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DeleteDeadlineCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // incorrect module code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 36,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DeleteEventCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // incorrect module code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 36,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.DeleteModuleCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231); // dummy module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteModuleCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231, new DeleteModuleCommand(moduleCode));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no PREFIX_MODULE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "kester-ng": 37,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DoneCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"-4\" + MODULE_NAME_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/EditModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.module.EditModuleCommand.EXCESS_MODULE_CODE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.EditModuleCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleCommandParser parser \u003d new EditModuleCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no existing module code specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS2030 , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code to be edited specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS); // invalid module name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code followed by valid name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module name followed by valid module code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + MODULE_CODE_DESC_CS1231,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // two module codes input (in addition to preamble)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_CODE_DESC_CS2030,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                EXCESS_MODULE_CODE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // multiple invalid values, but module code errors are always caught before module name errors"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module code only"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module name only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d validPreamble + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_multipleRepeatedModuleNames_acceptsLast() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidModuleNameFollowedByValidModuleName_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC + MODULE_NAME_DESC_CS1231"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "don-tay": 144
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ExportCalendarCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ExportCalendarCommandParser parser \u003d new ExportCalendarCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_argsWithoutFilePath_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"\", command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_argsWithFilePath_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \" f/./Calendar\", command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 34
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"     \", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 4,
      "kester-ng": 23
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/NasaBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser parser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 54
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-12-20 12:59\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_ACTIVITY_NAME \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_NOTE \u003d \"\\t\\r\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"-2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_MODULE_NAME \u003d \"C@!;\u0027[]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-08-2020 23:59\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_ACTIVITY_NAME \u003d \"CS2103T TP\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Finish milestone v1.2 by next wednesday.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"prepare for new features.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_MODULE_NAME \u003d \"Computer organisation\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleName((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_validModuleNameWithoutWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(VALID_MODULE_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_validModuleNameWithWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + VALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(INVALID_MODULE_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + INVALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithoutWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + INVALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActivityName(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithoutWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(VALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + VALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(INVALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + INVALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithoutWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + INVALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithoutWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + INVALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 178,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/RepeatActivityCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class RepeatActivityCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private RepeatDeadlineCommandParser parser \u003d new RepeatDeadlineCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void commandParserTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertParseSuccess(parser, \"1 m/CS1231 r/1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               new RepeatDeadlineCommand(moduleCode, Index.fromOneBased(1), index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 23
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_HWK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddDeadlineCommandParser parser \u003d new AddDeadlineCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.getAllFieldsPresent(), moduleCode));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing moduleCode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // notes parameter missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.getNoteFieldMissing(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                moduleCode));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // priority parameter missing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + NOTES_DESC_TEST, new AddDeadlineCommand(DeadlineBuilder.getPriorityFieldMissing(), moduleCode));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + INVALID_DATE_DESC + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Notes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + INVALID_NOTES_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Priority"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DeadlineBuilder {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getAllFieldsPresent() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline allFieldsPresent \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        allFieldsPresent.setNote(new Note(VALID_NOTES_TEST));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        allFieldsPresent.setPriority(new Priority(VALID_PRIORITY_HIGH));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return allFieldsPresent;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getNoteFieldMissing() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline noteFieldMissing \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        noteFieldMissing.setPriority(new Priority(VALID_PRIORITY_HIGH));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return noteFieldMissing;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getPriorityFieldMissing() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline priorityFieldMissing \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priorityFieldMissing.setNote(new Note(VALID_NOTES_TEST));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return priorityFieldMissing;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 121,
      "don-tay": 8
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_FROM_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_TO_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddEventCommand(new EventBuilder().build(), moduleCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing from-date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing to-date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // note field missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddEventCommand(EventTemplate.getNoteFieldMissing(), moduleCode));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-from"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + INVALID_DATE_FROM_DESC + DATE_DESC_TEST_TO + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-to"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + INVALID_DATE_TO_DESC + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + INVALID_NOTES_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class EventTemplate {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Event getNoteFieldMissing() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event noteFieldMissing \u003d new Event(new Name(VALID_ACTIVITY_NAME_EXAM),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return noteFieldMissing;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 109,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalNasaBook.NASABOOK_TYPE_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.UiHistoryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ModelManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialized model manager with NasaBook, NASABOOK_TYPE_1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(NASABOOK_TYPE_1, new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UiHistoryBuilder().build(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.getNasaBook().equals(NASABOOK_TYPE_1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"GEH1001\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2106\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredModuleListTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cModule\u003e list \u003d modelManager.getFilteredModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"CS2106\"), list.get(0).getModuleCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"GEH1001\"), list.get(1).getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"CS2103T\"), list.get(2).getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredDeadlineListTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e deadlineList \u003d modelManager.getFilteredDeadlineList(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_1.getName(), deadlineList.get(0).getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_2.getName(), deadlineList.get(1).getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_3.getName(), deadlineList.get(2).getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_4.getName(), deadlineList.get(3).getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredEventListTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d modelManager.getFilteredEventList(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_1.getName(), eventList.get(0).getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_2.getName(), eventList.get(1).getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_3.getName(), eventList.get(2).getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(CS2106.getModuleCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(new NasaBook(), new NasaBook(modelManager.getNasaBook()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addModule_uniqueModule_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module cs1010 \u003d new Module(new ModuleCode(\"CS1010\"), new ModuleName(\"Test\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        modelManager.addModule(cs1010);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(modelManager.hasModule(cs1010.getModuleCode()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addModule_duplicateModule_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e modelManager.addModule(GEH1001));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeModule_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasModule(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addDeadline(GEH1001.getModuleCode(), DEADLINE_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.removeDeadline(GEH1001.getModuleCode(), DEADLINE_1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(GEH1001.getModuleCode(), DEADLINE_1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addEvent(GEH1001.getModuleCode(), EVENT_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.removeEvent(GEH1001.getModuleCode(), EVENT_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(GEH1001.getModuleCode(), EVENT_1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasActivity_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addDeadline(CS2106.getModuleCode(), DEADLINE_3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(modelManager.hasActivity(CS2106.getModuleCode(), DEADLINE_3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasActivity_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(CS2106.getModuleCode(), EVENT_2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"nasa/book/file/path\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"new/nasa/book/file/path\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_validPath_setsNasaBookFilePath() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path path \u003d Paths.get(\"nasa/book/file/path\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modelManager.setNasaBookFilePath(path);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(path, modelManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule((nasa.model.module.ModuleCode) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode()); // module code"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasModule(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasModule_moduleInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(modelManager.hasModule(GEH1001.getModuleCode())); // module code"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBookBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook differentNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentNasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] keywords \u003d GEH1001.getModuleName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //modelManager.updateFilteredModuleList((Predicate) new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //assertFalse(modelManager.equals(new ModelManager(nasaBook, userPrefs)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        differentUserPrefs.setNasaBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 20,
      "EdmondOng": 70,
      "kester-ng": 87,
      "-": 58,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/model/NasaBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalDeadlines.CS2103T_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalEvents.CORRECT_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class NasaBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Collections.emptyList(), nasaBook.getModuleList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.resetData(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withValidReadOnlyNasaBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook newData \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(newData, nasaBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Two Modules with the same identity fields\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS2103T, editedcs2103t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBookStub newData \u003d new NasaBookStub(newModules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e nasaBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.hasModule(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder(CS2103T).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(editedcs2103t.getModuleCode()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e nasaBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addEvent(CS2103T.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasActivity(CS2103T.getModuleCode(), CORRECT_EVENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addDeadline() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(nasaBook.hasActivity(CS2103T.getModuleCode(), CS2103T_DEADLINE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeDeadline() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.removeDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(nasaBook.hasActivity(CS2103T.getModuleCode(), CS2103T_DEADLINE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeEvent() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        NasaBook book \u003d new NasaBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        book.addModule(CS2106);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        book.addEvent(CS2106.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        book.removeEvent(CS2106.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(book.hasActivity(CS2106.getModuleCode(), CORRECT_EVENT));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A stub ReadOnlyNasaBook whose Modules list can violate interface constraints."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class NasaBookStub implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        NasaBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public UniqueModuleList getUniqueModuleList() { // stub"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new UniqueModuleList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 94,
      "EdmondOng": 30,
      "kester-ng": 23,
      "don-tay": 8
    }
  },
  {
    "path": "src/test/java/nasa/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"30-02-2020\")); // invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-2020 12:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2020\")); //no time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid Dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-05-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Date.isValidDate(\"12-03-2020 20:00\")); //leap year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getDifferenceInDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoOne \u003d new Date(\"20-04-2020 23:59\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoTwo \u003d new Date(\"19-03-2020 01:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        long difference \u003d dateNoOne.getDifference(dateNoTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        System.out.println(difference);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 10,
      "kester-ng": 49
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void create_deadline() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new Deadline(new Name(\"Hello\"), new Date(\"12-12-2020 23:59\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deadline.isValidDeadline(deadline.getDueDate()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void set_due_date() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date date \u003d new Date(\"19-12-2020 03:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d new Deadline(new Name(\"Hello\"), new Date(\"20-12-2021 03:00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        subject.setDueDate(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void set_done() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d new Deadline(new Name(\"Hello\"), new Date(\"12-12-2020 23:59\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        subject.setDone(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(subject.isDone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 22,
      "kester-ng": 8,
      "don-tay": 4
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * An EventTest class to test the functionality of Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void isValidEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 14
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"\\t\\t\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"cs2103 tutorial\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"Studying for cs2103 finals\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 32,
      "kester-ng": 5
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_validNote_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean result \u003d Note.isValidNote(\"Remember to update UG and DG!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_invalidNote_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * Test for empty string, or whitespace characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"       \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\\t\\t\\n\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_validInstantiation_noException() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note note \u003d new Note(\"Update UG and DG!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"ABC\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\t\\t\\tThe best in the world!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\n\\t\\nUpdate website headings!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"..........\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_invalidInstantiation_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note \u003d new Note(\"            \\t\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(\"java.lang.IllegalArgumentException: \" + Note.MESSAGE_CONSTRAINTS, e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidPriorityValue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"3\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"2.0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"3.5\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"-1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"10\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"a\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number beyond range of 1 to 5 inclusive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"6\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"-3\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number: non-numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"d\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"testing string\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 1,
      "kester-ng": 34
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/ScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date date \u003d new Date(\"10-03-2020 03:00\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date temp \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Schedule schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(date, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(0, schedule.getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void checkChangeType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dateExpected \u003d new Date(date.toString()).addDaysToCurrDate(7);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(1, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateExpected \u003d new Date(date.toString()).addDaysToCurrDate(14);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(2, date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateExpected \u003d new Date(date.toString()).addMonthsToCurrDate(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(3, date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.cancel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(temp, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void checkWrongSchedule() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e schedule.setType(-1, date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e schedule.setType(4, date));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 36,
      "kester-ng": 8
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/UniqueActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * To test the UniqueActivity class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class UniqueActivityListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueActivityList newUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivity_test() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivity(DEADLINE, CORRECT_EVENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(CORRECT_EVENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove_test() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.remove(DEADLINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities_test() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivities(newUniqueActivityList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void checkUnmodifiableList_test() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.asUnmodifiableObservableList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void modifyUnmodifiableList_test() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e temp \u003d uniqueActivityList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e temp.add(CORRECT_EVENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void getActivityByName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d uniqueActivityList.getActivityByName(new Name(\"Homework for tut\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(DEADLINE, activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 47,
      "kester-ng": 26
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/UniqueDeadlineListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalDeadlines.DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class UniqueDeadlineListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueDeadlineList uniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueDeadlineList newUniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeadlineList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void remove_test() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.remove(DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void checkUnmodifiableList_test() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueDeadlineList.asUnmodifiableObservableList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void modifyUnmodifiableList_test() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e temp \u003d uniqueDeadlineList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e temp.add(DEADLINE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "EdmondOng": 4,
      "kester-ng": 40
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null moduleCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid moduleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2103 finals\")); // module code with whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"stringchars\")); // 11 characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid moduleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"t\")); // 1 alphanumeric letter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103TCS2\")); // 10 alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 38,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isValidModuleName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModuleName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // No special characters, only whitespaces or empty strings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"123@@*\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\\t\\t\\t\\n\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // valid module name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Econometrics\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Software Engineering\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Programming Methodology II\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "kester-ng": 12
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withEmail(VALID_EMAIL_CS2101)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withName(VALID_NAME_CS2101).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withEmail(VALID_EMAIL_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withAddress(VALID_ADDRESS_CS2101).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //TODO: Add test method for equals, similar idea to ModuleTest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(CS2106));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different code-\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2113\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedcs2103t \u003d new ModuleBuilder().withName(\"Object Oriented Programming\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 81,
      "kester-ng": 23
    }
  },
  {
    "path": "src/test/java/nasa/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class UniqueModuleListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList newUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueModuleList.remove(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModules() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueModuleList.setModule(CS2103T.getModuleCode(), CS2106);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2106.getModuleCode()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void testSetModules() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueModuleList.add(GEH1001);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.setModules(newUniqueModuleList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getModule() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(CS2103T.equals(uniqueModuleList.getModule(CS2103T.getModuleCode())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(CS2106.equals(uniqueModuleList.getModule(CS2103T.getModuleCode())));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 42,
      "kester-ng": 14
    }
  },
  {
    "path": "src/test/java/nasa/model/quote/QuoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.quote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class QuoteTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getLines().isEmpty());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getQuoteTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 27
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_DUE_DATE \u003d \"02-30-2020 23:59\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"0\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_SCHEDULE \u003d \"-1\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_ISDONE \u003d \"NOPE\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NAME \u003d \"tP\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_DATE \u003d \"13-02-2020 23:59\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Finish UG and DG\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_DUE_DATE \u003d \"13-04-2020 23:59\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_SCHEDULE \u003d new Schedule().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_ISDONE \u003d \"true\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_validDeadlineDetails_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(VALID_NAME, VALID_DATE, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                VALID_DUE_DATE, VALID_SCHEDULE, VALID_ISDONE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(CS2103T_DEADLINE, module.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedDeadline(INVALID_CODE, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d DeadlineCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(null, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeadlineCode.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedDeadline(VALID_CODE, INVALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d DeadlineName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(VALID_CODE, null, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeadlineName.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 62
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS@\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NAME \u003d CS2103T.getModuleCode().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final List\u003cJsonAdaptedDeadline\u003e VALID_DEADLINES \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CS2103T.getDeadlineList().getActivityList()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .map(JsonAdaptedDeadline::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final List\u003cJsonAdaptedEvent\u003e VALID_EVENTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CS2103T.getEventList().getActivityList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new JsonAdaptedModule(INVALID_CODE, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new JsonAdaptedModule(VALID_CODE, INVALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, null, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "-": 28,
      "kester-ng": 13
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonNasaBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \"JsonNasaBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readNasaBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyNasaBook\u003e readNasaBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new JsonNasaBookStorage(Paths.get(filePath),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Paths.get(filePath), Paths.get(filePath)).readNasaBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(readNasaBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"notJsonFormatNasaBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidAndValidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidAndValidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readAndSaveNasaBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempNasaBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Path filePathTwo \u003d testFolder.resolve(\"TempHistoryBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Path filePathThree \u003d testFolder.resolve(\"TempUiHistoryBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonNasaBookStorage jsonNasaBookStorage \u003d new JsonNasaBookStorage(filePath, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        original.removeModule(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        original.addModule(CS2103T);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullNasaBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves {@code NasaBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void saveNasaBook(ReadOnlyNasaBook nasaBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new JsonNasaBookStorage(Paths.get(filePath), Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .saveNasaBook(nasaBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(new NasaBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 37,
      "EdmondOng": 8,
      "-": 65,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonSerializableNasaBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonSerializableNasaBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableNasaBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesNasaBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleNasaBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleNasaBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook typicalModulesNasaBook \u003d TypicalModules.getTypicalNasaBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(nasaBookFromFile, typicalModulesNasaBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableNasaBook.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 25,
      "-": 22,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"data/nasabook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/nasa/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(getTempFilePath(\"ab\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                getTempFilePath(\"cd\"), getTempFilePath(\"ls\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void nasaBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * {@link JsonNasaBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonNasaBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager.saveNasaBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook retrieved \u003d storageManager.readNasaBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getNasaBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(storageManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "EdmondOng": 1,
      "-": 51,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/testutil/DeadlineBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to help build example deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Homework\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"Take note of qns2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DUE_DATE \u003d \"13-11-2020 03:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Date dateCreated;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dueDate \u003d new Date(DEFAULT_DUE_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dateCreated \u003d Date.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the DeadlineBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline activity \u003d (Deadline) activityToCopy;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dateCreated \u003d activity.getDateCreated();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        dueDate \u003d activity.getDueDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority \u003d activity.getPriority();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        schedule \u003d activity.getSchedule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d activity.isDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withDateCreated(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.dateCreated \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withDueDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d new Date(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withNote(String note) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withSchedule(String schedule) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.schedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withIsDone(String isDone) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d Boolean.parseBoolean(isDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new Deadline(name, dueDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setNote(note);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 47,
      "EdmondOng": 60,
      "kester-ng": 11,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(module.getModuleName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleName(String moduleName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(new ModuleName(moduleName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "don-tay": 50
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"19-10-2020 03:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_FROM_DATE \u003d VALID_DATE_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_TO_DATE \u003d VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date toDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date fromDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d (Activity) activityToCopy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d activity.getDateCreated();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withNote(String note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code toDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withToDate(String toDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.toDate \u003d new Date(toDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code fromDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withFromDate(String fromDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.fromDate \u003d new Date(fromDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Event(name, fromDate, toDate, note);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 81,
      "kester-ng": 19
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_NAME \u003d \"SOFTWARE ENGINEERING\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_1 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"06-06-2021 01:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do models for project\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_2 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Assignment\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"02-08-2021 01:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do tutorials\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_3 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Prepare group meeting\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"22-06-2021 01:00\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Prepare for group meetings\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_4 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Lab\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"13-06-2021 01:00\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Chapter 1\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_1 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Competition\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"06-06-2021 01:00\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"08-06-2021 01:00\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Booked MPSH\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_2 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Presentation\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"06-05-2020 01:00\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"07-05-2020 02:00\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withNote(\"Revise on notes\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_3 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Recitation\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"08-08-2020 11:00\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"12-08-2020 12:00\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withNote(\"Study tutorial\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleName name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueDeadlineList uniqueDeadlineList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueEventList uniqueEventList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new ModuleName(DEFAULT_MODULE_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        code \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlines \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueEventList events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList \u003d events;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList \u003d deadlines;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(events);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module \u003d moduleToCopy.getDeepCopyModule();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d module.getModuleName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        code \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueDeadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueEventList \u003d module.getEventList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.code \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Adds deadline to the module."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param deadline Deadline to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return module update with this deadline in it"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleBuilder addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList.add(deadline);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Adds event to the module."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param event Event to be added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return module updated with this event in it"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleBuilder addEvent(Event event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList.add(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove every activity."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleBuilder"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withRemoveAll() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList.removeAll();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList.removeAll();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build module based on code and name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(uniqueDeadlineList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(uniqueEventList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 52,
      "kester-ng": 78,
      "don-tay": 10
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE + module.getModuleName().toString() + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE_NAME + module.getModuleCode().toString() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module.getActivities().getActivityList().stream().forEach("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/NasaBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example NasaBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NasaBookBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_1 \u003d CS2106;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_2 \u003d GEH1001;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_3 \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_1); // first module in moduleList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Reset nasabook builder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder reset() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add module to Nasabook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder addModule(Module module) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Delete the module from Nasabook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBookBuilder deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.remove(moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build Nasabook."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueModuleList newModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModuleList.setModules(moduleList.getDeepCopyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setModuleList(newModuleList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 39,
      "kester-ng": 24,
      "don-tay": 7
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalDeadlines.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains examples of deadlines use for testing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TypicalDeadlines {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_NAME \u003d \"tP\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_DATE \u003d \"13-02-2020 23:59\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_NOTE \u003d \"Finish UG and DG\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_DUE_DATE \u003d \"13-04-2020 23:59\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_PRIORITY \u003d \"5\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_SCHEDULE \u003d new Schedule().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_ISDONE \u003d \"true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline DEADLINE \u003d new DeadlineBuilder().withName(\"Homework for tut\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(\"19-02-2021 06:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline DEADLINE_LATE \u003d new DeadlineBuilder().withName(\"Test\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(\"12-01-2021 06:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline CS2103T_DEADLINE \u003d new DeadlineBuilder().withName(VALID_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDateCreated(VALID_DATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(VALID_DUE_DATE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(VALID_NOTE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withPriority(VALID_PRIORITY)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withSchedule(VALID_SCHEDULE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withIsDone(VALID_ISDONE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TypicalDeadlines() {} // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains examples of events use for testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event WRONG_EVENT \u003d new EventBuilder().withName(\"BasketBall MPSH\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-02-2021 06:00\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"01-01-2021 06:00\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event CORRECT_EVENT \u003d new EventBuilder().withName(\"Tennis\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-04-2021 06:00\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"13-06-2021 06:00\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event PAST_EVENT \u003d new EventBuilder().withName(\"Soccer\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-04-2019 06:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"13-06-2019 06:00\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_FIRST_ACTIVITY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_SECOND_ACTIVITY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_THIRD_ACTIVITY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 10
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //Default module"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2106 \u003d new ModuleBuilder().withCode(\"CS2106\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Operating System\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 1\").withNote(\"Lab1 IPC\").build())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 2\").withNote(\"Lab2 Processes\").build())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 3\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .withNote(\"Lab3 Synchronization\").build())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().build())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().withName(\"Workshop\").build())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module GEH1001 \u003d new ModuleBuilder().withCode(\"GEH1001\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Globalization and new media\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Midterm\").withNote(\"Midterm Essay\").build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Finals\").withNote(\"Final Essay\").build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 1\").withNote(\"Quiz1\").build())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 2\").withNote(\"Quiz2\").build())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 3\").withNote(\"Quiz3\").build())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().build())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().withName(\"Workshop\").build())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2107 \u003d new ModuleBuilder().withCode(\"CS2107\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Computer Security\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2102 \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Database\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2105 \u003d new ModuleBuilder().withCode(\"CS2105\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Computer Networks\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an {@code NasaBook} with all the typical modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static NasaBook getTypicalNasaBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nb \u003d new NasaBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            nb.addModule(module.getDeepCopyModule());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, GEH1001));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 19,
      "EdmondOng": 34,
      "kester-ng": 14
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalNasaBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class for a NasaBook."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalNasaBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final NasaBook NASABOOK_TYPE_1 \u003d new NasaBookBuilder().build().deepCopyNasaBook();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalNasaBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 9,
      "kester-ng": 3
    }
  },
  {
    "path": "src/test/java/nasa/testutil/UiHistoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for UiHistoryBuilder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UiHistoryBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static String atMainScreen \u003d \"null\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static String atActivityScreen \u003d \"deadline activity Hello GG HELLO WORLD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UiHistoryBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        history.add(atMainScreen);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        history.add(atActivityScreen);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Create a new UI History Book for testing purpose."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cString\u003e build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Stack\u003cString\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.addAll(history);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleListHistory\u003cString\u003e listHistory \u003d new ModuleListHistory\u003c\u003e(stack);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e book \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        book.setModuleListHistory(listHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return book;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 38
    }
  },
  {
    "path": "src/test/java/nasa/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/nasa/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cfx:root type\u003d\"nasa.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 5
    }
  }
]
