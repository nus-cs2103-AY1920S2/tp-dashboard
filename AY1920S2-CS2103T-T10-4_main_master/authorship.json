[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d Nice \u0026 Amazing Student Assistant (NASA)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "https://travis-ci.com/AY1920S2-CS2103T-T10-4/main[image:https://travis-ci.com/AY1920S2-CS2103T-T10-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "https://ci.appveyor.com/project/kester-ng/main[image:https://ci.appveyor.com/api/projects/status/netvecrxd6gmixrb?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-T10-4/main[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-T10-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "https://app.codacy.com/gh/AY1920S2-CS2103T-T10-4/main/dashboard[image:https://api.codacy.com/project/badge/Grade/b5475db234d847a9bafd56c96f8e8ada[\"Codacy code quality\", link\u003d\"https://www.codacy.com/gh/AY1920S2-CS2103T-T10-4/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S2-CS2103T-T10-4/main\u0026utm_campaign\u003dBadge_Grade\"]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d Target Audience"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Have university professors give you way too much homework?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Do you find it hard to keep track of all your assignments?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Do you want an easy and intuitive way to keep track?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Do you want recommendations on what to do next?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`IF YOU ANSWERED YES TO ANY QUESTIONS, THEN FRET NOT! INTRODUCING THE NICE \u0026 AMAZING"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "STUDENT ASSISTANT (NASA). AN APPLICATION THAT HELPS KEEP TRACK OF EACH MODULE\u0027S TASKS AND"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "PROVIDES MANY OTHER FEATURES THAT ARE SUITABLE FOR BUSY UNIVERSITY STUDENTS. THE APPLICATION"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "IS DEVELOPED FOR UNIVERSITY STUDENTS BY UNIVERSITY STUDENTS!`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* This is a Java application intended for University Students as a convenient mean to keep track of module tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* It is a CLI-primary application and is intended for University Students who are able to type fast (which is basically almost every student)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Refer to the User Guide to know how to start-up and use the NASA application. Take away on an exciting journey!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://github.com/zxing/zxing[ZXing]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Code was morphed and updated from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org[AB3]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kester-ng": 20,
      "-": 24,
      "don-tay": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "mainClassName \u003d \u0027nasa.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    compile \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    compile \u0027com.google.zxing:core:3.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    compile \u0027com.google.zxing:javase:3.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveName \u003d \u0027nasa.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 152,
      "kester-ng": 2,
      "don-tay": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "NASA is currently in development by the https://github.com/AY1920S2-CS2103T-T10-4[AY1920S2-CS2103T-T10-4] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "We are a CS2103T team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Edmond Ong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::edmondong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "{empty}[http://github.com/EdmondOng[github]] [\u003c\u003cedmond-ong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Responsibilities: Backend"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Ng Yi Long, Kester"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::kester-ng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "{empty}[http://github.com/kester-ng[github]] [\u003c\u003ckester-ng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Responsibilities: UI + Backend"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Charmaine Koh"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::charmainekoh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "{empty}[http://github.com/CharmaineKoh[github]] [\u003c\u003cCharmaineKoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Responsibilities: UI + Backend"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Don Tay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::don-tay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "{empty}[http://github.com/don-tay[github]] [\u003c\u003cdon-tay#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Responsibilities: UI + Backend"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 19,
      "EdmondOng": 1,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-T10-4/main/issues if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *Email us* : You can also reach us at  `don_tay@u.nus.edu`, `e0303290@nus.edu`,`charmaine.koh@u.nus.edu`."
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "don-tay": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d Nice \u0026 Amazing Student Guide (NASA) - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-T10-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "By: `CS2103T-T10-4`      Since: `Feb 2020`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/nasa/Main.java[`Main`] and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "link:{repoURL}/src/main/java/nasa/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*API* : link:{repoURL}/src/main/java/nasa/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`ChatBox`, `ModuleListPanel`,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/nasa/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "link:{repoURL}/src/main/java/nasa/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ".  `Logic` uses the `NasaBookParser` class to parse the user command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::model[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "image::modelDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*API* : link:{repoURL}/src/main/java/nasa/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* consist of two components which are the `NasaBook` and `HistoryManager`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* `NasaBook` contains all the user current stored modules and activities."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* `HistoryManager` contains all the user previous state for each of it actions."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* `NasaBook` contain a set of module list stored in `UniqueModuleList`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* each `Module` consists of several `Activity`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* an `Activity` can be either a `Deadline` or `Event`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "//end::model[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "//tag::modelid[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".Structure of the Activity package of the Model Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "image::ModelActivityDiagram.png[,500,]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "From the diagram above, the Activity package consists of the following:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `ActivityContainsKeyWordsPredicate`: implemented for the `find` command logic."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* The abstract class `UniqueActivityList` is extended by `UniqueDeadlineList` and `UniqueEventList` respectively."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* The abstract class `Activity` is extended by `Deadline` and `Event` respectively. An `Activity` consists of a `Name`, `Date`, `Note`, and `Schedule` (see Figure below)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".Class diagram for Activity"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "image::ModelActivityClassDiagram.png[,600,]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::modelid[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*API* : link:{repoURL}/src/main/java/nasa/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* can save NASA data in json format and read it back."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Classes used by multiple components are in the `nasa.commons` package."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by:EdmondOng`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "For the undo/redo features, we aim to synchronize how the UI will look like and the data that is stored."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Hence, we created two Json files to store the internal data list and the filtered modules and activity list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "We uses Stack as the data structure for undo and redo features as it allows a Last In First Out effects, that suits"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "functionality of storing and getting data."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Below is a sequence diagram for undo feature."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "image::undoSequenceDiagramV3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire NASA book and state of UI."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Pros: Less repetition of opposite commands."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Cons: Maintain the actual looks for UI based on the filtered list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the module being deleted)."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Cons: Storing of the state of UI is still required."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* **Alternative 1 (current choice):** Use a stack to store the history of NASA book states and UI state based on filtered list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `Nasa internal list`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::deadlines[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Add Deadlines feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Users can add in deadlines into a specific module, the following subsections explains the implementation and design considerations for the feature."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The following activity diagram shows how a deadline (example) can be added."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::AddDeadlineActivityDiagram.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings for the add activity command"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Below is an example of a user adding a deadline and how the underlying system works."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The user enters the command `deadline m/CS2030 a/Lab 2 d/12-12-2020 23:59`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The LogicManager will create NasaBookParser to parse the user input."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". NasaBookParser will create an AddDeadlineCommandParser which parses the input and returns an AddDeadlineCommand."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". LogicManager will execute the AddDeadlineCommand. AddDeadlineCommand will attempt to add the deadline to the specified module. If the module does not exist or the activity already exist in the list, then an error message will be thrown to the user. Else, add it to the module activity list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". If the module\u0027s activity list is modified, the model will be updated and the view will be changed according to the new model."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The figure below shows the sequence diagram on what happens with the simple execution of the aforementioned command. First image shows the logic component while the second image shows the logic and model component (mainly model)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::AddDeadlineLogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::AddDeadlineModelSequenceDiagram.png[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c100%,\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|Choice| Pros:|Cons:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|1.Placing all events and deadlines into one class called Activity|Easy and fast to implement. Very efficient and less dependencies|Bad design, and one class handles the different logic."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|2.Having an abstract Activity class, and events and deadlines all inherit that abstract class|Somewhat easy to implement, polymorphism allows changing of one class without affecting the others.|Attributes can vary for different tasks. Hence additional code may be needed and even duplicated code due to similar logic."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|3.Same as 2, but now each attribute for activity has a separate class [chosen] |Tedious to implement.|Without the classes for attributes, validating whether the attributes are legal needs to be done in the activity class which violates SRP design principle. But now each attribute has its own class with its own validation methods"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Choice of design was option 3 as it made all objects separate from one another and allows easy debugging. At the same time, it follows SRP design principle."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::automation[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Automation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by:EdmondOng`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Every time a user stores an activity, start date for event will be recorded for `event` and due date for `deadline`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Based on user input to repeat the task either weekly, fortnightly or monthly, our application will check whether today\u0027s date has passed"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`due date` or `end date of event`. Once it passed,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "the newly set date will be updated."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "By default there will not be any scheduling for any activities. Therefore, user has to enter `repeat-d` or `repeat-e` followed by"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`INDEX` of the activity in the module list, followed by `module code`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ",and set the activity to `0-Cancel, 1-Weekly-, 2-Fortnightly, 3-Monthly`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* An example of command line `repeat-d 1 m/CS3233 r/1`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Once the command line is entered, our application will react in the following steps :"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". NasaBook will search ModelManager for the module code `CS3233`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". If present, it will search for the activity in the list with index `1`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Once identified, it will change the type of schedule to `weekly`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". A success message `Successfully added a repeat! for CS3233 0 1` will be given."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "image::sequenceDiagramAutomationV3.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "However, above is for the initialisation of schedule."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "What happen if the activity has expired when NasaBook is not in use? Not to worry, because when"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "the user initialise the program again, the system will automatically reset the expired date."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "This is how it goes :"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". MainApp will execute initialisation which will fetch data through NasaBookStorage."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". NasaBook will load every module in the module list and update each activity in the module."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". If dateline of the activity has passed, it will check if it has a schedule"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. If scheduler sees `0` nothing will be done."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. If scheduler sees `1`,`2` or `3` it will update to the new date."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "image::activityDiagramAutomationV2.png[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// end::automation[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Sort Feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Activities (ie. Deadlines and Events) are sorted by a specific criteria, such as name or date."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "don-tay"
        },
        "content": "The list of sort criteria are as follows:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Date"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Lexicographical order"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Priority"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Refer to the user guide for the specific commands. Sorting of activities is facilitated by"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "don-tay"
        },
        "content": "ModelManager#sortAtivityList."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "don-tay"
        },
        "content": "To sort activities, the command will use the keyword `sort` followed by the sort criteria."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "don-tay"
        },
        "content": "The following diagram shows how sorting activities is being done."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "don-tay"
        },
        "content": "image::SortActivityDiagram.png[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings for the sort command"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Below is an example of a user sorting activities by name and how the underlying system works."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". The user enters the command `sort name`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". The LogicManager will create NasaBookParser to parse the user input."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". NasaBookParser will create an SortCommandParser which parses the input and return a SortCommand."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". LogicManager will execute the SortCommand. SortCommand will sort all deadlines and events in their respective modules by the criteria specified."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". The underlying model\u0027s deadline and event lists is updated."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". The view is updated to the new model."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "don-tay"
        },
        "content": "The figure below shows the sequence diagram on what happens with the execution of the aforementioned command."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "don-tay"
        },
        "content": "image::SortLogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Aspect: Persistence of sort order for CRUD operations."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Alternative 1 (current choice): Sort order enforced only on demand. (ie. when user invokes `sort` command)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Pros: Lightweight as sorting is independent of CRUD operations. Performance and responsiveness is not compromised by commonly used CRUD operations."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Cons: User has to invoke sort command after CRUD operations."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Alternative 2: Sort order maintained regardless of subsequent CRUD operation on activities."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Pros: Consistency of list ordering is maintained, as sort order is preserved after CRUD operatons."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Cons: Performance is hindered as every CRUD operation will require enforcement of sort order on the underlying list data structure, which is computationally expensive. Persistent storage of the user-defined sort order is required, which is harder to implement."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::hint[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Hint Feature"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Hint for command popups shown as user types in command box."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Event listener is added to command box and detects changes key presses. For each key press, NASA checks if the ctext"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "starts with a valid command and updates the popup accordingly."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings for the popup"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Below is an example of a user typing in the command \"deadline\" by for the week and how the underlying system works."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". The user starts to type in `deadline\u0027 into command box"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". NASA checks as each character is typed if the string forms a valid command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". Once the command `deadline` is fully typed in, CommandBox calls the MainWindow."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". MainWindow sends command to be displayed to HintWindow."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". HintWindow retrieves hint from CommandHint to be displayed on hint window."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ". HintWindow displays to show user parameters of deadline and its example."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::hint[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Calendar Export Feature"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "This feature allows the current calendar view to be exported as a ics file for other calendars to import."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Users can choose to either export it to the default ./data filepath or specify their own filepath for the file to be exported to."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Internal Workings for the Calendar Export Feature"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Below is an example of a user requesting an export calendar command."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The user enters the command `calendar f/User/documents/calendar`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The LogicManager will create NasaBookParser to parse the user input."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". NasaBookParser will create ExportCalendarCommandParser which parses the input and creates a ExportCalendarCommand."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". ExportCalendarCommand will then execute. In the first step, all the deadlines and events are retrieved from the model."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Next, each deadline or event are being used to create new IcsDeadline or IcsEvent respectively. These new objects are the representation of their respective activities in ics format (using getIcsFormat() method)."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Deadlines are represented by `VTODO` objects in ics file and events are represented by `VEVENT` objects."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". While creating IcsDeadline or IcsEvent, IcsSchedules are created if the deadline or event has a auto-generation indicator (ie generate every week). The IcsSchedule object is appended to the IcsDeadline/IcsEvent object to allow it to auto-generate in calendars."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Once all IcsDeadlines and IcsEvents are created, the command will then write all the ics Formatted activities to the file called `nasa.ics` at the filepath."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The image below indicates the activity diagram giving a brief flow of events occurring."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::ExportCalendarActivityDiagram.png[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The images below show the sequence diagram of the export calendar command feature. The first image mainly illustrates the flow for parsing and creating the command whereas the second mainly illustrates the flow for executing the command and returning the result."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::ExportCalendarLogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::ExportCalendarModelSequenceDiagram.png[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c100%,\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|Choice| Pros:|Cons:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| Having a single class that encapsulates the whole logic of writing to ICS format | Easy and fast to implement. | Code will be very messy and if there are updates to iCalendar formats, it may cause a huge refactoring of code"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| Instead of exporting ics file, can export the image of calendar | Easier to implement and fast and with no issues relating to certain calendars not supporting VTODO. | However, it is not very convenient. Images can only show one month at a time."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| [Currently implemented] Have different classes for representing different activities with helper classes to assist in generating ics rules | Harder to implement and makes it very tedious. | Easy to debug and change when there are updates to the .ics format"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Option 3 was chosen as having different classes allowed us to pinpoint the exact error when the ics file was not working as intended. And any extensions or upgrades to iCalendar format can be easily extended from the current code without refactoring a lot. However, drawback is that some calendars do not support `VTODO`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::quote[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Motivational Quotes"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by: EdmondOng`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Given our hectic education lifestyle, we tend to neglect the emotional aspect of what makes life purposeful other than academic works."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "This features randomly select a quote and displayed to user on start-up of application. It aims to lighten the mood of the user."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "On the first start-up of application, Nasa will store all the quotes inside a text file in the data folder. If the quotes file is"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "already present, it will carry on with selecting one of the quote to be displayed to the user. At any point of time, if you wish to see"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "another motivation quote, you can type `quote`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings for the motivation quote."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". User enters a command `quote`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". NASA will generate a random number and select a quote in quotes.txt file."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Command result generated will be displayed to the user."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// end::quote[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Add Reminder Feature (Coming in `v2.0`)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Reminders can be added to activities so that the user can be notified when the activity is going to occur soon."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Below is an example of how users can add reminders:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The user enters the reminder command: `reminder 2 m/CS2030 d/12-12-2020 14:50`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The LogicManager will create NasaBookParser to parse the user input."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". NasaBookParser will create AddReminderCommandParser that parses the input and returns a AddReminderCommand."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". LogicManager will then execute AddReminderCommand which will create a Reminder item that contains the Activity and the date to be reminded."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The Reminder item will be added into the `ActiveRemindersList`. In addition, the reminders are sorted based on chronological order."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The reminder list view will be updated to show the current `ActiveRemindersList`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". If the time for any reminder has reached, there will be a pop-up or notification to alert the user for about 1min. And within 5 minutes, the reminder will automatically be removed from `ActiveRemindersList` and stored in the `PastRemindersList`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "For more information regarding the procedure, please refer to the Activity Diagram shown below."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::AddReminderActivityDiagram.png[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "For more information regarding the structure of the feature, refer to the class diagram below:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::AddReminderClassDiagram.png[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//end::reminder[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Snooze Reminder Feature (Coming in `v2.0`)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Users can also snooze reminders so that they can get the same reminder at a different time."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Below is an example of how users can snooze reminders:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The user enters the snooze reminder command: `snooze 2 d/12-12-2020 15:30`."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". The LogicManager will create NasaBookParser to parse the user input."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". NasaBookParser will create SnoozeReminderCommandParser to parse the input and return SnoozeReminderCommand"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". LogicManager will execute the command and the Reminder that has just passed with the associated index on the `ActiveRemindersList` will have its due time updated. If time not specified, default is 5 minutes."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "For more information regarding the procedure, please refer to the Activity Diagram below:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::SnoozeReminderActivityDiagram.png[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* has a need to manage a information on different modules"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*Value proposition*: manage modules faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy student doing a lot of modules | be able to edit my tasks |have updated information from the professors"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "of that module."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |hardworking and busy student |mark my tasks as done |know what else to do"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy and clumsy student |delete tasks that were wrongly inputted |remove erroneous tasks"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |lazy student |have a user interface that is intuitive |spend less time navigating"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |student |know that deadline of homework, projects and assignments |finish them by a certain date"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy student |undo and redo actions |save time"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |forgetful student |have reminders and alerts sent to me |act on my pre-set reminders at the desired time"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy student |search for relevant tasks |see if I have done them or not"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy student |see my group meetings |know when they are"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |busy student |filter my tasks based on certain criteria |view them easily"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |new user |have quick access to information on how to use the product |learn to use the product"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |student |check on the tasks due by a certain date |plan my time accordingly"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |extremely anxious student |advance notification on deadlines and upcoming examinations |prepare in advance"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* * *` |student |view all my tasks |gauge how much work I have left."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |busy and hardworking student with limited time |have suggestions on the next deadline assignment homework to do"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " |save time on checking what task to complete"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |lazy student |automate my homework schedule |avoid keying in recurring tasks"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |anxious and stressed student |provide daily motivational quotes or jokes or coding challenges  |lighten up my"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "mood for the day"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |student who values privacy |add password protection  |prevent others from viewing my tasks"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |busy student |export all my tasks  |view them easily"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |student |add in my personal timetable  |detect clashes between my personal and school timetable"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |busy student |jot down notes during lecture  |refer to them in the future"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |university student |add my timetable  |know the time and venue of my classes"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |objective student |view my academic results  |keep track on the percentage of points that I need in order to"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "achieve a result"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |student |allocate a specific time for each task  |manage my time more efficiently"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |student |keep track on the amount of tasks finished |analyse whether I am staying on track"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |student |share information with my friends |allow them to have the same schedule and asks to do"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`* *` |busy student |customise my own shortcuts  |save time when typing in commands"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`*` |stressed-out student |play a chill game |relax my mind"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|`*` |student with ex-co positions |find the next free timing for other meetings and responsibilities |can save time"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "(For all use cases below, the *System* is the `NASA` application and the *Actor* is the `user`, unless specified"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "otherwise)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Initialisation"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  NASA prompt user to key in modules taken during the semester on start-up."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "2.  User enters modules taken one by one as per the following eg."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2103T n/Software engineering`,"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " `add m/CS2106 n/Operating System`, `add m/CS2101 n/Effective Communication for Computing Professionals`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "3.  NASA confirms and display the modules entered."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "4.  User can start to use the command line."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 2a. Catch errors for prefixes not provided eg, `add CS2106 Software engineering`, `m/` and `n/` is not provided."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Add Deadlines"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to add a deadline for a particular module."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`deadline m/CS2103T d/01-03-2019 23:59 a/Homework [n/This is the notes.]`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display an updated list of all deadlines and events."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1a. No such modules."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1b. Prompt user to add the modules not listed."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1c. Due date has already passed."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Add Event"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to add an event for a particular module. +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`event m/CS2103T d/01-03-2019 23:59 a/Project Work [n/This are the notes.]`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display an updated list of all deadlines and events."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1a. No such modules."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1b. Prompt user to add the modules not listed."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1c. Due date has already passed."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: List"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to list all activities +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "2.  NASA will provide a acknowledgement messages"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display an updated list of all deadlines and events."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Use case: Edit deadline"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1.  User requests to change the date and time to `01-04-2019 23:00` and set priority to `5` for deadline index 2 under the module CS2103T. +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`edit 2 m/CS2103T d/01-04-2019 23:00 p/5`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display an updated list of all deadlines and events."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* 1a. No such module code exists in NASA."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* 1b. Prompt user to re-enter the correct module code."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1c. Index out of bounds when choosing the activity to edit."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to delete module CS2103T and CS2106. +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`del CS2103T CS2106`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display an updated list of all modules."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* 1a. No such module code exists in NASA."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* 1b. Prompt user to re-enter the correct module code."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: find"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to find all task that contains KEYWORD \"homework\". +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`find homework`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  NASA will display all events and deadlines that has the keyword \"homework\"."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: repeat"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "1.  User requests to repeat a task under CS2103T every week. +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`repeat-d 1 m/CS2103T r/1`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1a. Nothing to repeat."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* 1b. Prompt user no such modules."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1c. Index out of bounds when choosing activity not in the list to edit."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* 1d. Index out of bounds when choosing repeat type that is \u003c 0 and more than 3."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`eg. repeat-d -1 m/CS2103T r/4`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Use case: export QR code text"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1.  User requests to export all activities via QR code. +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`export`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  Pop-up window will open, displaying QR code for user to scan."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Use case: export calendar"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1.  User requests to export all activities to calendar. +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`calendar`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3.  Calendar ics file will be created in filepath `data/nasa.ics`."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Clear"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to clear all tasks and checklist. +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "3.  All modules will be emptied unless specified."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Quote"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1.  User requests for a motivation quote +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`quote`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "2.  NASA will display a pop-up with a quote in the middle of the screen."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Use case: Statistics"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "1.  User requests for statistics. +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`statistics`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will toggle to the statistics tab to display overall statistics."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Use case: Exit"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "1.  User requests to exit the program. +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2.  NASA will provide an acknowledgement message."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "3.  User-interface will close."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::nfr[]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Accessibility"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App should be colourblind-friendly."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. Colourblind users should be able to discern all text and information on the GUI to the same extent as"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "don-tay"
        },
        "content": "non-colourblind individuals."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Extensibility"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App should be able to support feature increments without breaking existing features."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Interoperability"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. App should be able to read saved data files transferred between computers."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Maintainability"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App’s codebase should be easily understandable to a Software Developer with one year experience in Java."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. App’s codebase should be accessible and available for contribution via feedback and suggestions from"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "don-tay"
        },
        "content": "external developers."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Performance"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App should be able to hold up to 100 activities without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. App should be able to process user input and return a response within 3 seconds."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Reliability"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. App should return an appropriate error or exception response and not crash when a user enters an invalid"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "don-tay"
        },
        "content": "input command."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. App should return an appropriate error and not crash when it fails to process a user input command."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3. App should inform the user in the event of an unexpected crash and potential loss of data."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "don-tay"
        },
        "content": "4. App should exhibit behaviour consistent with the User Guide’s specifications."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Usability"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "don-tay"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "don-tay"
        },
        "content": "able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "don-tay"
        },
        "content": "2. App first time startup process should have sufficient guidance for first time users to get started using the app"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "don-tay"
        },
        "content": "with basic CRUD function."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "don-tay"
        },
        "content": "3. App should be usable without requiring internet connection (apart from downloading the file online)."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::nfr[]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[[task]] Tasks::"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Activities consist of deadlines and events"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Deadlines are essentially assignments, homework or whatever that needs to be done by a specific due date"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Events are academic activities such as tutorial classes, tests, competitions and remedial"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "   Expected: Shows the GUI with a set of sample modules such as CS2101, CS2105 and GEH1001. The window size may not be optimum."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. If you wish to start a new NasaBook, type `clear`"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Adding a module"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Adding a new module"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `add m/CS2030 n/Programming Methodology II` +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: The module `CS2030` will be created and displayed on the screen."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Adding a module that already exists"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `add m/CS2030 n/Programming Methodology II` +"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Assuming the mod is added from the previous test case, a duplicate module error will be shown."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Providing wrong format for module parameters"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `add m/@c2231 n/Computer Science is fun` +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Format error is displayed along with an example of a correct format."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `add m/cs2030 n/\" +"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Format error is displayed along with an example of a correct format."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Editing a module"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing a module"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `edit m/CS2030 m/CS1231 n/Discrete Structures in Mathematics` +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: Module CS2030 will be changed to CS1231 with the name Discrete Structures in Mathematics."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing a module that does not exist"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `edit m/AX1107 m/CS1231 n/Discrete Structures in Mathematics` +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: Module does not exist error will be displayed."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing a module with the same name and module code"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `edit m/CS2030 m/CS2030 n/Programming Methodology II` +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: No new field is being edited error will be shown."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing a module with a different name but same module code"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `edit m/CS2030 m/CS2030 n/Java OOP Class` +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: Module CS2030 will be changed to the name Java OOP Class."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Deleting a module"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Deleting a module that exists"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del m/CS2101` (default module preset) +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: The module `CS2101` should be deleted."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Trying to delete a module that does not exist"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del m/AX1103` +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Unless the user adds in the module above, there should be an error message displayed."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Passing in a wrong format for module"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del m/1@00` +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Error message with wrong format for module will be shown."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Deleting a module while all modules are listed"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Prerequisites: List all modules using the `list` command. Multiple modules in the list."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `del m/CS2030` +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: CS2030 module will be deleted from the list. Details of the modules will be disappeared from the screen."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Test case: `del ` +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: No module is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "don-tay"
        },
        "content": ".. Other incorrect delete commands to try: `delete m/cs2030` (delete instead of del) +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Adding an activity"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Adding a new activity"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Test case: `deadline m/CS2030 a/Lab 2 d/12-12-2020 23:59 p/1` +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: A new deadline activity with the above description is displayed within the CS2030 module activity list."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Test case: `event m/CS2030 a/Recitation sd/12-12-2020 12:00 ed/12-12-2020 14:00` +"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: A new event activity with the above description is displayed within the CS2030 module activity list."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Adding a duplicate activity"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Test case: `deadline m/CS2030 a/Lab 2 d/12-12-2020 23:59 p/1` +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: If this activity has not been added already, enter this command twice. A duplicated activity error message will be displayed."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Adding an activity to a module that does not exist"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Test case: `deadline m/MA1101R a/Lab 2 d/12-12-2020 23:59 p/1` +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Assuming this module does not exist (not displayed), then a module not found error will be thrown."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Deleting an activity"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Deleting an activity that exists"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del-d 1 m/CS2030` +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: The first activity in the CS2030 activity list will be deleted."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Deleting an activity that does not exist"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del-d 10 m/CS2030` +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: An error message saying deadline indicated does not exist will be displayed."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del-d 200 m/CS2101` +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: An error message saying deadline indicated does not exist will be displayed."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Deleting an activity from a module that does not exist"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `del-d 1 m/AX1107` +"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: An error message will be displayed."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Done"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Once an activity is done, it will be displayed differently."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise this data"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Homework d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `done 1 m/CS2030`"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Activity \"Homework\" will have a tick icon displayed in the checkbox."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Continue"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Undone an activity, when you think that you have not finished the activity."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise this data"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology`"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Homework d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`done 1 m/CS2030`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `continue 1 m/CS2030`"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: The checkbox will be un-tick."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Find"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Find an activity using `find activity name`"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise this data"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Homework d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Lab d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Project d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Tutorial d/20-06-2020 00:00`"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `find Homework`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: All except Homework will be hide from the screen."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `find `"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Expected an input, an error message invalid command format will be displayed."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `find No Such Activity`"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: All activity will be hide, as there is no such activity with the name."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Editing an Activity"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing an activity"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise the following data. +"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology` +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Lab d/20-08-2020 00:00` +"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`event m/CS2030 sd/12-05-2020 02:00 ed/12-05-2020 02:01 a/CP contest`"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". `edit-d` to edit a deadline and `edit-e` to edit an event."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `edit-d 1 m/CS2030 n/Remember to do checkstyle testing` +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: The first activity notes will be updated to the following."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `edit-e 1 m/CS2030 n/Computing event`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Editing an activity that does not exist"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `edit-d 100 m/CS2030 n/Remember to do checkstyle testing` +"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: An error showing activity cannot be found will be displayed."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Editing an activity from a module that does not exist"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `edit-d 1 m/AX1107 .....` +"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Expected: Module not found error will be displayed."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ". Editing an activity with the exact same new values"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `edit-d 1 m/CS2030 [SAME PARAMETERS]` +"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Expected: No new field is edited error will be shown."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Repeat an activity"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Repeat an activity by weekly `r/1`, fortnightly `r/2` or monthly `r/3`. To cancel `r/0`."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise the following data. +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology` +"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Lab d/20-05-2020 00:00` +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`event m/CS2030 sd/12-05-2020 02:00 ed/12-05-2020 04:00 a/CP contest`"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION:  You may choose to use a different start date and end date that is relevant to you"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "at that point of time during your testing. It is important to choose a short-time difference, eg. 1min to see the effects immediately."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-d 1 m/CS2030 r/1`"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Activity will display a \"Repeat Weekly\" in the module card."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-d 2 m/CS2030 r/2`"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Activity will display a \"Repeat Fortnightly\" in the module card."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-d 1 m/CS2030 r/0`"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Activity will cancel the repeat function and text \"Repeat\" will disappear."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-e 1 m/CS2030 r/3`"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Activity will display a \"Repeat Monthly\" in the module card."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-f 1 m/CS2030 r/3`"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: No such command, take note that `repeat-d` and `repeat-e`"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `repeat-e 1 m/CS2030 r/4`"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: Index out of bounds, take note that only r/0, r/1, r/2, r/3"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Undo/Redo"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION: Follow the steps closely, to get the expected result."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Allows user to undo when an error is made or redo when undo is inappropriate."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise the following data. +"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/Lab d/20-05-2020 00:00` +"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`event m/CS2030 sd/12-05-2020 02:00 ed/12-05-2020 04:00 a/CP contest`"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `undo`"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: event will be deleted from the list."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `undo`"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: deadline will be deleted from the list."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `redo`, `redo`"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: event and deadline will be displayed."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `undo`, `undo`, `undo`"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: an empty Nasa with no modules."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Sort"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Allows user to sort base on priority."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ". Initialise the following data. +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`add m/CS2030 n/Programming Methodology` +"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/A d/20-05-2020 00:00 p/2` +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/B d/20-04-2020 00:00 p/3` +"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`deadline m/CS2030 a/C d/20-03-2020 00:00 p/1` +"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`event m/CS2030 sd/12-05-2020 02:00 ed/12-05-2020 04:00 a/CP contest`"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `sort priority`"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: B,A,C will be displayed in this sequence."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `sort date`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: C,B,A will be displayed in this sequence."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".. Test case: `sort name`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Expected: A,B,C will be displayed in this sequence."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Checking that NASA saves data properly"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Copy `NASA.jar` to a new directory and open it. This is to simulate the scenario where the user has no data at all (ie no data file). Type in some commands and notice that the data file will be created for you. Verify that is it correct."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ". Handling corrupted data"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ".. Edit the relevant `.json` files. Type in anything you want. And then close the NASA application. Restart it, the application will notice the corrupted data and will overwrite the data with a brand new one."
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 101,
      "EdmondOng": 361,
      "-": 338,
      "kester-ng": 200,
      "don-tay": 190
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d Nice \u0026 Amazing Student Guide (NASA) - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-T10-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "don-tay": 2
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "e.g. `nasa.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "e.g. `nasa.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "e.g. `nasa.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d Nice \u0026 Amazing Student Guide (NASA) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":stylesheet: userguide.css"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":linkcss:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-T10-4/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "By: `CS2103T-T10-4`      Since: `Feb 2020`      Licence: `NUS`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Nice \u0026 Amazing Student Assistant (NASA) is an application for *busy university students to manage their module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "assignments, lessons, exams and other miscellaneous activities.*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*NASA has a user-centric Graphical User Interface optimized for users who prefer to work with the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Command Line Interface (CLI).* If you can type fast, NASA can keep track of all your module activities faster than"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "traditional GUI applications."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Interested? Ready to blast off on an exciting student journey? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// suppress inspection \"AsciiDocLinkResolve\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ".  Download the latest `NASA.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *`list`* : lists all deadlines of each module"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* **`add m/CS2103T n/Software Engineering`**: adds a module CS2103T `Software Engineering` to the list. Allows activities to be added to that module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* **`deadline m/CS2103T d/20-02-2020 23:59 a/IP Project p/2 n/Must get an executable JAR file`** : adds an activity called IP Project with the following details into CS2103T module activity-list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* **`del-d`**`1 m/CS2103T` : deletes the 1st deadline shown in the module deadline-list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Note: during initialisation, modules may not fit full size of screen due to rendering speed. Please resize your"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "window to enable responsiveness of module size."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::keyboard[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Keyboard Shortcuts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "NASA is optimized for users who prefer CLI. Using the following keyboard shortcuts, you can easily navigate through"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "the application without ever leaving the keyboard!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[%header,cols\u003d2*]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "^|Shortcut"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "^|Action"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "^.^a|image::tab.png[width\u003d\"75\"]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|Switch to the next tab. If the last tab is reached, NASA will cycle back to the first tab"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "^.a|image::up.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|View previous command entered. (if any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "^.a|image::down.png[width\u003d\"50\"]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|View next command entered. (if any)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::keyboard[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::tabs[]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Switching Between Tabs"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "NASA provides different views to manage your modules through the Modules, Calendar and Statistics tabs."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " You can navigate through these tabs either by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    1) using the TAB key"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Refer to for more details \u003c\u003cKeyboard Shortcuts\u003e\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    2) using the view command followed by the tab name e.g. `view calendar`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::tabs[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::commands[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Hints"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "New to NASA? Not to worry! NASA\u0027s responsive hint pop up is here to guide you through all the commands."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Simply key in any valid command such as `deadline` and a pop up will appear informing you on exactly which parameters"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "to include."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::parameters.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "In addition, you can easily copy the example to your keyboard using the button on the popup. Now you can paste the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "command and view the result easily."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::Copy.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add m/MODULE_CODE`, `MODULE_CODE` is a parameter which can be used as `add m/CS1231`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Items in square brackets are optional fields e.g `[n/Notes]`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[m/MODULE_CODE]...` means m/CS2103T CS2101 ....."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Parameters can be in any order."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* For items without `...`, should multiple values for the same field be provided e.g `m/CS2101 m/CS2103T`, only the last value will be used, unless stated otherwise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Commands are **case-insensitive**, unless stated otherwise."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* Prefixes are **case-sensitive** e.g m/ is valid while M/ is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Provides a link to this user guide for future reference. Click the CopyURL button to copy the URL to your clipboard."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::help.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Changing view : `view`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Changes the NASA view to specified tab"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Format: `view TAB_NAME`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example `view calendar`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "image::view.png[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::commands[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Adding a module activity-list: `add`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Adds a module activity-list into the NASA application +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `add m/MODULE_CODE n/MODULE_NAME`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `add m/CS2030 n/Programming Methodology II`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `add m/CS1231 n/Discrete Structures in Mathematics`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Module name must not be empty and should only contain alphanumeric characters."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Module name with consecutive multiple whitespaces will be trimmed to a single whitespace."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Module code must contain 1-10 alphanumeric characters and not have any spaces. eg: `CS 2030` will not be accepted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//tag::add[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Adding a type of  activity into a module respective activity-list:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Types of activities available and their description are displayed in the table below. Each type of activity has its own dedicated list in the module. How to add individual types of activities are listed in subsections below."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Deadline"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Deadlines are activities that needs to be completed by a certain date. An example is assignment or labs. Each module has its own deadline-list. See below image for details and how they are represented."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::Deadline-list.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Deadlines have statuses: `not done` and `done`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Deadlines have priorities and are represented by number of exclamation marks (top right corner). The number of them represents priority (the more the higher the priority)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Whether a deadline is done or not is represented by a tick-box. From the above image, the first deadline `Lab 10` is done (ticked) but the others are not."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Tick-box are not clickable, but can be toggled using `done` and `continue` command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** The deadlines are highlighted in two colours - light blue and red. Blue indicates that the deadline is either not over yet or is already done. Red means it is overdue (due date passed and is not done)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Event"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Events are activities that occur for a stipulated period of time. Example of events can include tutorials, examinations and competitions. Each module has its own event-list. See below for details and how they are represented."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::Event-list.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Events do not have priorities, the `done` nor `not done` statuses."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Events instead have `ongoing/have not started` and `over` statuses."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If the events are highlighted light blue then it is `ongoing/have not started`. If it is highlighted red, then it is `over`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** The statuses of deadlines and events are not updated on-the-go. Instead, use `refresh` command or restart the application to see the updated statuses."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a deadline into a module\u0027s deadline-list: `deadline`:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Adds a deadline into the respective module\u0027s activity list +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `deadline m/MODULE_CODE a/ACTIVITY_NAME d/DATE_DUE [n/NOTES] [p/PRIORITY]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Adds a deadline with the specified description into module\u0027s deadline list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Module and its code must exist."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** DUE_DATE must be in this format `DD-MM-YYYY HH:MM`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Priority ranges from 1 to 5. 5 indicates highest priority while 1 indicates lowest priority."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If the priority is not defined, default is 1."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** A deadline that has already passed cannot be added (ie DUE_DATE has passed)."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** By default, a deadline is set to not done or not completed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `deadline m/CS2030 a/Lab 2 n/Must study infinite streams d/12-12-2020 23:59 p/5` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "adds a deadline activity named `Lab 2` to the module `CS2030` with the following notes, priority and due date."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `deadline m/CS2030 a/Tutorial 1 d/12-12-2020 23:59` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "adds a deadline activity named `Tutorial` to the module `CS2030` with no note and default priority 1."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event into a module\u0027s activity-list: `event`:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Adds an event into the respective module\u0027s activity list +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `event m/MODULE_CODE a/ACTIVITY_NAME sd/START_DATE ed/END_DATE [n/NOTES]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Adds an event with the specified description into the respective module\u0027s event-list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Module and its code must exist."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Likewise, START_DATE and END_DATE must be in this format `DD-MM-YYYY HH:MM`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** An event that has already passed cannot be added (ie END_DATE has passed)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** However, an event that is ongoing (ie START_DATE has passed but not END_DATE) can be added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** There is no priority for events!"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//end::add[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Listing all activities : `list`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Shows a list of activities +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `list [m/MODULE_CODE]`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** List the activities based on module code."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If no module code is specified, everything will be shown."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Editing a module: `edit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`Contributed by: don-tay` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits an existing module in the NASA application. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `edit m/MODULE_CODE [m/MODULE_CODE] [n/MODULE_NAME]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Edits an existing module in the application."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* First `MODULE_CODE` is the module code of the target module to be edited. Second `MODULE_CODE` is the new module code to edit to."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`edit m/CS2030 m/CS2030S n/Programming Methodology for CS` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits the CS2030 module to CS2030S along with its new module name."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "don-tay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* If module code is edited, the new module code CANNOT have the same module code as any non-target module that already exist in NASA."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* To edit module code, *EXACTLY TWO* module codes must be entered."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Module name must not be empty and should only contain alphanumeric characters."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Module name with consecutive multiple whitespaces will be trimmed to a single whitespace."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Module code must contain 1-10 alphanumeric characters and not have any spaces. eg: `CS 2030` will not be accepted."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Editing a deadline : `edit-d`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`Contributed by: don-tay` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits an existing deadline in the module\u0027s deadline list. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `edit-d INDEX m/MODULE_CODE [a/ACTIVITY_NAME] [d/DUE DATE] [p/PRIORITY] [n/NOTES]`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Edits the deadline at the specified `INDEX` in the specified `MODULE_CODE` deadline-list. The index refers to the index number shown in the module\u0027s corresponding deadline-list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `edit-d 2 m/CS2103T d/12-12-2020 23:59` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits the 2nd deadline in CS2013T deadline-list date to be `12-12-2020 23:59`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `edit-d 3 m/CS2030 n/Finish LAB level 3 p/2` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits the notes and priority of the 3rd deadline in CS2030 deadline-list to `Finish LAB level 3` and `2` respectively."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "don-tay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* If the due date is edited, the new due date *CANNOT* be a date that has passed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `INDEX` must be specified immediately after the command word `edit-d` for this command! Eg: `edit-d m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Editing an event : `edit-e`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`Contributed by: don-tay` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits an existing event in the module\u0027s event list. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `edit-e INDEX m/MODULE_CODE [a/ACTIVITY_NAME] [sd/START DATE] [ed/END DATE] [n/NOTES]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Edits the event at the specified `INDEX` in the specified `MODULE_CODE` event-list. The index refers to the index number shown in the module\u0027s corresponding event-list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `edit-e 2 m/CS2103T ed/12-12-2020 23:59` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits the 2nd event in CS2103T event-list end date to be `12-12-2020 23:59`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `edit-e 3 m/CS2030 n/Practical exam sd/20-05-2020` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Edits the notes and start date of the 3rd event in CS2030 event-list to `Practical exam` and `20-05-2020 23:59` respectively."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "don-tay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* If the end date is edited, the new end date *CANNOT* be a date that has passed."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* `INDEX` must be specified immediately after the command word `edit-e` for this command! Eg: `edit-e m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::done[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Setting a deadline to done: `done`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by kester-ng` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Sets a deadline to be done (or completed) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `done INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Sets the deadline associated with the index in the module\u0027s deadline-list to done or completed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If the deadline is already set to done, error message is thrown"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Only deadlines can be set to done. Events are not able to do as events are activities that occurs from start to end."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Users are not able to edit the status (done or ongoing) of the deadline via the edit command."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** INDEX must appear first in the command. `done m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `done 1 m/CS2030` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Sets the 1st deadline in CS2030 deadline-list to done."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Setting a deadline to ongoing: `continue`:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by kester-ng`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Sets a deadline to ongoing +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `continue INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Sets the deadline associated with the index in the module\u0027s deadline-list to ongoing."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If the deadline\u0027s status is ongoing, error message is thrown."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Only deadlines can be set to ongoing. See explanation above."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Users are not able to edit the status (done or ongoing) of the deadline via the edit command."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** INDEX must appear first in the command. `continue m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// end::done[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Locating activities by name: `find`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Finds activities whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* The search is case insensitive. e.g `tutorial` will match `TUTORIAL`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* The order of the keywords does not matter. e.g. `Lab 3` will match `3 Lab`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Only the activity name is searched."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Only full words will be matched e.g. `tutorial` will not match `tutorials`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Activities matching at least one keyword will be returned (i.e. `OR` search). e.g. `tutorial lab` will return `tutorial 2`, `lab 3`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* `find tutorial` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Returns `tutorial 1` and `tutorial 2` and any other activities with name tutorial."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Deleting a module: `del`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Deletes a module along with its activity-list. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `del m/MODULE_CODE`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Deletes the module with MODULE_CODE and also its activity-list"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** MODULE_CODE must be an existing module"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `del m/CS2030` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Deletes the respective CS2030 module."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Deleting a deadline: `del-d`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Deletes a deadline from a module\u0027s respective deadline-list +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `del-d INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Deletes the deadline associated with the index in the respective module\u0027s deadline-list"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If index is invalid, an error message will be thrown."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** INDEX must be specified first in this command! Eg: `del-d m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Deleting an event: `del-e`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Deletes an event from a module\u0027s respective event-list +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `del-e INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Deletes the event associated with the index in the respective module\u0027s deadline-list"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If index is invalid, an error message will be thrown."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** INDEX must be specified first in this command! Eg: `del-e m/MODULE_CODE INDEX` is not allowed."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d\u003d Generating statistics: `statistics`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: Charmaine Koh`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Displays statistics of all activities."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Switch to statistics tab by either"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    1) using the TAB key"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    2) using the command `statistics`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    3) using the command `view statistics`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Format: `statistics`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::automation[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Automating a activity: `repeat-d` or `repeat-e`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by: EdmondOng`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Allows user to repeat-d an activity from a module."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Format: `repeat-d ITEM_INDEX m/MODULE_CODE r/INDEX`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "**  The first `ITEM_INDEX` is the sequence of the activity in the list."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `INDEX` can be in `1 for Weekly`, `2 fortnightly`, `3 for Monthly`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "**  By default `INDEX` will be `0` hence no automation will be done."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "**  The activity will be regenerated once user open the application or enters refresh command."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION:  Only use index r/0, r/1, r/2, r/3."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-d 1 m/CS3233 r/0` to cancel."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-d 1 m/CS3233 r/1` to regenerate weekly."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-d 1 m/CS3233 r/2` to regenerate fortnightly."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-d 1 m/CS3233 r/3` to regenerate monthly."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-e 1 m/CS3233 r/0` to cancel."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-e 1 m/CS3233 r/1` to regenerate weekly."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-e 1 m/CS3233 r/2` to regenerate fortnightly."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** `repeat-e 1 m/CS3233 r/3` to regenerate monthly."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// end::automation[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::quote[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d\u003d Quote: `quote`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by: EdmondOng`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Allows user to generate a quote message. Aims to lighten the user day!"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "The message will disappear within 5s."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION:  Advise not to spam `quote` as the screen will be filled with quote messages waiting to disappear."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Use it when you need it."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `quote`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `quote` : “Limitations live only in our minds. But if we use our imaginations, our possibilities become limitless.” – Jamie Paolinetti"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// end::quote[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Undo: `undo`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by: EdmondOng`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Allows user to undo previous action."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION:  `quote`, `export` not supported."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `undo` : \"undo last action\""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Redo: `redo`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "`Contributed by: EdmondOng`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Allows user to redo previous action."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "CAUTION:  `quote`, `export` not supported."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `redo` : \"redo last action\" else \"no last action to redo\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Calendar View:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Allows the user to see the activities onto a calendar."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Switch to calendar tab using TAB key."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* Switch to calendar tab by clicking on the tab."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "image::Calendar_View.png[width\u003d\"300\", align\u003d\"middle\"]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Provides users with a great way to see what upcoming deadlines and events over the days, weeks or months."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** The calendar updates along with the activities being displayed. This means that if a user enters a `find` command and the activities that matches the keyword are only displayed on the module\u0027s tab. Then the calendar tab will also display the same few activities!"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** This allows users to easily find their tasks and note down when is it going to happen or when is it due. Making it a more pleasant user experience!"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** The individual date cells are scrollable. If any of your activities are not shown, hover your mouse over the dates and scroll down to find it!"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Export Calendar: `calendar`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Allows users to export the current calendar into an .ics format for other calendar applications +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `calendar [p/FILE_PATH]`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Exports the calendar into a .ics file named `nasa.ics` onto specified file path."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If file path is not specified, the resulting .ics file can be found in the /data directory."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `calendar p/./nasa` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "exports the current calendar into nasa.ics file that is located at `./nasa` directory."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** The export command will export all activities regardless of whether is it currently shown or not."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Typing this command will cause all activities to be displayed!"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Deadlines are represented as a `VTODO` entry in the .ics file. And there are some calendars that do not support this (eg: Google calendar). Currently, deadlines will not be able to be displayed on such calendars. Will expand to support these types of calendars `[Coming in V2.0]`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Sort deadline and event: `sort`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`Contributed by: don-tay` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Sorts all deadlines and events in their respective modules by a specified criteria. +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `sort SORT_METHOD`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* All sort method will sort both deadline and event, unless stated otherwise. (eg. Priority)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* Where stated, a command will sort both deadline and event using different sort method. (eg. Due date and start date)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "don-tay"
        },
        "content": "The list of sort methods is given in the table below: +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|*Sort Method* |*Format* |*Sort order (top to bottom)*"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|Lexicographical order (case-insensitive) |`sort name` | A to Z"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|Due date (for deadline) +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Start date (for event)|`sort date` | Earliest to latest"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|Priority *(for deadline only)*|`sort priority`| Highest (5) to lowest (1)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "don-tay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Clears all entries from the NASA application (including module activity-lists created). +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003d\u003d\u003d Export NasaBook as QR code : `export`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "don-tay"
        },
        "content": "`Contributed by: don-tay` +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Exports all deadlines and events in NasaBook as a QR-code text, compatible with QR code enabled scanners and smartphones. +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// tag::refresh[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Refresh current NasaBook: `refresh`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Refreshes the NasaBook to reflect correct statuses for activities. +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `refresh`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// end::refresh[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Adding Reminders: `Coming in v2.0`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Adds a reminder to a deadline or event +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `remind-d INDEX m/MODULE_CODE d/REMIND_DATE` for deadlines"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `remind-e INDEX m/MODULE_CODE d/REMIND_DATE` for events"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Adds a reminder to the deadline or event associated with the index in the module\u0027s event-list/deadline-list"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** When reminder due date is reached, the application will sound off with a short tune together with a pop-up."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** It is not allowed to add reminders to activities that already passed."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** REMIND_DATE cannot be in the past. And the format is the same as other DATE formats: `DD-MM-YYYY HH:MM`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** `remind-d 1 m/CS1231 d/10-10-2020 23:59` +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Sets a reminder for the deadline with index 1 in CS1231 deadline list to the specified date."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d Snoozing a Reminder: `Coming in v2.0`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "`Contributed by: kester-ng` +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Snoozes a reminder of an event or deadline +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `snooze-d INDEX m/MODULE_CODE [d/REMIND_DATE]` for deadlines"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Format: `snooze-e INDEX m/MODULE_CODE [d/REMIND_DATE]` for events"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Snoozes the deadline or event reminder till the REMIND_DATE"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** If no REMIND_DATE is specified, the REMIND_DATE will be set as 5 minutes later"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** REMIND_DATE cannot be in the past. And the format is the same as other DATE formats: `DD-MM-YYYY HH:MM`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: CharmaineKoh` +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "NASA data is saved by default in `nasabook.json` in the hard disk automatically after any command that changes the"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "data. There is no need to save manually."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "You can edit the data file directly to change any data."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "CAUTION:  If there is any invalid input in the data file, NASA will override the file and start with an empty file."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// tag::faq[]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "the data of your previous NASA folder."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*Q*: What is the purpose of an event? +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*A*: An event can be CCAs, bookings, etc."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: How do I populate NASA with an activity (ie. Deadline, Event, Lesson) that occur regularly (eg. weekly)? +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: Use the automate command (see section ‘Automation’)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: What are the differences between Deadline and Event? +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: Both are describe the type of activity in a module. They are displayed in different parts of the NASA UI (ie. Deadline and Event panel, respectively)"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: How many modules can I add into NASA? +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: NASA is optimised to display up to 8 modules at once - More than enough modules for a university student in a semester. Should you exceed 10 modules, please delete existing modules before adding new modules."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: How many deadlines and events can I add into a module? +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: There is no limit, so add away!"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: Since every deadline is different how automation helps to keep track of my new deadline? +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: The new deadline will be base on the interval when you first initialise the deadline activity. For example,"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "don-tay"
        },
        "content": "date of creating an activity is on 16-03-2020 00:00 and due date is on 20-03-2020 00:00. If you set repeat for a week,"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "don-tay"
        },
        "content": "the next due date will be 16 + 7 + 4 which is 27-03-2020 00:00."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*Q*: There is an unreported bug. What should I do? +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*A*: Please contact us here! We will respond as soon as possible."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// end::faq[]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`Contributed by: Charmaine Koh`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// tag::command_summary[]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ".List of all commands"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[cols\u003d\"1,3\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|Command|Syntax"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Add* |`add m/MODULE_CODE n/MODULE_NAME`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Deadline* |`deadline m/MODULE_CODE d/DATE a/ACTIVITY_NAME [p/PRIORITY] [n/NOTES]`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Event* | `event m/MODULE_CODE a/ACTIVITY_NAME sd/START_DATE ed/END_DATE [n/NOTES]`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Clear* | `clear`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Delete Deadline* | `del-d INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Delete Event* | `del-e INDEX m/MODULE_CODE INDEX`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Delete* | `del m/MODULE_CODE`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| *Edit Module* | `edit m/MODULE_CODE [m/MODULE_CODE] [n/MODULE_NAME]`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| *Edit Deadline* | `edit-d INDEX m/MODULE_CODE [a/ACTIVITY_NAME] [d/DUE DATE] [p/PRIORITY] [n/NOTES]`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| *Edit Event* | `edit-e INDEX m/MODULE_CODE [a/ACTIVITY_NAME] [sd/START DATE] [ed/END DATE] [n/NOTES]`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "don-tay"
        },
        "content": "| *Export* | `export`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Find* | `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Help* | `help`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "don-tay"
        },
        "content": "| *List* | `list [m/MODULE_CODE...]`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Shortcut* | `shortcut s/SHORTCUT c/COMMAND`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Export Calendar*| `calendar [p/FILE_PATH]`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "don-tay"
        },
        "content": "| *Sort* | `sort SORT_METHOD`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| *Statistics* | `statistics`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "don-tay"
        },
        "content": "| *Redo* | `redo`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "| *Repeat Deadline* | `repeat-d INDEX m/MODULE_CODE r/INDEX`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "| *Repeat Event* | `repeat-d INDEX m/MODULE_CODE r/INDEX`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Quote* | `quote`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "| *Undo* | `undo`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| *View* | `view TAB_NAME`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "// end::command_summary[]"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 110,
      "EdmondOng": 63,
      "-": 114,
      "kester-ng": 343,
      "don-tay": 119
    }
  },
  {
    "path": "docs/team/charmaine-koh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d Charmaine Koh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d PROJECT: Nice and Amazing Student Assistant (NASA)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Nice \u0026 Amazing Student Assistant (NASA) is an application for busy university students to manage their module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "assignments, lessons, exams and consultations etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Major enhancement*: Conceptualised and implemented unique GUI for NASA."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** What it does: Allows users to view NASA data in an organized manner by displaying modules in columns."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Justification: This feature allows users easily view all of their activities which allows them to get a better"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "gauge the number of activities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Highlights: GUI is unique and differs greatly from traditional todo applications."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "There are many challenges involved in this enhancement:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Configuring the layout and display of the module tab alone required much planning due to the in depth nature of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "our data and display."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** As our data was layered in that both modules and activities can be updated, it was a challenge to produce a"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "responsive UI which could be updated along with data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Additionally, typical GUI requirements such as resizing along with the window size and positioning had to be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "taken into consideration."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Major enhancement*: added *hint popup for commands with ability to copy example*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** What it does: detects which command the user wishes to use and provides a hint to show command usage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Additionally, a copy example message is provided so users can quickly utilise example messages and edit them as"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "required."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Justification: This feature improves user experience as they do not have to repeatedly refer to the user guide to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "check what parameters to include. Through the pop up, the users are informed of what to include in the command,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "reducing the change of error and thus reducing the frustration of wrong input and error messages. Furthermore,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "allowing the user to copy the example reduces the need to check for the right prefixes included."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. The implementation too"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "was challenging as it required configuring the GUI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Minor enhancement*: increase CLI-friendliness by adding keyboard shortcuts for user to navigate NASA more easily."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Users can look for previous commands using up/down keys similar to the functionality in bash. In addition, they can"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "easily navigate from tab to tab either using tab (in one key) or using the view command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Minor enhancement*: added \"statistics display\" to provide users with visualisation on the proportion of deadlines"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "for all modules and the total tasks completed and not completed for each."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Minor enhancement*: responsible for storage of data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCharmaineKoh\u0026tabRepo\u003dAY1920S2-CS2103T-T10-4%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Suggested refactoring the whole code base. (Pull Requests https://github"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ".com/AY1920S2-CS2103T-T10-4/main/pull/246[#246], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/90[#90])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Added table for better organisation of commands in User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dkeyboard]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtabs]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommands]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommand_summary]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsave]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dhint]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 103
    }
  },
  {
    "path": "docs/team/don-tay.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d Don Tay - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d PROJECT: Nice and Amazing Student Assistant (NASA)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Nice \u0026 Amazing Student Assistant (NASA) is an application for busy university students to manage their module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "assignments, lessons, exams and other miscellaneous activities."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "NASA has a user-centric Graphical User Interface optimized for users who prefer to work with the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "Command Line Interface (CLI). If you can type fast, NASA can keep track of all your module activities faster than"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "traditional GUI applications."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *Major enhancement*: Added *the ability to export data on NASA via QR code*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** What it does: allows the user to export their deadlines and events by scanning the generated QR code with any QR code enabled scanners and smartphones."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Justification: This feature allows users to copy their deadlines and events to their phone conveniently, for easy reference on their mobile devices."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Highlights: This enhancement utilises ZXing, a 3rd party library, which outputs a QR code from an input byte array. A solid understanding of parsing strings to byte array, and rendering the resultant byte array as an image is needed. In the UI implementation, the resolution of the QR code is adjusted according to the amount of data contained by the QR code to optimise QR code scan success rate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "** Credits: ZXing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *Minor enhancement*: Added *sorting of deadline and events via various sort criteria like name, due date, and priority.* This helps the user to navigate their deadlines and events with ease."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003ddon-tay\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026since\u003d2020-02-14\u0026until\u003d2020-04-10\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddon-tay\u0026tabRepo\u003dAY1920S2-CS2103T-T10-4%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Managed release `v1.3` on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Updated the GUI display for deadline priority (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/185[#185])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Wrote all edit command and logic for modules, activities, deadlines, and events (Pull requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/113[#113] https://github.com/AY1920S2-CS2103T-T10-4/main/pull/260[#260])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 62.3% to 69.4% (Pull requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/113[#113])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Add regeneration helper class for teammate\u0027s repeat feature (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/103[#103])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Added scrollable grid UI for calendar (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/280[#280])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Wrote the in-depth architectural breakdown of the NASA Model component (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/294[#294])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Wrote the team\u0027s Developer Guide Non-Functional Requirements (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/57[#57])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Wrote the FAQ section for the User Guide (Pull request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/159/files[#159])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "https://github.com/AY1920S2-CS2103T-T10-4/main/pull/104[#104],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "https://github.com/AY1920S2-CS2103T-T10-4/main/pull/115[#115],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "https://github.com/AY1920S2-CS2103T-T10-4/main/pull/126[#126],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "https://github.com/AY1920S2-CS2103T-T10-4/main/pull/155[#155]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (example:  https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/36#pullrequestreview-381674310[#36])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "*** Integrated a third party library (ZXing) to the project (https://github.com/AY1920S2-CS2103T-T10-4/main/pull/263[#263])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaq]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodelid]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfr]"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 2,
      "kester-ng": 1,
      "-": 39,
      "don-tay": 38
    }
  },
  {
    "path": "docs/team/edmond-ong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d Edmond Ong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d PROJECT: Nice and Amazing Student Assistant (NASA)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Nice \u0026 Amazing Student Assistant (NASA) is an application for busy university students to manage their module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "assignments, lessons, exams and consultations etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* *Major enhancement*: added *ability to re-schedule an activity for a period of time (weekly, fortnightly, monthly).*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** What is does: allows user to repeat a certain activity for as long as the user wants."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Justification: save the amount of time user spent on doing repetitive tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Future enhancement: allow more flexibility for users to specify specific days to repeat instead of current presets"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "of (weekly, fortnightly and monthly)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** What it does: allow user to restore the previous state of Nasa and previous appearance of UI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Justification: This feature allows user to rectify the error made."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "** Highlights: Current implementation fits the following functionality of Nasa, however when more functions is added in v2.0, update will be needed on the code for tracking the UI looks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* *Minor enhancement*: involve in building Models from scratch."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* *Minor enhancement*: added a quote command that aims to motivate the user before he/she starts to get into work."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dEdmondOng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** Added sample data for using application for the first-time (Pull requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/255[#255])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** In charge of initialisation testing (Pull requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/303[#303])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** In charge of models, wrote base code and test for Models (Pull requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/86[#86] https://github.com/AY1920S2-CS2103T-T10-4/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/101[#101])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** Contribute to adjusting new commands to the User Guide: https://github.com/AY1920S2-CS2103T-T10-4/main/pull/283[#283]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-T10-4/main/pull/99[#99], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/92[#92], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/115[#115], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/103[#103]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "*** Suggestions for for enhancement (examples: https://github.com/AY1920S2-CS2103T-T10-4/main/issues/266[#266])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dautomation]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquote]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautomation]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquote]"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 31,
      "kester-ng": 1,
      "-": 40
    }
  },
  {
    "path": "docs/team/kester-ng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d Ng Yi Long, Kester - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003d\u003d PROJECT: Nice and Amazing Student Assistant (NASA)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "Nice \u0026 Amazing Student Assistant (NASA) is an application for busy university students to manage their module"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "assignments, lessons, exams and consultations etc."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003d\u003d Code Contribution"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "Click on the following link to see the code contributed to the project on RepoSENSE. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dkester-ng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code Contribution]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Major Enhancement*: Added Calendar view for activities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** What it does: Allows users to see their activities displayed onto a calendar."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Justification: This feature allows users to be able to see upcoming activities for upcoming week etc which allows them to better plan their schedule."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Highlights: The calendar Ui and view was created from scratch. There are many challenges involved in this enhancement:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Populating the calendar grids with the correct dates were difficult as there were many conditions to take note of, examples include what day does the month start, is it leap year this year etc."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Populating the grids with the deadlines was not very difficult. But events was very difficult. As events can span from start date to end date, making sure the events are populated on the calendar during this time interval was very tedious as there are many conditions to take note of."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Syncing with the user input was also not very easy, given our model structure. Adding event-listeners had to be done in a proper way to ensure the calendar syncs with the current state of the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Major enhancement*: added the ability for users to export the calendar onto a .ics file for portability"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** What it does: Allows users to export the current calendar in the application onto a .ics file for use in other calendar applications."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Justification: While the calendar view is useful, there are certain dedicated calendar applications with more features. And hence being able to export the calendar view to their favourite calendar app will make user experience better. In addition, it is more convenient as it allows the calendar to be viewed on multiple devices and platforms or shared among others."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "** Highlights: The following enhancement was also very challenging. Understanding the format and how to write .ics file was not easy. Secondly, writing the logic on how deadline and events are to be displayed took a bit of thinking. Lastly, being able to have auto-rescheduling of events/deadlines also required quite a bit of effort as well."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Minor enhancement*: Updated list command to be able to filter based on modules."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Minor enhancement*: Updated the find command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Minor enhancement*: Added all the CRUD functionality for the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "* *Minor enhancement*: Added a refresh command that allows users to refresh to update the UI statuses."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Fixed GUI display of calendar not syncing properly with the tab/command box. (Pull Requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/272[#272])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Fixed bugs related to model, commands and UI. (Pull Requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/262[#262], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/256[#256], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/163[#163], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/146[#146], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/132[#132])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Added logic for commands, parsers and JUNIT tests for them. (Pull Requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/246[#246], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/178[#178], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/100[#100], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/94[#94])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Refactored the whole code base. (Pull Requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/246[#246], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/90[#90])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Updated basic command usage, test cases for DG and updated images for UG and DG. (Pull Requests https://github.com/AY1920S2-CS2103T-T10-4/main/pull/22[#22], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/65/files[#65], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/168[#168])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Updated DG with proper UML diagrams. (Pull Request https://github.com/AY1920S2-CS2103T-T10-4/main/pull/151[#151])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** UML diagrams for DG includes the adding deadline, export calendar and reminder features."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Updated UG commands for adding activities, find, list, delete activities, calendar and reminder features."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** PRs reviewed (with non-trivial comments): https://github.com/AY1920S2-CS2103T-T10-4/main/pull/263[#263], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/77[#77], https://github.com/AY1920S2-CS2103T-T10-4/main/pull/142[#142]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Reported bugs for teammates (Example: https://github.com/AY1920S2-CS2103T-T10-4/main/issues/249[#249])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*** Integrated travis, appveyor, coverage/coveralls, codeacy into project."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddeadlines]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminder]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 2,
      "kester-ng": 42,
      "-": 38
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import seedu.address.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Create a new `Remark` in `seedu.address.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 421
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "`nasa.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 257
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param parameters Application.Parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return AppParameters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 1,
      "-": 61,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/nasa/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.NasaBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NASA ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(userPrefs.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                userPrefs.getHistoryBookFilePath(), userPrefs.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s NASA and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The data from the sample NASA will be used instead if {@code storage}\u0027s NASA is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an empty NASA will be used instead if errors occur when reading {@code storage}\u0027s NASA."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cReadOnlyNasaBook\u003e nasaBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e historyBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e uiHistoryBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyNasaBook initialNasaBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyHistory initialHistoryBook;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyHistory initialUiHistoryBook;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBookOptional \u003d storage.readNasaBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyBookOptional \u003d storage.readHistoryBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            uiHistoryBookOptional \u003d storage.readUiHistoryBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (!nasaBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample NasaBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!historyBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample HistoryBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!uiHistoryBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample UiHistoryBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d nasaBookOptional.orElseGet(SampleDataUtil::getSampleNasaBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d historyBookOptional.orElseGet(SampleDataUtil::getSampleHistoryBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d uiHistoryBookOptional.orElseGet(SampleDataUtil::getSampleUiHistoryBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialUiHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new ModelManager(initialNasaBook, initialHistoryBook, initialUiHistoryBook, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param configFilePath Path"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Config"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param storage UserPrefsStorage"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UserPrefs"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NASA\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"Starting NASA \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NASA ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33,
      "EdmondOng": 38,
      "-": 139,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //Fills up entire screen when programme starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getHeight();;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getWidth();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "-": 70,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String LOG_FILE \u003d \"nasa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "kester-ng": 10,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Integer.toString(this.zeroBasedIndex + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 53,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 81,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.BarcodeFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.WriterException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.client.j2se.MatrixToImageWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.common.BitMatrix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import com.google.zxing.qrcode.QRCodeWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the byte array representation of the QR-encoding of {@code text}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param text String to be encoded."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param length Size of the QR code."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return Byte array of the QR-encoding of text."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static byte[] toQr(String text, int length) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            QRCodeWriter qrCodeWriter \u003d new QRCodeWriter();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            BitMatrix bitMatrix \u003d qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, length, length);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ByteArrayOutputStream pngOutStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            MatrixToImageWriter.writeToStream(bitMatrix, \"png\", pngOutStream);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return pngOutStream.toByteArray();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (WriterException | IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new byte[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 66,
      "don-tay": 27
    }
  },
  {
    "path": "src/main/java/nasa/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the NasaBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see nasa.model.Model#getNasaBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the user prefs\u0027 NASA file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/nasa/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.NasaBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser nasaBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookParser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    model.getHistoryManager().getUiHistoryBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"-------------------Error while setting up logic manager\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Command command \u003d nasaBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    model.getHistoryManager().getUiHistoryBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return model.getModule(moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 77,
      "EdmondOng": 9,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Calendar ics class, writes all the events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * and deadlines into .ics folder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsCalendar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to write all events and deadlines to ics file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath path for ics file to be written to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadlines all the deadline in the nasabook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param events all the event in the nasabook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void writeToIcsFile(Path filepath, HashMap\u003cModuleCode, ArrayList\u003cDeadline\u003e\u003e deadlines,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                      HashMap\u003cModuleCode, ArrayList\u003cEvent\u003e\u003e events) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        File file \u003d new File(String.valueOf(filepath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            file.mkdir(); // make sure can write to something"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(String.valueOf(filepath.resolve(\"nasa.ics\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"BEGIN:VCALENDAR\" + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"VERSION:2.0\" + System.lineSeparator());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"PRODID:-//NASA//CS2103T//EN\" + System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // write deadlines in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (ModuleCode moduleCode : deadlines.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cDeadline\u003e moduleDeadlines \u003d deadlines.get(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Deadline deadline : moduleDeadlines) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                fileWriter.write(new IcsDeadline(deadline, moduleCode).getIcsFormat());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // followed by event"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (ModuleCode moduleCode : events.keySet()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cEvent\u003e moduleEvents \u003d events.get(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Event event : moduleEvents) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                fileWriter.write(new IcsEvent(event, moduleCode).getIcsFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // end the calendar ics file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.write(\"END:VCALENDAR\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 59
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * For deadline, put it as an a VTODO."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsDeadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String ICS_TYPE \u003d \"VTODO\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private IcsSchedule icsSchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline deadline to be converted to ics"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode moduleCode the deadline belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsDeadline(Deadline deadline, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(deadline, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadline.isDone()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"COMPLETED\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (deadline.isOverdue()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"NEEDS-ACTION\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            status \u003d \"IN-PROCESS\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsSchedule \u003d new IcsSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the ics format representation of deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return string format for deadline for ics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String icsFormat \u003d \"BEGIN:\" + ICS_TYPE + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"UID:\" + uuid.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DUE;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + deadline.getDueDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (icsSchedule.hasSchedule()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            icsFormat +\u003d icsSchedule.getIcsRule() + System.lineSeparator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsFormat +\u003d \"SUMMARY:\" + String.format(\"[%s] \", moduleCode.toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + deadline.getName().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DESCRIPTION:\" + deadline.getNote().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"STATUS:\" + status + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"END:\" + ICS_TYPE + System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return icsFormat;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 65
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to convert event to ics event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsEvent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String ICS_TYPE \u003d \"VEVENT\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UUID uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private IcsSchedule icsSchedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be formatted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode moduleCode the event belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsEvent(Event event, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(event, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.icsSchedule \u003d new IcsSchedule(event.getSchedule());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the ics format for event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String format for event for ics"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String icsFormat \u003d \"BEGIN:\" + ICS_TYPE + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"UID:\" + uuid.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTSTAMP:\" + (LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\")))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTSTART;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getStartDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DTEND;TZID\u003dAsia/Singapore:\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getEndDate().getDate().format(DateTimeFormatter.ofPattern(\"yyyyMMdd\u0027T\u0027HHmmss\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (icsSchedule.hasSchedule()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            icsFormat +\u003d icsSchedule.getIcsRule() + System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        icsFormat +\u003d \"SUMMARY:\" + String.format(\"[%s] \", moduleCode.toString())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + event.getName().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"DESCRIPTION:\" + event.getNote().toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"END:\" + ICS_TYPE + System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return icsFormat;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 62
    }
  },
  {
    "path": "src/main/java/nasa/logic/calendar/IcsSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to get ics rule for scheduling of events/deadlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class IcsSchedule {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param schedule schedule of the activity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public IcsSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * If the activity has a schedule."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if have, else false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasSchedule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(schedule.getType() \u003d\u003d 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the Ics rule for auto-scheduling"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String ics format for scheduling"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getIcsRule() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String frequency \u003d \"RRULE:FREQ\u003d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int type \u003d schedule.getType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"WEEKLY;INTERVAL\u003d2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            frequency +\u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 44
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Clears the nasa book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": clears NASA\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: none\\nExample: clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"NASA has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "kester-ng": 19
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/CommandHint.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Dictionary of commands and their message usage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandHint {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e commandList \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddDeadlineCommand.COMMAND_WORD, AddDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddEventCommand.COMMAND_WORD, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(AddModuleCommand.COMMAND_WORD, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteModuleCommand.COMMAND_WORD, DeleteModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditModuleCommand.COMMAND_WORD, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ClearCommand.COMMAND_WORD, ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ContinueCommand.COMMAND_WORD, ContinueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteDeadlineCommand.COMMAND_WORD, DeleteDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DeleteEventCommand.COMMAND_WORD, DeleteEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(DoneCommand.COMMAND_WORD, DoneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditDeadlineCommand.COMMAND_WORD, EditDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(EditEventCommand.COMMAND_WORD, EditEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ExportCalendarCommand.COMMAND_WORD, ExportCalendarCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ExportQrCommand.COMMAND_WORD, ExportQrCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(FindCommand.COMMAND_WORD, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(HelpCommand.COMMAND_WORD, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ListCommand.COMMAND_WORD, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(QuoteCommand.COMMAND_WORD, QuoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RedoCommand.COMMAND_WORD, RedoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RefreshCommand.COMMAND_WORD, RefreshCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RepeatDeadlineCommand.COMMAND_WORD, RepeatDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(RepeatEventCommand.COMMAND_WORD, RepeatEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(SortCommand.COMMAND_WORD, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(UndoCommand.COMMAND_WORD, UndoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            put(ViewCommand.COMMAND_WORD, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static HashMap\u003cString, String\u003e getCommandList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 47
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final byte[] EMPTY_BYTE_ARRAY_DATA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EMPTY_BYTE_ARRAY_DATA \u003d new byte[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean calendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** The application should show statistics. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean statistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /** Qr code should be shown to the user. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final boolean showQr;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /** Qr code data to show */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final byte[] qrData;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The application should show quote."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean quote;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param feedbackToUser String"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param showHelp boolean"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param exit boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                         boolean modules, boolean calendar, boolean statistics, boolean showQr,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                         byte[] qrData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.quote \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.showQr \u003d showQr;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.qrData \u003d qrData;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param feedbackToUser String"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false, EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public byte[] getQrData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return qrData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isModules() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isCalendar() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isStatistics() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isQuote() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return quote;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isShowQr() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return showQr;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Make quote property true."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setQuote() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.quote \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 showQr \u003d\u003d otherCommandResult.showQr;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showQr);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 28,
      "EdmondOng": 4,
      "kester-ng": 83,
      "don-tay": 26
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ContinueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Sets an activity to undone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"continue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Sets index of deadline in module\u0027s deadline\u0027s list to being undone or incomplete.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: INDEX \" + PREFIX_MODULE + \" MODULE CODE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_MODULE + \"CS2030\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline set to undone!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Activity not found in module\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module not found!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ALREADY_UNDONE \u003d \"Deadline is already undone!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ContinueCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // get module and check if the activity index exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (index.getZeroBased() \u003e module.getDeadlineList().getActivityList().size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"continue\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (!deadline.isDone()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_ALREADY_UNDONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d new Deadline(deadline.getName(), deadline.getDateCreated(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getNote(), deadline.getPriority(), deadline.getDueDate(), false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.setDeadline(moduleCode, deadline, deadlineCopy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, deadline));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof ContinueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((ContinueCommand) other).index)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 moduleCode.equals(moduleCode)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 76
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to delete deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del-d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Deletes the activities identified by the index numbers used in the displayed deadline list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX (must be a positive integer) \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE + \"CS3233\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"%d. %s is successfully deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Deadline indicated does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module does not exist!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteDeadlineCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.removeDeadline(moduleCode, deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_DEADLINE_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    index.getOneBased(), deadline.getName().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both DeleteDeadlineCommand has the same index and module code."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof DeleteDeadlineCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteDeadlineCommand command \u003d (DeleteDeadlineCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.equals(((DeleteDeadlineCommand) other).moduleCode)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteDeadlineCommand) other).index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 75
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to delete event command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del-e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Deletes the event identified by the index numbers used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX (must be a positive integer) \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE + \"CS3233\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"%d. %s is successfully deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Event indicated does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module does not exist!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteEventCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event event \u003d module.getFilteredEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.removeEvent(moduleCode, event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, index.getOneBased(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getName().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both DeleteDeadlineCommand has the same index and module code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof DeleteEventCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.equals(((DeleteEventCommand) other).moduleCode)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DeleteEventCommand) other).index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 74
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Sets an activity to done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \": Sets index of deadline in module to being done or completed.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: \" + \"INDEX \" + PREFIX_MODULE + \"MODULE CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example \" + COMMAND_WORD + \" 2 \" + PREFIX_MODULE + \"CS2030\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline set to done!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Activity not found in module\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module not found!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_ALREADY_DONE \u003d \"Deadline already set to done!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DoneCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // get module and check if the activity index exist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module module \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (index.getZeroBased() \u003e module.getDeadlineList().getActivityList().size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // check if activity already done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d module.getFilteredDeadlineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"done\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (deadline.isDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_ALREADY_DONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d new Deadline(deadline.getName(), deadline.getDateCreated(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getNote(), deadline.getPriority(), deadline.getDueDate(), true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.setDeadline(moduleCode, deadline, deadlineCopy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, deadline));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 index.equals(((DoneCommand) other).index)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 moduleCode.equals(moduleCode)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 80
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a specific deadline in the moduleCode\u0027s list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deadline identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the index number used in the displayed moduleCode\u0027s deadline list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DUE DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Assignment 2.3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_DEADLINE_SUCCESS \u003d \"Edited Deadline successfully.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_PAST_DEADLINE \u003d \"Cannot edit deadline to a date that has passed.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditDeadlineCommand.EditDeadlineDescriptor editDeadlineDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditDeadlineCommand to edit a deadline"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * with the specified {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param index index of the deadline item as specified in the corresponding module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code which the deadline item is found in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editDeadlineDescriptor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditDeadlineCommand(Index index, ModuleCode moduleCode, EditDeadlineDescriptor editDeadlineDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(index, moduleCode, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editDeadlineDescriptor \u003d new EditDeadlineDescriptor(editDeadlineDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCode)) { // throw exception if module code is not found in nasa book"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cDeadline\u003e lastShownList \u003d model.getFilteredDeadlineList(moduleCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline deadlineToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(deadlineToEdit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline editedDeadline \u003d createEditedDeadline(deadlineToEdit, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // check due date validity only when due date is edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isDueDateEdited() \u0026\u0026 !editedDeadline.isValidDeadline(editedDeadline.getDueDate())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_PAST_DEADLINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edit made to deadline is exactly the same"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (deadlineToEdit.isSameDeadline(editedDeadline)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedDeadline.setSchedule(deadlineToEdit.getSchedule());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setDeadline(moduleCode, deadlineToEdit, editedDeadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DEADLINE_SUCCESS, editedDeadline));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns an {@code Deadline} with the details of {@code deadlineToEdit}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Deadline createEditedDeadline(Deadline deadlineToEdit,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                                 EditDeadlineDescriptor editDeadlineDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(deadlineToEdit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name updatedName \u003d editDeadlineDescriptor.getName().orElse(deadlineToEdit.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // by default date created cannot be edited, and will take previous value"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDateCreated \u003d editDeadlineDescriptor.getDateCreated().orElse(deadlineToEdit.getDateCreated());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Note updatedNote \u003d editDeadlineDescriptor.getNote().orElse(deadlineToEdit.getNote());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Priority updatedPriority \u003d editDeadlineDescriptor.getPriority().orElse(deadlineToEdit.getPriority());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDueDate \u003d editDeadlineDescriptor.getDueDate().orElse(deadlineToEdit.getDueDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Deadline(updatedName, updatedDateCreated, updatedNote, updatedPriority, updatedDueDate,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                deadlineToEdit.isDone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if due date has been edited and returns true. Else, false."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if {@code editDeadlineDescriptor} is updated with new due date. Else, return false."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isDueDateEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.editDeadlineDescriptor.getDueDate().isPresent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 index.equals(((EditDeadlineCommand) other).index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditDeadlineCommand) other).moduleCode)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editDeadlineDescriptor.equals(((EditDeadlineCommand) other).editDeadlineDescriptor));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the deadline with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the moduleCode."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditDeadlineDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dateCreated;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dueDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditDeadlineDescriptor() {}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditDeadlineDescriptor(EditDeadlineCommand.EditDeadlineDescriptor toCopy) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDateCreated(toCopy.dateCreated);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDueDate(toCopy.dueDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateCreated, note, priority, dueDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDateCreated() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dateCreated);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDueDate() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dueDate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditDeadlineCommand.EditDeadlineDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditDeadlineCommand.EditDeadlineDescriptor e \u003d (EditDeadlineCommand.EditDeadlineDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDateCreated().equals(e.getDateCreated())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDueDate().equals(e.getDueDate());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 27,
      "don-tay": 217
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a specific event in the moduleCode\u0027s list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the index number used in the displayed moduleCode\u0027s event list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_START_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_END_DATE + \"20-05-2020 23:59 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Assignment 2.3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event successfully.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_PAST_EVENT \u003d \"Cannot edit event to an end date that has passed.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Cannot edit event to have end date before start date.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditEventCommand.EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditEventCommand to edit a event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * with the specified {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param index index of the event item as specified in the corresponding module"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code which the event item is found in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editEventDescriptor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditEventCommand(Index index, ModuleCode moduleCode, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(index, moduleCode, editEventDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCode)) { // throw exception if module code is not found in nasa book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList(moduleCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editedEvent.isValidStartEndDates(editedEvent.getStartDate(), editedEvent.getEndDate())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // check end date validity only when end date is edited"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isEndDateEdited() \u0026\u0026 !editedEvent.isValidFutureEvent(editedEvent.getEndDate())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_PAST_EVENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (eventToEdit.isSameEvent(editedEvent)) { // if edit is exactly the same as the original"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedEvent.setSchedule(eventToEdit.getSchedule());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setEvent(moduleCode, eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns an {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDateCreated \u003d editEventDescriptor.getDateCreated().orElse(eventToEdit.getDateCreated());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Note updatedNote \u003d editEventDescriptor.getNote().orElse(eventToEdit.getNote());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedStartDate \u003d editEventDescriptor.getStartDate().orElse(eventToEdit.getStartDate());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedEndDate \u003d editEventDescriptor.getEndDate().orElse(eventToEdit.getEndDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Event(updatedName, updatedDateCreated, updatedNote, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if end date has been edited and returns true. Else, false."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if {@code editEventDescriptor} is updated with new end date. Else, return false."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isEndDateEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.editEventDescriptor.getEndDate().isPresent();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 index.equals(((EditEventCommand) other).index)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditEventCommand) other).moduleCode)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(((EditEventCommand) other).editEventDescriptor));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the moduleCode."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date dateCreated;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditEventDescriptor(EditEventCommand.EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDateCreated(toCopy.dateCreated);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateCreated, note, priority, startDate, endDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDateCreated() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(dateCreated);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditEventCommand.EditEventDescriptor)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditEventCommand.EditEventDescriptor e \u003d (EditEventCommand.EditEventDescriptor) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getDateCreated().equals(e.getDateCreated())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 26,
      "don-tay": 233
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting NASA as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, true, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 15,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExportCalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.calendar.IcsCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Exports current calendar to ics format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the command for exporting of calendar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports calendar to .ics format\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Parameters: FILEPATH\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" f/./Data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to export calendar!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully exported calendar!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Path filepath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath filepath to write the ics file to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ExportCalendarCommand(Path filepath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            filepath \u003d model.getUserPrefs().getCalendarExportPath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            HashMap\u003cModuleCode, ArrayList\u003cDeadline\u003e\u003e deadlines \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            HashMap\u003cModuleCode, ArrayList\u003cEvent\u003e\u003e events \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cDeadline\u003e moduleDeadlines \u003d new ArrayList\u003c\u003e(module.getFilteredDeadlineList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cEvent\u003e moduleEvents \u003d new ArrayList\u003c\u003e(module.getFilteredEventList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlines.put(module.getModuleCode(), moduleDeadlines);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                events.put(module.getModuleCode(), moduleEvents);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            IcsCalendar.writeToIcsFile(filepath, deadlines, events);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof ExportCalendarCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((ExportCalendarCommand) other).filepath \u003d\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filepath.equals(((ExportCalendarCommand) other).filepath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 87
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExportQrCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Format contents of NasaBook to Qr code for export."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class ExportQrCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the deadlines and events to QR code.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"QR code generated.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String STRING_DELIMITER \u003d \"****************\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String DEFAULT_INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(STRING_DELIMITER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(module.toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d model.getFilteredDeadlineList(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d model.getFilteredEventList(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\"Deadlines\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (deadlineObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"No deadlines for this module.\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            for (Deadline d : deadlineObservableList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                int index \u003d deadlineObservableList.indexOf(d) + 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(index).append(\". \").append(d.getName().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(d.getDueDate().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"Priority: \").append(d.getPriority().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (!isEmptyNoteString(d.getNote().toString())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(d.getNote().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (d.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(\"DONE\").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\"Events\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (eventObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(\"No events for this module.\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            for (Event e : eventObservableList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                int index \u003d eventObservableList.indexOf(e) + 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(index).append(\". \").append(e.getName().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                sb.append(DEFAULT_INDENTATION).append(e.getStartDate().toString()).append(\" to \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        .append(e.getEndDate().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (!isEmptyNoteString(e.getNote().toString())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    sb.append(DEFAULT_INDENTATION).append(e.getNote().toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, false, true,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                StringUtil.toQr(sb.toString(), 500));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if note is empty, given by {@code Activity.EMPTY_NOTE_STRING}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param str note string to be tested."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if note is empty (ie. \"-\"), else false."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isEmptyNoteString(String str) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (str.equals(Activity.EMPTY_NOTE_STRING)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "don-tay": 95
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Finds and lists all activities in NASA whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the command for finding specific activities."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all activities whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" assignment lab tutorial\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_REFRESH \u003d \"Screen has been refreshed.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Predicate predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand(Predicate predicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateHistory(\"find\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            getNumberOfFilteredActivities(model.getFilteredModuleList())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getNumberOfFilteredActivities(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int numberOfActivities \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            numberOfActivities +\u003d module.getFilteredDeadlineList().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            numberOfActivities +\u003d module.getFilteredEventList().size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return numberOfActivities;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 5,
      "kester-ng": 60
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all modules.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: m/[MODULE_CODE]\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ListCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.updateHistory(\"list\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            list.add(moduleCode.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.updateFilteredModuleList(new NameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.updateHistory(\"list\" + model.currentUiLocation());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(moduleCode + \" listed successfully!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return new CommandResult(\"Module cannot be found!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 48,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/QuoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command class to activate quote."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class QuoteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quote\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": quote.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String quoteMessage \u003d model.quote();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        CommandResult result \u003d new CommandResult(quoteMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        result.setQuote();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 3,
      "kester-ng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to handle redo previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redo latest action.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"No last action to redo.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.redoHistory()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RefreshCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Command to refresh the page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class RefreshCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refresh\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": refresh data.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: none\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Refreshed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Refreshed failed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // show all activities and modules"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredModuleList(model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //model.updateSchedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // now update all deadlines and events"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            model.updateSchedule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cDeadline\u003e deadlines \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cEvent\u003e events \u003d module.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Deadline deadline : deadlines) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Deadline deadlineCopy \u003d new Deadline(deadline.getName(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.getDateCreated(), deadline.getNote(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.getPriority(), deadline.getDueDate(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        deadline.isDone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadlineCopy.setSchedule(deadline.getSchedule());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    model.setDeadline(module.getModuleCode(), deadline, deadlineCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Event event : events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Event eventCopy \u003d new Event(event.getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        event.getStartDate(), event.getEndDate(), event.getNote());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    eventCopy.setSchedule(event.getSchedule());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    model.setEvent(module.getModuleCode(), event, eventCopy); // auto set to its done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 2,
      "kester-ng": 57
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RepeatDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Repeat an activity for a week, twice a week or monthly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat-d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": repeat a deadline activity.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Parameters: ITEM_INDEX m/MODULE_CODE r/REPETITION (0: cancel, 1: weekly, 2: biweekly, 3: monthly)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for monthly repetition: \" + COMMAND_WORD + \" 1 m/CS3233 r/3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added a repeat!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unsuccessfully added. Please check for correctness in module code or\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"activity name.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_NO_MODULE \u003d \"No such module, try again with a correct module.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatDeadlineCommand(ModuleCode module, Index index, Index schedule) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module, index, schedule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.setDeadlineSchedule(module, index, schedule)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new CommandResult(String.format(\"%s for %s %s %s\", MESSAGE_SUCCESS, module, index.getZeroBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    schedule.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof RepeatDeadlineCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 module.equals(((RepeatDeadlineCommand) other).module)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 index.equals(((RepeatDeadlineCommand) other).index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 schedule.equals(((RepeatDeadlineCommand) other).schedule));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return String.format(\"%s %d %d\", module, index.getZeroBased(), schedule.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 66
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RepeatEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Repeat an activity for a week, twice a week or monthly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat-e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": repeat a event activity.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Parameters: ITEM_INDEX m/MODULE_CODE r/REPETITION (0: cancel, 1: weekly, 2: biweekly, 3: monthly)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for monthly repetition: \" + COMMAND_WORD + \" 1 m/CS3233 r/3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added a repeat!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unsuccessfully added. Please check for correctness in module code or\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"activity name.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_NO_MODULE \u003d \"No such module, try again with a correct module.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatEventCommand(ModuleCode module, Index index, Index schedule) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module, index, schedule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (model.setEventSchedule(module, index, schedule)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new CommandResult(String.format(\"%s for %s %s %s\", MESSAGE_SUCCESS, module, index.getZeroBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    schedule.getZeroBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof RepeatEventCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 module.equals(((RepeatEventCommand) other).module)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 index.equals(((RepeatEventCommand) other).index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 schedule.equals(((RepeatEventCommand) other).schedule));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return String.format(\"%s %s %d\", module, index.getZeroBased(), schedule.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 66
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all deadlines and events according to the \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"the method specified.\\nParameters: SORT_METHOD\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"priority\";;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all deadlines and events successfully.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final SortMethod sortMethod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethod \u003d sortMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.sortActivityList(sortMethod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 sortMethod.equals(((SortCommand) other).sortMethod)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 41
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"These are the statistics.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Predicate\u003cDeadline\u003e deadlinePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public StatisticsCommand(Predicate\u003cDeadline\u003e deadlinePredicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadlinePredicate \u003d deadlinePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //model.updateFilteredD(deadlinePredicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, true, false,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 27,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to undo the previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo latest action.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: None \\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Undo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.undoHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/* @@author CharmaineKoh */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Switches view to specified tabPane."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change view to specified tab.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"\\nParameters: TAB_NAME\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"statistics\";;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changed view to %s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final View tabName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ViewCommand(View tabName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, tabName.toString().toLowerCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (tabName \u003d\u003d View.MODULES) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, true, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (tabName \u003d\u003d View.CALENDAR) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(message,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    false, false, false, false, true, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 45
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds any activity to a module\u0027s activity list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_ACTIVITY \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"This activity already exist in the module\u0027s activity list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"The module does not exist!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Activity toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code activity} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity Activity to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the activity is to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddCommand(Activity activity, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((AddCommand) other).moduleCode));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds a deadline task to a module\u0027s list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline added!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"NOTE \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"20-05-2020 02:30 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"SEA Group Programming Assignment \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Focus on computational geometry and DP.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code deadline} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline Deadline task to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where deadline is to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand(Deadline deadline, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "       super(deadline, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addDeadline(moduleCode, (Deadline) toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 52
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds an event activity to a module\u0027s list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"NOTE\" + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_START_DATE + \"12-05-2020 02:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_END_DATE + \"12-05-2020 04:00 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"CP contest  \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Remember to study content before coming.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code event} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event Event to be added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the event is to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand(Event event, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(event, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addEvent(moduleCode, (Event) toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 51
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds a module to NASA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to NASA. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Competitive Programming\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module %s added!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_MODULE \u003d \"This module already exist!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module Module to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 18,
      "kester-ng": 42
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Deletes a module identified using it\u0027s code from NASA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Deletes the module specified by the code in NASA.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[MODULE_CODE]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"CS2030\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"%1$s is deleted successfully!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Module indicated does not exist!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleToDelete;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a DeleteModuleCommand to delete the specified {@code module}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteModuleCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleToDelete \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(moduleToDelete)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleToDelete.equals(((DeleteModuleCommand) other).moduleToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13,
      "kester-ng": 42,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/module/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a module in the NASA book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the module code in the displayed NASA application. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"[\" + PREFIX_MODULE_NAME + \"MODULE NAME]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"CS2020 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Data Structures and Algorithms\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String EXCESS_MODULE_CODE \u003d \"Failed to edit module code. EXACTLY 2 module codes must be \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"entered to edit module code.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_NO_NEW_EDIT \u003d \"No new field is being edited.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditModuleCommand.EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates an EditModuleCommand to edit a module at specified {@code index}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode Module code of the module to be edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editModuleDescriptor EditModuleDescriptor helper to edit the module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleCommand(ModuleCode moduleCode, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCodeToEdit \u003d this.moduleCode;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module moduleToEdit \u003d model.getModule(moduleCodeToEdit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when module to be edited is not found in the NasaBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!model.hasModule(moduleCodeToEdit)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edit made is exactly the same as original"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleToEdit.equals(editedModule)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_NO_NEW_EDIT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when edited module exists in model, and module is not target {@code moduleCodeToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!moduleCodeToEdit.equals(editedModule.getModuleCode()) \u0026\u0026 model.hasModule(editedModule.getModuleCode())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setModule(moduleToEdit.getModuleCode(), editedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                             EditModuleCommand.EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleName updatedModuleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getModuleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d moduleToEdit.getDeadlineList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cDeadline\u003e obsDeadlineList \u003d moduleToEdit.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueEventList eventList \u003d moduleToEdit.getEventList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cEvent\u003e obsEventList \u003d moduleToEdit.getFilteredEventList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module newModule \u003d new Module(updatedModuleCode, updatedModuleName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setDeadlines(deadlineList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setDeadlines(obsDeadlineList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setEvents(eventList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setEvents(obsEventList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof EditModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditModuleCommand) other).moduleCode)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(((EditModuleCommand) other).editModuleDescriptor));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor(EditModuleCommand.EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleCode, moduleName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditModuleCommand.EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditModuleCommand.EditModuleDescriptor e \u003d (EditModuleCommand.EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode()) \u0026\u0026 getModuleName().equals(e.getModuleName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 7,
      "don-tay": 180
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the first value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Optional\u003cString\u003e getFirstValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 59,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITY_NAME \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_REPEAT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"-e\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 4,
      "kester-ng": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ContinueCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a ContinueCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandParser implements Parser\u003cContinueCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ContinueCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a ContinueCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ContinueCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ContinueCommand(index, moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code DeleteDeadlineCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommandParser implements Parser\u003cDeleteDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input argument and returns a {@code DeleteDeadlineCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input argument"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code DeleteDeadlineCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteDeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * If PREFIX_MODULE exist, then return DeleteActivityCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * else throw exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteDeadlineCommand(index, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 52,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Constructor to delete an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input argument and returns a {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input argument"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code DeleteEventCommand}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * If PREFIX_MODULE exist, then return DeleteActivityCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * else throw exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteEventCommand(index, moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 1,
      "kester-ng": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DoneCommand(index, moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditDeadlineCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Format: edit-d INDEX"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditDeadlineCommandParser implements Parser\u003cEditDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDeadlineCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditDeadlineCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE, PREFIX_NOTE, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        PREFIX_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditDeadlineCommand.MESSAGE_USAGE, pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, ne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditDeadlineCommand.EditDeadlineDescriptor editDeadlineDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditDeadlineCommand.EditDeadlineDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setDueDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITY_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editDeadlineDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editDeadlineDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditDeadlineCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditDeadlineCommand(index, moduleCode, editDeadlineDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 17,
      "don-tay": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_NOTE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        PREFIX_PRIORITY, PREFIX_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditEventCommand.EditEventDescriptor editEventDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITY_NAME).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editEventDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditEventCommand(index, moduleCode, editEventDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 18,
      "don-tay": 56
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ExportCalendarCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and return an ExportCalendarCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandParser implements Parser\u003cExportCalendarCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCalendarCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an ExportCalendarCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ExportCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Path filepath \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            filepath \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ExportCalendarCommand(filepath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 31
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new FindCommand(new ActivityContainsKeyWordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "kester-ng": 27
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parser for {@code ListCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses user input command and returns a {@code ListCommandParser}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args user input command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return {@code ListCommandParser}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ListCommand(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 32
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/NasaBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.ExportQrCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.QuoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddDeadlineCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddEventCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.AddModuleCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.DeleteModuleCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.EditModuleCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ContinueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ContinueCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DeleteDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new EditModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case ExportQrCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new ExportQrCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ExportCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ExportCalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RepeatDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RepeatDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RepeatEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RepeatEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case QuoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new QuoteCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 80,
      "EdmondOng": 17,
      "kester-ng": 52,
      "don-tay": 9
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param userInput String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return T"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 13,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code zeroBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Index parseZeroIndex(String zeroBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedIndex \u003d zeroBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the string date is of valid form."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date of the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object created based on user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateTrimmed \u003d date.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(dateTrimmed)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Date(dateTrimmed);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String name is not empty or does not only consists of whitespaces."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name of the activity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Name object of the activity"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Name parseActivityName(String name) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameTrimmed \u003d name.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(nameTrimmed)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Name(nameTrimmed);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String note} into a {@code Note}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String note isn\u0027t empty or doesn\u0027t only contain whitespaces."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note of the activity"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note object of the activity"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteTrimmed \u003d note.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(noteTrimmed)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Note(noteTrimmed);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String priority} into a {@code Priority}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String priority is a correct integer."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priority of the activity"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Priority object of the activity"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityTrimmed \u003d priority.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Priority.isValidPriorityValue(priorityTrimmed)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Priority(priorityTrimmed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String view} into a {@code View}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String view is a valid view."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param view requested to be shown"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return View to be shown"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static View parseView(String view) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(view);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String viewTrimmed \u003d view.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!View.isValidView(viewTrimmed.toUpperCase())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(View.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return View.valueOf(view.toUpperCase());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleCode} into a {@code moduleCode}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleCode is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleCode object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleCodeTrimmed \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCodeTrimmed)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleCode(moduleCodeTrimmed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleName} into a {@code moduleName}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleName is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleName of the module"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleName object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleName parseModuleName(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameTrimmed \u003d moduleName.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleNameTrimmed)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleName(moduleNameTrimmed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the string date is of valid form."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param parameter of the user input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String object created based on user input"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static String parseStatistics(String parameter) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String parameterTrimmed \u003d parameter.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String sortMethod} into a {@code SortMethod}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String sortMethod is correct."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param sortMethod to be used to sort activity list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return SortMethod object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static SortMethod parseSortMethod(String sortMethod) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String sortMethodTrimmed \u003d sortMethod.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!SortMethod.isValidSortMethod(sortMethodTrimmed)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(SortMethod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new SortMethod(sortMethodTrimmed);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String filepath} into a {@code Path}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if string of filepath is correct."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Path parseFilePath(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            requireNonNull(filepath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String filepathTrimmed \u003d filepath.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return Paths.get(filepathTrimmed);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(\"File path is of a incorrect format\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "kester-ng": 198,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * E.g. \u0027m/\u0027 in \u0027add m/CS2103T\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/RepeatDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Parser for repeat command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatDeadlineCommandParser implements Parser\u003cRepeatDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * and returns an RepeatCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_REPEAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    RepeatDeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_MODULE, PREFIX_REPEAT};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean arePrefixesPresent \u003d Stream.of(prefixes).allMatch(prefix -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(arePrefixesPresent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index type \u003d ParserUtil.parseZeroIndex(argMultimap.getValue(PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.getZeroBased() \u003e 3 || type.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(\"Index out of bounds, please indicate [r/0 r/1 r/2 r/3]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new RepeatDeadlineCommand(moduleCode, index, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 57,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/RepeatEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Parser for repeat command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatEventCommandParser implements Parser\u003cRepeatEventCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * and returns an RepeatCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_REPEAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    RepeatEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_MODULE, PREFIX_REPEAT};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean arePrefixesPresent \u003d Stream.of(prefixes).allMatch(prefix -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(arePrefixesPresent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index type \u003d ParserUtil.parseZeroIndex(argMultimap.getValue(PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.getZeroBased() \u003e 3 || type.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(\"Index out of bounds, please indicate [r/0 r/1 r/2 r/3]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new RepeatEventCommand(moduleCode, index, type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 56,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        SortMethod sortMethod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        sortMethod \u003d ParserUtil.parseSortMethod(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new SortCommand(sortMethod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 1,
      "don-tay": 32
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/StatisticsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates an Statistics object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an StatisticsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new StatisticsCommand(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        View view;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        view \u003d ParserUtil.parseView(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new ViewCommand(view);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.addcommands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddCommandParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param argumentMultimap ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param prefixes Prefix..."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 5,
      "kester-ng": 19
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddDeadlineCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    PREFIX_ACTIVITY_NAME, PREFIX_PRIORITY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            PREFIX_DATE, PREFIX_ACTIVITY_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Deadline deadline \u003d new Deadline(activityName, dueDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadline.setNote(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadline.setPriority(priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommand(deadline, moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Deadline.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 17,
      "kester-ng": 54
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddEventCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_ACTIVITY_NAME, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_NOTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_ACTIVITY_NAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event event \u003d new Event(activityName, startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                event.setNote(note);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommand(event, moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // if the start date is \u003e end date or end date is already in the past"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "EdmondOng": 1,
      "kester-ng": 47
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddModuleCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_MODULE_NAME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "kester-ng": 39
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DeleteModuleCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT, e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12,
      "kester-ng": 28
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/module/EditModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditModuleCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Valid format: edit m/MODULE CODE [m/MODULE CODE] [n/MODULE NAME]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Exactly 1 or 2 module code must be provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Any number of module name can be provided, only the last module name will be used."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final int NUM_ARGS_TO_EDIT_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditModuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String argsWithWhitespace \u003d addStartWhitespace(args); // helper method to provide empty string as preamble arg"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(argsWithWhitespace, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    ne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e allModuleCodeParsed \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when exactly 2 module code is entered, allowing for module code to be edited"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isModuleCodeEditable(allModuleCodeParsed)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleName(ParserUtil.parseModuleName("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_MODULE_NAME).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (isExcessModuleCodeParsed(allModuleCodeParsed)) { // case when more than 2 module code provided"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                throw new ParseException((EditModuleCommand.EXCESS_MODULE_CODE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditModuleCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Helper method to add a whitespace to the start of args, as ArgumentTokenizer requires a preamble, which"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * the user input format for edit module does not have."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param args Original argument passed to EditModuleCommandParser class to be parsed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return original argument with an additional whitespace at the start"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private String addStartWhitespace(String args) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return \" \" + args;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if two module code prefixes are parsed, which indicates module code will be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If non-two \u0027/m\u0027, received, returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if exactly two module codes provided, otherwise false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isModuleCodeEditable(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003d\u003d NUM_ARGS_TO_EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if more than two module code prefixes are parsed, which indicates module code will not be edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If more than two \u0027/m\u0027, received, returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if more than two module codes provided, otherwise false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isExcessModuleCodeParsed(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003e NUM_ARGS_TO_EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13,
      "don-tay": 97
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Construct a class to store undo and redo history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryBook\u003cT\u003e implements ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistoryCollector;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistoryCollector \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook(ReadOnlyHistory\u003cT\u003e history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        resetData(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset history with new data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newData Date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetData(ReadOnlyHistory\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.setStack(newData.getModuleListHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getModuleListHistory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleListHistory(ModuleListHistory\u003cT\u003e moduleListHistory) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleListHistory \u003d moduleListHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Add recent action into history."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param item T"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.push(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistoryCollector.resetItem();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Undo previous action."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is history"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasHistory \u003d !moduleListHistory.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasHistory) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistoryCollector.pushDirectly(moduleListHistory.getPop());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.pop();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasHistory;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Redo previous action."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is undo history"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean checkItem \u003d !moduleListHistoryCollector.isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (checkItem) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.push(moduleListHistoryCollector.popDirectly());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return checkItem;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.getPop();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getUndoItem() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistoryCollector.getPop();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 90
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A wrapper class to handle various history data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryManager\u003cT\u003e implements HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryBook\u003cT\u003e historyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryBook\u003cString\u003e uiHistoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager(ReadOnlyHistory\u003cT\u003e historyBook, ReadOnlyHistory\u003cString\u003e uiHistoryBook) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBook);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(uiHistoryBook);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBook \u003d new HistoryBook\u003c\u003e(historyBook);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.uiHistoryBook \u003d new HistoryBook\u003c\u003e(uiHistoryBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getHistoryList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getModuleListHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cT\u003e getHistoryBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cString\u003e getUiHistoryBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getItem();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String getUiItem() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBook.getItem();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addUiHistory(String uiList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.add(uiList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T moduleList, String uiList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.add(moduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.add(uiList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.undo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.undo();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uiHistoryBook.redo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.redo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 65
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API of History interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean undo();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean redo();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void add(T list, String uiList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 13,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for modules that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for activities that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return GuiSettings"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param guiSettings GuiSettings"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Path"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBookFilePath Path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBookFilePath(Path nasaBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces address book data with the data in {@code nasaBook}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook ReadOnlyNasaBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBook(ReadOnlyNasaBook nasaBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the NasaBook"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyNasaBook"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the HistoryBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyHistory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyHistory getHistoryBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /** Returns the UiHistoryBook"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ReadOnlyHistory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyHistory getUiHistoryBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Getter method for existing module in model\u0027s {@code UniqueModuleList} by moduleCode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return module with module code {@code moduleCode}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    Module getModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must exist in the nasa book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target ModuleCode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void deleteModule(ModuleCode target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code module} must not already exist in the nasa book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param module Module"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the nasa book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target Module code of the module that exists in model\u0027s nasaBook"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedModule newly edited Module"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule(ModuleCode target, Module editedModule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addDeadline(ModuleCode moduleCode, Deadline deadline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addEvent(ModuleCode moduleCode, Event event);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeEvent(ModuleCode moduleCode, Event event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeDeadline(ModuleCode moduleCode, Deadline deadline);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void setEvent(ModuleCode moduleCode, Event target, Event editedEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cDeadline\u003e getFilteredDeadlineList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void sortActivityList(SortMethod sortMethod);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateSchedule();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    String quote();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    String currentUiLocation();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateHistory(String type);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateHistory(List\u003cString\u003e input, String type);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void undoHistory();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean redoHistory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean setDeadlineSchedule(ModuleCode module, Index index, Index schedule);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean setEventSchedule(ModuleCode module, Index index, Index schedule);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasActivity(ModuleCode module, Activity activity);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 127,
      "kester-ng": 29,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.quote.Quote;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the in-memory module manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryManager\u003cUniqueModuleList\u003e historyManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes a ModelManager with the given NasaBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook    ReadOnlyNasaBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param historyBook ReadOnlyHistory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs   ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        ReadOnlyHistory\u003cString\u003e uiHistoryBook,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(nasaBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Initializing with NASA: \" + nasaBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook \u003d new NasaBook(nasaBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.nasaBook.getModuleList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyManager \u003d new HistoryManager\u003c\u003e(historyBook, uiHistoryBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        initialisation();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Startup setup for Nasa book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void initialisation() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateSchedule();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"null\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update the schedule for each activity."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateSchedule() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.scheduleAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the history manager list every time there is a change."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateHistory(String type) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final UniqueModuleList temp \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setModules(nasaBook.getDeepCopyList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyManager.add(temp, type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the history manager list every time there is a change."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateHistory(List\u003cString\u003e input, String type) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final UniqueModuleList temp \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setModules(nasaBook.getDeepCopyList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        output.append(type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        input.forEach(x -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            output.append(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            output.append(x);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyManager.add(temp, output.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Refresh filter settings."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void refreshUi() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String temp \u003d historyManager.getUiItem();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cString\u003e test \u003d Arrays.asList(temp.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        System.out.println(test.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String type \u003d test.get(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!type.equals(\"null\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (test.get(1).equals(\"activity\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                test \u003d test.subList(2, test.size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                if (!test.get(0).equals(\"null\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    if (type.equals(\"list\") || type.equals(\"find\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        updateFilteredModuleList(x-\u003etrue);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        updateFilteredActivityList(new ActivityContainsKeyWordsPredicate(test));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    updateFilteredModuleList(x-\u003etrue);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            } else if (test.get(1).equals(\"module\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                List\u003cString\u003e listTemp \u003d test.subList(2, 3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                updateFilteredModuleList(new NameContainsKeywordsPredicate(listTemp));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                List\u003cString\u003e activityCurrentlyDisplayed \u003d test.subList(4, test.size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                updateFilteredActivityList(new ActivityContainsKeyWordsPredicate(activityCurrentlyDisplayed));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type.equals(\"null\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void undoHistory() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasUndoHistory \u003d historyManager.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasUndoHistory) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem().getDeepCopyList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            refreshUi();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redoHistory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasRedoHistory \u003d historyManager.redo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (hasRedoHistory) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem().getDeepCopyList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            refreshUi();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasRedoHistory;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getNasaBookFilePath();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setNasaBookFilePath(nasaBookFilePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NasaBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBook(ReadOnlyNasaBook nasaBook) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook.resetData(nasaBook);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"null\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cUniqueModuleList\u003e getHistoryBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager.getHistoryBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cString\u003e getUiHistoryBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager.getUiHistoryBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode module) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.hasModule(module);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueModuleList uniqueModuleList \u003d nasaBook.getUniqueModuleList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return uniqueModuleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void deleteModule(ModuleCode target) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModule(target);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"delete\" + currentUiLocation());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(module);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"add\" + currentUiLocation() + \" \" + module.getModuleCode().toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(ModuleCode target, Deadline deadline) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.addDeadline(target, deadline);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation() + \" \" + deadline.getName().name);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(ModuleCode target, Event event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.addEvent(target, event);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation() + \" \" + event.getName().name);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(ModuleCode target, Deadline deadline) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.removeDeadline(target, deadline);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(ModuleCode target, Event event) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.removeEvent(target, event);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"module\" + currentUiLocation());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedDeadline);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setDeadline(moduleCode, target, editedDeadline);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"deadline\" + currentUiLocation());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setEvent(ModuleCode moduleCode, Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setEvent(moduleCode, target, editedEvent);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"event\" + currentUiLocation());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Find out current UI filter property."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String currentUiLocation() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        StringBuilder location \u003d new StringBuilder();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (getFilteredModuleList().size() \u003e 1) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            //not in Find"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" activity\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            boolean test \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredDeadlineList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredDeadlineList()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            i \u003d 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredEventList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredEventList()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            System.out.println(location.toString());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!test) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                location.append(\" null\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else if (getFilteredModuleList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" module \");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(getFilteredModuleList().get(0).getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            location.append(\" activity\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            boolean test \u003d false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredDeadlineList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredDeadlineList()"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            i \u003d 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            while (i \u003c getFilteredModuleList().size()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                if (getFilteredModuleList().get(i).getFilteredEventList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    getFilteredModuleList().get(i).getFilteredEventList()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            .forEach(x-\u003e {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(\" \");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                location.append(x.getName().name);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    test \u003d true;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            System.out.println(location.toString());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!test) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                location.append(\" null\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return \" null\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return location.toString();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setDeadlineSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(module, index, type);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean hasExecuted \u003d nasaBook.setDeadlineSchedule(module, index, type);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"schedule\" + currentUiLocation());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return hasExecuted;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setEventSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(module, index, type);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean hasExecuted \u003d nasaBook.setEventSchedule(module, index, type);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory(\"schedule\" + currentUiLocation());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return hasExecuted;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return nasaBook.hasActivity(moduleCode, activity);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module module \u003d nasaBook.getModule(moduleCode);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return module.getFilteredEventList();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module module \u003d nasaBook.getModule(moduleCode);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        for (Module module : filteredModules) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            module.sortDeadlineList(sortMethod);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            module.sortEventList(sortMethod);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        updateHistory(\"sort\" + currentUiLocation());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : getFilteredModuleList()) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            module.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String quote() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Quote.getQuote();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.equals(other.nasaBook)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 282,
      "kester-ng": 53,
      "don-tay": 140
    }
  },
  {
    "path": "src/main/java/nasa/model/NasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Wraps all data at the Nasa Book Level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NasaBook implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a NasaBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toBeCopied ReadOnlyNasaBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBook(ReadOnlyNasaBook toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the {@code UniqueEventList} of module {@code moduleCode} with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueEventList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueEventList getEvents(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleList.getModule(moduleCode).getEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the contents of the activities of module {@code moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueDeadlineList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueDeadlineList getDeadlines(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleList.getModule(moduleCode).getDeadlineList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces current module list with another module list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleList must not be empty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(UniqueModuleList moduleList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single event to module {@code moduleCode} with {@code event}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code event} must not contain duplicate activities."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event      Event"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(ModuleCode moduleCode, Event event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.addEvent(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in Nasa Book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target      Event"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedEvent Event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvent(ModuleCode moduleCode, Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(moduleCode, target, editedEvent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueEventList eventList \u003d getEvents(moduleCode);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assert eventList !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivity(target, editedEvent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove a single event from module code with {@code moduleCode} with {@code event}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code event} must exist in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event      Event"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(ModuleCode moduleCode, Event event) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.removeEvent(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single deadline to module {@code moduleCode} with {@code deadline}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code deadline} must not contain duplicate activities."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline   Deadline"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(ModuleCode moduleCode, Deadline deadline) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.addDeadline(deadline);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given deadline {@code target} in the list with {@code editedDeadline}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The deadline identity of {@code editedDeadline} must not be the same as another existing deadline in Nasa Book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param target         Deadline"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedDeadline Deadline"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadline(ModuleCode moduleCode, Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(moduleCode, target, editedDeadline);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d getDeadlines(moduleCode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assert deadlineList !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivity(target, editedDeadline);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove a single deadline from module {@code module} with {@code deadline}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code deadline} must exist in the list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline   Deadline"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(ModuleCode moduleCode, Deadline deadline) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toEditModule.removeDeadline(deadline);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Resets the existing data of this {@code NasaBook} with {@code newData}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newData ReadOnlyNasaBook"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void resetData(ReadOnlyNasaBook newData) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //// module-Level operations"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if an module has the same identity as {@code module} exits in NasaBook."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.contains(moduleCode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds a module to the NasaBook."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must not already exist in the NasaBook"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param module Module"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in Nasa Book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target       Module"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param editedModule Module"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes {@code key} from this {@code NasaBook}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code key} must exist in the Nasa Book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param key ModuleCode"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModule(ModuleCode key) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.remove(key);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueModuleList getList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return a new NasaBook, to avoid pointing to the same data when testing."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return NasaBook"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook deepCopyNasaBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook newNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newNasaBook.setModuleList(getDeepCopyList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newNasaBook;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Reschedule all activity based on user presets."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void scheduleAll() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.asModifiableObservableList()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .forEach(x -\u003e {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    x.getModifiableDeadlineList()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                            .forEach(Deadline::regenerate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    x.getModifiableEventList()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                            .forEach(Event::regenerate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setDeadlineSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (hasModule(module)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module item \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            item.setDeadlineSchedule(index, type);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean setEventSchedule(ModuleCode module, Index index, Index type) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (hasModule(module)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Module item \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            item.setEventSchedule(index, type);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList().size() + \" moduleList\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //TODO: refine Later"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public UniqueModuleList getUniqueModuleList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Ensure that the class being extracted does not points to the same object."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : moduleList.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deepCopyList.add(mods.getDeepCopyModule());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof NasaBook"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 moduleList.equals(((NasaBook) other).moduleList));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.hashCode();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if activity is found in the module with {@code moduleCode}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code of the module to be searched"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param activity activity to be searched"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if activity found in the module, else false"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return module.hasActivity(activity);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 150,
      "kester-ng": 173,
      "don-tay": 9
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API for History book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cT\u003e getModuleListHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 15,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyNasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Unmodifiable view of an Nasa book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public interface ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Gets the underlying {@code UniqueModuleList} from the NasaBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return UniqueModuleList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    UniqueModuleList getUniqueModuleList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getDeepCopyList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 6,
      "kester-ng": 13,
      "don-tay": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getCalendarExportPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 6,
      "kester-ng": 11
    }
  },
  {
    "path": "src/main/java/nasa/model/Regenerable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Allows activities to auto-repeat."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public interface Regenerable\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    T regenerate();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 5,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Path nasaBookFilePath \u003d Paths.get(\"data\" , \"nasabook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path historyBookFilePath \u003d Paths.get(\"data\" , \"history.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path uiHistoryBookFilePath \u003d Paths.get(\"data\", \"uiHistory.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Path calendarExportPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param userPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param newUserPrefs ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setNasaBookFilePath(newUserPrefs.getNasaBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        setHistoryBookFilePath(newUserPrefs.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        setUiHistoryBookFilePath(newUserPrefs.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return uiHistoryBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookFilePath \u003d nasaBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setHistoryBookFilePath(Path historyBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBookFilePath \u003d historyBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUiHistoryBookFilePath(Path uiHistoryBookFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.uiHistoryBookFilePath \u003d uiHistoryBookFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 nasaBookFilePath.equals(o.nasaBookFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 historyBookFilePath.equals(o.historyBookFilePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 uiHistoryBookFilePath.equals(o.uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Objects.hash(guiSettings, nasaBookFilePath, historyBookFilePath, uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + nasaBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sb.append(\"\\nLocal history data file location : \" + historyBookFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sb.append(\"\\nLocal ui history data file location : \" + uiHistoryBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Path getCalendarExportPath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return calendarExportPath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "EdmondOng": 32,
      "kester-ng": 77
    }
  },
  {
    "path": "src/main/java/nasa/model/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Enum for views in NASA."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public enum View {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    CALENDAR, MODULES, STATISTICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Valid views are Modules, Calendar, Statistics.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks if String corresponds to valid enum."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param aName input to be checked"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return true if name is valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidView(String aName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        View[] aViews \u003d View.values();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (View aView : aViews) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (aView.toString().equals(aName)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 27
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for activities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class Activity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String EMPTY_NOTE_STRING \u003d \"-\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date dateCreated;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create an activity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of the activity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity(Name name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateCreated \u003d Date.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        note \u003d new Note(EMPTY_NOTE_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d new Schedule(dateCreated);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create an activity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of the activity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity(Name name, Date dateCreated, Note note) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d new Schedule(dateCreated);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the note of the activity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the note of the activity."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the name of the activity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to the set the name of the activity."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the dateCreated of the activity."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return dateCreated"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getDateCreated() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this.dateCreated;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to the set the dateCreated of the activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param dateCreated"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDateCreated(Date dateCreated) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dateCreated);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getScheduleDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return schedule.getRepeatDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(type, dateCreated);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to check if the activity occurs in that month."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param month Month currently in"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if occurs else false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public abstract boolean occurInMonth(int month);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public abstract Activity deepCopy();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public abstract void regenerate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 25,
      "kester-ng": 90,
      "don-tay": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/ActivityContainsKeyWordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to allow activities to be filtered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ActivityContainsKeyWordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ActivityContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().name, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof ActivityContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 29,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Date of an Activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Dates should only be in the format DD-MM-YYYY HH:MM, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d constructDateTime(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts a past date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date A past date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Date acceptPastDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date temp \u003d new Date();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setDate(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void setDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d constructDateTime(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static LocalDateTime constructDateTime(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Construct current date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object of current date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Date now() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String now \u003d LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(now);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if the string matches date format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.setLenient(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.parse(test);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateTimeFormatter.parse(test);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isAfter(other.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isBefore(other.getDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEqual(Date other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isEqual(other.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getDifference(Date other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Duration duration \u003d Duration.between(other.getDate(), date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return (int) duration.toDaysPart();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param numOfDaysToAdd number of days from the current day"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date addDaysToCurrDate(int numOfDaysToAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusDays(numOfDaysToAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param numOfMonthsToAdd number of months from the current day"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date addMonthsToCurrDate(int numOfMonthsToAdd) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusMonths(numOfMonthsToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 58,
      "kester-ng": 78,
      "don-tay": 12
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents Deadlines method in NASA."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Deadline extends Activity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Deadline has already passed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isOverdue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor to create a new deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name Name of deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param dueDate date the deadline is due"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Date dueDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dueDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidDeadline(dueDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isOverdue \u003d isOverdue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialise Deadlines with a particular unique {@code name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Note"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param priority Priority"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param dueDate Date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Deadline(Name name, Date date, Note note, Priority priority, Date dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(name, date, note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(priority, dueDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        isOverdue \u003d isOverdue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to return due date of the deadline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return dueDate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Return the difference in due date and date of creation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getDifferenceInDay() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return dueDate.getDifference(getDateCreated());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the dueDate."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDueDate(Date dueDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(dueDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to get the priority."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to set the priority."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(priority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Unmark deadline as done, and set {@code isOverdue} if overdue."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void unmarkAsDone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (isOverdue()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            isOverdue \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            isOverdue \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !isDone \u0026\u0026 Date.now().isAfter(dueDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        getSchedule().setType(type, dueDate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int dueDateMonth \u003d this.dueDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return month \u003d\u003d dueDateMonth;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity deepCopy() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name nameCopy \u003d new Name(getName().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dueDateCopy \u003d new Date(getDueDate().toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note noteCopy \u003d new Note(getNote().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateCreatedCopy \u003d Date.acceptPastDate(getDateCreated().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority priorityCopy \u003d new Priority(getPriority().toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline copy \u003d new Deadline(nameCopy, dateCreatedCopy, noteCopy, priorityCopy, dueDateCopy, isDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            copy.markAsDone();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        copy.setSchedule(getSchedule().getDeepCopy());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void regenerate() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        getSchedule().update();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (Date.now().isAfter(dueDate) \u0026\u0026 getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setDueDate(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDateCreated(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDone(false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidDeadline(Date dueDate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(dueDate.isBefore(Date.now()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if both are the same deadline with same deadline attributes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * This defines a stronger notion of equality between two deadlines."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isSameDeadline(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherDeadline.getName().equals(getName())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getDueDate().equals(getDueDate())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getDateCreated().equals(getDateCreated())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherDeadline.getNote().equals(getNote());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 43,
      "kester-ng": 111,
      "don-tay": 23
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Event method in Nasa Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Event extends Activity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_EVENT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Event provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Start date should be before end date.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PAST_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"The event has already passed.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean isOver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidStartEndDates(startDate, endDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidFutureEvent(endDate), PAST_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This constructor is use for testing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name of event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param startDate Start date of event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param endDate End date of event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Notes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date startDate, Date endDate, Note note) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super.setNote(note);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Initialise Event with a particular unique {@code name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name Name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note Note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param startDate Date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param endDate Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event(Name name, Date date, Note note, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(name, date, note);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.isOver \u003d isOver();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidStartDate(startDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(endDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidEndDate(endDate), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if start date is valid (ie. start date is after end date)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param startDate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidStartDate(Date startDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(startDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if end date is valid (ie. end date is after start date)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param endDate"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidEndDate(Date endDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(endDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int startDateMonth \u003d this.startDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int endDateMonth \u003d this.endDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d startDateMonth; i \u003c\u003d endDateMonth; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (i \u003d\u003d month) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidStartEndDates(Date start, Date end) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return !(end.isBefore(start));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isValidFutureEvent(Date end) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return (!end.isBefore(Date.now()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isOver() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return endDate.isBefore(Date.now());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Return the difference in due date and date of creation."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return endDate.getDifference(startDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        getSchedule().setType(type, startDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void regenerate() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        getSchedule().update();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (Date.now().isAfter(endDate) \u0026\u0026 getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            int timeDiff \u003d getDuration();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setEndDate(getSchedule().getRepeatDate().addDaysToCurrDate(timeDiff));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setStartDate(endDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setDateCreated(getSchedule().getRepeatDate());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Activity deepCopy() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name nameCopy \u003d new Name(getName().toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date startDateCopy \u003d new Date(getStartDate().toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date endDateCopy \u003d new Date(getEndDate().toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note noteCopy \u003d new Note(getNote().toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dateCreatedCopy \u003d new Date(getDateCreated().toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Schedule scheduleCopy \u003d new Schedule();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setDefaultDate(dateCreatedCopy);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setRepeatDate(getScheduleDate());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        scheduleCopy.setType(getSchedule().getType());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event eventCopy \u003d new Event(nameCopy, dateCreatedCopy, noteCopy, startDateCopy, endDateCopy);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        eventCopy.setSchedule(scheduleCopy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventCopy;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if both are the same event with same event attributes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isSameEvent(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getDateCreated().equals(getDateCreated())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherEvent.getNote().equals(getNote());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 55,
      "kester-ng": 103,
      "don-tay": 23
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Name of an Activity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Names should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "-": 48,
      "kester-ng": 8,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Notes should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The notes String must contain at least one non-whitespace"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * character, otherwise a bunch of tabs and spaces will"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * qualify as a note which should not be the case."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALIDATION_REGEX_EMPTY \u003d \"^$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param content Valid notes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidNote(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is considered valid notes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 content.equals(((Note) other).content)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "kester-ng": 59
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: an integer of range 1 to 5, default value set to 1 if no value received upon instantiation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority should range from 1 to 5 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Valid integers that cannot start with the digit \u00270\u0027, and within range of 1 to 5."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"([1-5]\\\\d{0})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Priority level set to 1 as default value if not specified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Variable is not set as final to allow user to set default priority level (TBD)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static int defaultPriorityLevel \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final int priorityLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with default priority level, when no argument is passed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d defaultPriorityLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with the value {@code priorityLevel}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priorityLevel priority level of the given activity, a String in the integer range of 1 to 5 inclusive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority(String priorityLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidPriorityValue(priorityLevel), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d Integer.parseInt(priorityLevel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return priorityLevel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static int getDefaultPriorityLevel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return defaultPriorityLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given priority level string is in the valid integer range of 1 to 5."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidPriorityValue(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALID_INTEGER_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Integer.toString(priorityLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 priorityLevel \u003d\u003d ((Priority) other).priorityLevel); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 3,
      "kester-ng": 61,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Represents schedule class in Nasa book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Allows user to regenerate activity automatically."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Schedule should be from 0 to 3 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Valid integers that start from 0 to 3."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"([0-3]\\\\d{0})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date dateToRepeat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date defaultDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Construct an empty Schedule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        type \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dateToRepeat \u003d Date.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        defaultDate \u003d Date.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct a schedule from string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param input String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] in \u003d input.split(\",\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d Integer.parseInt(in[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d new Date(in[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        defaultDate \u003d Date.acceptPastDate(in[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with the default type of 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with specific type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date, int type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidSchedule(String.valueOf(type)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Method to extend the date of a module activity."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean update() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasUpdate \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        while (Date.now().isAfter(dateToRepeat) \u0026\u0026 type !\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            init();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            hasUpdate \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasUpdate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set scheduling."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setType(int type, Date dueDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidSchedule(String.valueOf(type)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dateToRepeat \u003d dueDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Setting the type."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param type int"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Stop scheduling."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void cancel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d defaultDate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize schedules."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 0 :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            cancel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runOnceAWeek();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runTwiceAWeek();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 3 :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runMonthly();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Set default date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDefaultDate(Date date) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Set date to repeat"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setRepeatDate(Date date) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dateToRepeat \u003d date;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get type of schedule."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get type"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String typeInString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (type \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"WEEKLY\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"FORTNIGHTLY\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else if (type \u003d\u003d 3) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"MONTHLY\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get next running date."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Date"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getRepeatDate() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return dateToRepeat;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it weekly."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runOnceAWeek() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addDaysToCurrDate(7);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it twice weekly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runTwiceAWeek() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addDaysToCurrDate(14);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it monthly."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runMonthly() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat \u003d dateToRepeat.addMonthsToCurrDate(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Schedule getDeepCopy() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Schedule temp \u003d new Schedule();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setType(type);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        temp.setDefaultDate(defaultDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        temp.setRepeatDate(dateToRepeat);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static boolean isValidSchedule(String test) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return test.matches(VALID_INTEGER_REGEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return String.format(\"%d,%s,%s\", type, dateToRepeat, defaultDate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 166,
      "kester-ng": 45
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * As such, adding and updating of activity uses Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * for equality so as to ensure that the activity being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * unique in terms of identity in the UniqueActivityList. However, the removal of a activity uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Activity#equals(Object) so as to ensure that the activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class UniqueActivityList\u003cT extends Activity\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if the list contains an equivalent T as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds a activity to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toAdd Activity."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getActivityList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public T getActivityByIndex(Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public T getActivityByName(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getName().equals(name))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivity(T targetActivity, T editedActivity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(targetActivity, editedActivity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int index \u003d internalList.indexOf(targetActivity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // case when editedActivity is a non-target activity that already exists in { @code UniqueActivityList }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!targetActivity.equals(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toRemove Activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent activity from the list by index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param index Index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeByIndex(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Empty all the activity inside the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset activities with the given list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param replacement UniqueActivityList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(replacement.getDeepCopyList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param activities List"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(List\u003cT\u003e activities) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return a copy of activity list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Activity activity : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deepCopyList.add(activity.deepCopy());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        T item \u003d internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item.setSchedule(type.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index.getZeroBased(), item);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getInternalList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cT\u003e getInternalUnmodifiableList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 59,
      "kester-ng": 117,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueDeadlineList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for uniqueDeadlineList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class UniqueDeadlineList extends UniqueActivityList\u003cDeadline\u003e {}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 2,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for uniqueEventList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class UniqueEventList extends UniqueActivityList\u003cEvent\u003e {}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 2,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/DuplicateActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation will result in duplicate Activity (Activity are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * they have the same notes and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(\"Operation would result in duplicate activity\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Abstract History class to store users actions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public abstract class History\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Stack\u003cT\u003e stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private T item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d new Stack\u003cT\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History(Stack\u003cT\u003e history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d history;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item into stack from item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item must not be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void push(T item) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (this.item !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            stack.push(this.item);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item directly into the stack."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item must not be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void pushDirectly(T item) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.push(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack. To get previous item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean pop() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            item \u003d stack.pop();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack directly."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return T."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T popDirectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.pop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasItem() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getPop() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset redo action."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetItem() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setStack(List\u003cT\u003e stack) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.stack.addAll(stack);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Stack\u003cT\u003e getStack() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.isEmpty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 89,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/history/ModuleListHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Class that manage all histories."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e Type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleListHistory\u003cT\u003e extends History\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory(Stack\u003cT\u003e moduleListStack) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(moduleListStack);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return unmodifiable list containing histories."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cT\u003e list \u003d new ArrayList\u003c\u003e(super.getStack());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cT\u003e newList \u003d FXCollections.observableArrayList(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 32,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueEventList eventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FilteredList\u003cEvent\u003e filteredEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueDeadlineList deadlineList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FilteredList\u003cDeadline\u003e filteredDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code module}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleName ModuleName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.eventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filteredEvent \u003d new FilteredList\u003c\u003e(eventList.getActivityList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.filteredDeadline \u003d new FilteredList\u003c\u003e(deadlineList.getActivityList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the moduleCode of the module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String moduleCode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the module moduleCode to a new moduleCode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing module code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.add(deadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.add(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline(Deadline toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.remove(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent(Event toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.remove(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueDeadlineList getDeadlineList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public UniqueEventList getEventList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlines(UniqueDeadlineList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivities(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlines(List\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setActivities(deadlines);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivities(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setActivities(events);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlineSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.setSchedule(index, type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEventSchedule(Index index, Index type) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.setSchedule(index, type);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filteredDeadline;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return filteredEvent;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyDeadlineList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList.getDeepCopyList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getModifiableDeadlineList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deadlineList.getActivityList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyEventList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList.getDeepCopyList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cEvent\u003e getModifiableEventList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return eventList.getActivityList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getDeepCopyModule() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module newModule \u003d new Module(getModuleCode(), getModuleName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cActivity\u003e deadlines \u003d deadlineList.getDeepCopyList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e deadlinesCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Activity activity : deadlines) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlinesCopy.add((Deadline) activity);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        newModule.setDeadlines(deadlinesCopy);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cActivity\u003e events \u003d eventList.getDeepCopyList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cEvent\u003e eventsCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Activity activity : events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventsCopy.add((Event) activity);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        newModule.setEvents(eventsCopy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cDeadline\u003e deadlineIterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadlineList.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cEvent\u003eeventIterator() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return eventList.iterator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Updates module\u0027s underlying filtered activity lists"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param predicate Predicate"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        filteredDeadline.setPredicate(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        filteredEvent.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author don-tay */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts module\u0027s deadline list by the specified {@code sortMethod}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod Method of sorting in the module deadline list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortDeadlineList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e comparator \u003d sortMethod.getDeadlineComparator();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        getModifiableDeadlineList().sort(comparator);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts module\u0027s event list by the specified {@code sortMethod}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod Method of sorting in the module event list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortEventList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e comparator \u003d sortMethod.getEventComparator();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        getModifiableEventList().sort(comparator);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both are the same module with same module name and module code."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return String.format(\"%s %s\", moduleCode, moduleName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if deadline is found in the module\u0027s {@code UniqueDeadlineList}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if deadline is present in the module\u0027s deadline list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Deadline currentDeadline : deadlineList.getActivityList()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (currentDeadline.isSameDeadline(deadline)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if event is found in the module\u0027s {@code UniqueEventList}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if event is present in the module\u0027s event list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Event currentEvent : eventList.getActivityList()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (currentEvent.isSameEvent(event)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if activity is found in the module."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param activity"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if activity is present in the module"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return hasDeadline((Deadline) activity);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return hasEvent((Event) activity);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 65,
      "kester-ng": 149,
      "don-tay": 35
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents module code of a Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \"Module codes contain 1 to 10 alphanumeric characters and have no whitespace.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Module code should not contain any whitespace, and all values must be alphanumeric."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ALPHA_NUMERIC_VALIDATION_REGEX \u003d \"[a-zA-Z0-9]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NON_EMPTY_STRING_VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MAX_10_CHAR_REGEX \u003d \"\\\\b\\\\w{1,10}\\\\b\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param test String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return test.matches(ALPHA_NUMERIC_VALIDATION_REGEX) \u0026\u0026 test.matches(NON_EMPTY_STRING_VALIDATION_REGEX)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u0026\u0026 test.matches(MAX_10_CHAR_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Equality check for ModuleCode, which is case-insensitive."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.toLowerCase().equals(((ModuleCode) other)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .moduleCode.toLowerCase())); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 2,
      "kester-ng": 57,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the official name of the module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \"Module name should only contain alphanumeric characters and spaces, and it should not blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleName(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Arrays.stream(moduleName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .trim().replaceAll(\" +\", \" \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .split(\" \"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .map(word -\u003e Character.toTitleCase("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                word.charAt(0)) + word.substring(1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .toLowerCase()).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleName.equals(((ModuleName) other).moduleName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12,
      "EdmondOng": 1,
      "kester-ng": 42,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/module/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to filter based on activity name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(module.getModuleCode().moduleCode, keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 8,
      "-": 24,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/module/SortMethod.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/* @@author don-tay */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Represents a SortMethod in NASA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Event and deadline have separate comparators, given by {@link #generateDeadlineComparator(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and {@link #generateEventComparator(String)} respectively."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSortMethod(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortMethod {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sort method must be either name, date, or priority.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Comparator STUB_COMPARATOR \u003d (a, b) -\u003e 0; //Stub comparator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final String sortMethodString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Comparator\u003cDeadline\u003e deadlineComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Comparator\u003cEvent\u003e eventComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a {@code SortMethod}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param method A valid method of sorting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortMethod(String method) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidSortMethod(method), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethodString \u003d method;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.deadlineComparator \u003d generateDeadlineComparator(method);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.eventComparator \u003d generateEventComparator(method);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if a given string is a valid method of sorting."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static boolean isValidSortMethod(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return (test.equals(\"name\") || test.equals(\"date\") || test.equals(\"priority\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the string value of the sort method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The string representation of the method of sorting."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String getSortMethodString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return sortMethodString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the DeadlineComparator of the sort method."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The Comparator used to sort the deadline list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cDeadline\u003e getDeadlineComparator() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return deadlineComparator;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the EventComparator of the sort method."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The EventComparator used to sort the event list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cEvent\u003e getEventComparator() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return eventComparator;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Generates and returns the DeadlineComparator used to sort the deadline list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Default deadline comparator, sorts in ascending order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Lexicographically smallest(a-z), earliest due date, highest priority at the top of the module deadline list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The DeadlineComparator of this instance of {@code SortMethod}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cDeadline\u003e generateDeadlineComparator(String method) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e nameSorter \u003d Comparator.comparing(l -\u003e l.getName().toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e dateSorter \u003d Comparator.comparing(l -\u003e l.getDueDate().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cDeadline\u003e prioritySorter \u003d Comparator.comparing(l -\u003e l.getPriority().toString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Comparator.reverseOrder());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return nameSorter;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return prioritySorter;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + getSortMethodString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Generates and returns the EventComparator used to sort the event list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Default event comparator, sorts in ascending order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Lexicographically smallest(a-z), earliest start date, at the top of the module event list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Will not sort based on priority."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The DeadlineComparator of this instance of {@code SortMethod}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cEvent\u003e generateEventComparator(String method) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e nameSorter \u003d Comparator.comparing(l -\u003e l.getName().toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e dateSorter \u003d Comparator.comparing(l -\u003e l.getStartDate().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cEvent\u003e prioritySorter \u003d STUB_COMPARATOR;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return nameSorter;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return prioritySorter;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + getSortMethodString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return getSortMethodString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 1,
      "don-tay": 124
    }
  },
  {
    "path": "src/main/java/nasa/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A Module is considered unique by comparing using {@code Module#equals(Module)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * As such, adding and updating of Module uses Module#equals(Module)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * for equality so as to ensure that the Module being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a Module uses"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Module#equals(Object) so as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if the list contains an equivalent ModuleCode as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Note: Underlying implementation of equality check on ModuleCode is case-insensitive."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toCheck ModuleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.getModuleCode().equals(toCheck));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds a Module to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The Module must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toAdd Module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (contains(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the ModuleCode {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode identity of {@code editedModule} must not be the same as another existing Module in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param target ModuleCode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param editedModule Module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode editedModuleCode \u003d editedModule.getModuleCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int index \u003d internalList.indexOf(getModule(target));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // case when editedModule is a non-target module that already exists in { @code UniqueModuleList }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!target.equals(editedModuleCode) \u0026\u0026 contains(editedModuleCode)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent ModuleCode from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param toRemove ModuleCode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove(ModuleCode toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!internalList.remove(getModule(toRemove))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param modules List"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * get a particular module from the list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleCode ModuleCode"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getModuleCode().equals(moduleCode))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDeadlineSchedule(ModuleCode moduleCode, Index index, Index type) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.setDeadlineSchedule(index, type);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.updateFilteredActivityList(x -\u003e true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setEventSchedule(ModuleCode moduleCode, Index index, Index type) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.setEventSchedule(index, type);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleSelected.updateFilteredActivityList(x -\u003e true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Module moduleTemp \u003d new Module(mods.getModuleCode(), mods.getModuleName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlinesCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e deadlines \u003d mods.getDeepCopyDeadlineList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Activity activity : deadlines) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinesCopy.add((Deadline) activity);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleTemp.setDeadlines(deadlinesCopy);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventsCopy \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e events \u003d mods.getDeepCopyEventList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Activity activity : events) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                eventsCopy.add((Event) activity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleTemp.setEvents(eventsCopy);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            deepCopyList.add(moduleTemp);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return ObservableList"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param modules List"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 165,
      "kester-ng": 32,
      "don-tay": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation will result in duplicate Module (Module are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * they have the same module code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(\"Operation would result in duplicate module\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/quote/Quote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.quote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Class to store motivation quotes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class Quote {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Quotes being stored in {@code lines}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static ObservableList\u003cString\u003e lines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ObservableList\u003cString\u003e getLines() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise data by retrieving it from resources."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static void readFile() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Path relative \u003d Path.of(\"data/quotes.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            InputStream readQuote \u003d Quote.class.getClassLoader()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    .getResourceAsStream(\"text/quotes.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assert readQuote !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String res \u003d new String(readQuote.readAllBytes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FileUtil.createIfMissing(relative);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FileUtil.writeToFile(relative, res);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            lines.addAll(FileUtil.readFromFile(relative).split(\"\\n\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(error.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static String getQuote() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int i \u003d random.nextInt(lines.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return lines.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 41,
      "kester-ng": 13
    }
  },
  {
    "path": "src/main/java/nasa/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains utility methods for populating {@code NasaBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static Module geh1001 \u003d new Module(new ModuleCode(\"GEH1001\"), new ModuleName(\"Globalisation\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static Module cs2106 \u003d new Module(new ModuleCode(\"CS2106\"), new ModuleName(\"Operating System\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline project \u003d new Deadline(new Name(\"Weekly Quiz\"), new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        project.setNote(new Note(\"To read readings\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        project.setSchedule(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline tutorial \u003d new Deadline(new Name(\"Tutorial\"), new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        tutorial.setSchedule(1); //repeat weekly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        geh1001.addDeadline(project);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        geh1001.addDeadline(tutorial);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //TODO add activities"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"), new ModuleName(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + \"Professionals\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new Module(new ModuleCode(\"CS2105\"), new ModuleName(\"Introduction to Computer Network\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            cs2106,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            geh1001"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static UniqueModuleList[] getSampleModuleList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list1 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list2 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list3 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list1.add(new Module(new ModuleCode(\"CS2101\"), new ModuleName(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                + \"Professionals\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list1.add(new Module(new ModuleCode(\"CS2105\"), new ModuleName(\"Introduction to Computer Network\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.setModules(list1.getDeepCopyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.add(cs2106);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.add(geh1001);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new UniqueModuleList[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            list3, list1, list2"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static List\u003cString\u003e getSampleUiList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cString\u003e sample \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"null\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"find activity Tutorial\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sample.add(\"find activity Project\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sample;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static ReadOnlyNasaBook getSampleNasaBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook sampleNb \u003d new NasaBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            sampleNb.addModule(sampleModule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ReadOnlyHistory\u003cUniqueModuleList\u003e getSampleHistoryBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cUniqueModuleList\u003e sampleNb \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (UniqueModuleList sampleModuleList : getSampleModuleList()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            sampleNb.add(sampleModuleList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ReadOnlyHistory\u003cString\u003e getSampleUiHistoryBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e sampleNb \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (String sampleUiList : getSampleUiList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            sampleNb.add(sampleUiList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 30,
      "EdmondOng": 70
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String dueDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given activity details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"date\") String date, @JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               @JsonProperty(\"dueDate\") String dueDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"schedule\") String schedule,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"isDone\") String isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d source.getDateCreated().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dueDate \u003d source.getDueDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d source.getSchedule().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d Boolean.toString(source.isDone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Deadline} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Priority.isValidPriorityValue(priority)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(dueDate)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDueDate \u003d new Date(dueDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Schedule modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(modelName, modelDate, modelNote, modelPriority, modelDueDate,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Boolean.parseBoolean(isDone));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 1,
      "kester-ng": 110,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given activity details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"note\") String note, @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            @JsonProperty(\"schedule\") String schedule) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d source.getDateCreated().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        schedule \u003d source.getSchedule().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date eventStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Schedule modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new Event(modelName, modelDate, modelNote, eventStartDate, modelEndDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        event.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 2,
      "kester-ng": 108
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedFilterProperty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Jackson-friendly version filter property."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedFilterProperty {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String filterProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedFilterProperty(@JsonProperty(\"filterProperty\") String filterProperty) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filterProperty \u003d filterProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toModelType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filterProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 21
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Jackson friendly use of History."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "@JsonRootName(value \u003d \"historybook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedHistory {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct History with details of module list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleList List"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(@JsonProperty(\"moduleList\") List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts a given module list for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param source ReadOnlyHistory"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(ReadOnlyHistory\u003cUniqueModuleList\u003e source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.addAll(source.getModuleListHistory().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .map(x -\u003e x.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    .map(JsonAdaptedModule::new).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts Jackson to adapted history object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return HistoryBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cUniqueModuleList\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final List\u003cUniqueModuleList\u003e historyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (List\u003cJsonAdaptedModule\u003e list : moduleList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            final UniqueModuleList uniqueList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (JsonAdaptedModule module : list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                uniqueList.add(module.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyList.add(uniqueList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final ModuleListHistory\u003cUniqueModuleList\u003e temp \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setStack(historyList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cUniqueModuleList\u003e historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.setModuleListHistory(temp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 64,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final List\u003cJsonAdaptedDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                             @JsonProperty(\"moduleName\") String moduleName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                             @JsonProperty(\"deadlines\") List\u003cJsonAdaptedDeadline\u003e deadlines,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                             @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadlines !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            this.deadlineList.addAll(deadlines);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (events !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            this.eventList.addAll(events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleName \u003d source.getModuleName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineList.addAll(source.getDeadlineList().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .map(JsonAdaptedDeadline::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventList.addAll(source.getEventList().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleName modelModuleName \u003d new ModuleName(moduleName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final List\u003cDeadline\u003e moduleDeadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (JsonAdaptedDeadline deadline : deadlineList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleDeadlines.add(deadline.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final UniqueDeadlineList uniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueDeadlineList.setActivities(moduleDeadlines);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final List\u003cEvent\u003e moduleEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (JsonAdaptedEvent event : eventList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleEvents.add(event.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueEventList.setActivities(moduleEvents);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Module module \u003d new Module(modelModuleCode, modelModuleName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(uniqueDeadlineList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(uniqueEventList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 71,
      "EdmondOng": 2,
      "kester-ng": 35,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedUiHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Storage to store data for Ui history."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "@JsonRootName(value \u003d \"uiHistoryBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedUiHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cJsonAdaptedFilterProperty\u003e name \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given activity details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedUiHistory(@JsonProperty(\"name\") List\u003cJsonAdaptedFilterProperty\u003e name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (name !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedUiHistory(ReadOnlyHistory\u003cString\u003e uiHistory) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name.addAll(uiHistory.getModuleListHistory().stream().map(JsonAdaptedFilterProperty::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return HistoryBook using json file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return HistoryBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cString\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final List\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (JsonAdaptedFilterProperty list : name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            input.add(list.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final ModuleListHistory\u003cString\u003e temp \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setStack(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.setModuleListHistory(temp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 57
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonNasaBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A class to access NasaBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorage implements NasaBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNasaBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathOne;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathTwo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathThree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonNasaBookStorage(Path filePathOne, Path filePathTwo, Path filePathThree) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathOne \u003d filePathOne;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathTwo \u003d filePathTwo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathThree \u003d filePathThree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathOne;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathTwo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathThree;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readNasaBook(filePathOne);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #readNasaBook()}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cJsonSerializableNasaBook\u003e jsonNasaBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                filePath, JsonSerializableNasaBook.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!jsonNasaBook.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.of(jsonNasaBook.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(filePathTwo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #readHistoryBook()}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cJsonAdaptedHistory\u003e jsonHistoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                filePath, JsonAdaptedHistory.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!jsonHistoryBook.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.of(jsonHistoryBook.get().toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readUiHistoryBook(filePathThree);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #readUiHistoryBook()}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cJsonAdaptedUiHistory\u003e jsonHistoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                filePath, JsonAdaptedUiHistory.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!jsonHistoryBook.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.of(jsonHistoryBook.get().toModelType());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveNasaBook(nasaBook, filePathOne);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #saveNasaBook(ReadOnlyNasaBook)}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, uiHistoryBook, filePathOne, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Save data into json files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param historyBook"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param uiHistoryBook"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathOne"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathTwo"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathThree"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathOne);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathTwo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathThree);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathOne);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathTwo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathThree);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePathOne);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedHistory(historyBook), filePathTwo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedUiHistory(uiHistoryBook), filePathThree);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 71,
      "EdmondOng": 112
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonSerializableNasaBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An Immutable NASA that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "@JsonRootName(value \u003d \"nasabook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonSerializableNasaBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonSerializableNasaBook} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code ReadOnlyNasaBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNASABook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(ReadOnlyNasaBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this nasa book into the model\u0027s {@code NasaBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public NasaBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (nasaBook.hasModule(module.getModuleCode())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBook.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 57,
      "kester-ng": 3,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/nasa/storage/NasaBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.NasaBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface NasaBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns NASABook data as a {@link ReadOnlyNasaBook}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #getNasaBookFilePath()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link ReadOnlyNasaBook} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param nasaBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #saveNasaBook(ReadOnlyNasaBook)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      ReadOnlyHistory\u003cString\u003e uiHistoryBook) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      Path filePathTwo, Path filePathThree) throws IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43,
      "EdmondOng": 21
    }
  },
  {
    "path": "src/main/java/nasa/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Storage extends NasaBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "EdmondOng": 7
    }
  },
  {
    "path": "src/main/java/nasa/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Manages storage of NASA data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NasaBookStorage nasaBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StorageManager(NasaBookStorage nasaBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookStorage \u003d nasaBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NASA methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.getNasaBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.getHistoryBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getUiHistoryBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.getUiHistoryBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return readNasaBook(nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.readNasaBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.readHistoryBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(nasaBookStorage.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readUiHistoryBook(nasaBookStorage.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readUiHistoryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.readUiHistoryBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        saveNasaBook(nasaBook, nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookStorage.saveNasaBook(nasaBook, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, uiHistoryBook, nasaBookStorage.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                nasaBookStorage.getHistoryBookFilePath(), nasaBookStorage.getUiHistoryBookFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             ReadOnlyHistory\u003cString\u003e uiHistoryBook, Path filePathOne,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePathOne + filePathTwo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBookStorage.saveUltimate(nasaBook, historyBook, uiHistoryBook, filePathOne, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 77,
      "EdmondOng": 51
    }
  },
  {
    "path": "src/main/java/nasa/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Optional"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link nasa.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 30,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/ui/CalendarView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * UI component to represent the calendar view."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentMonth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleObservableList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Button next;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Button prev;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private HBox calendarDetails;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor for the controller."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules listed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CalendarView(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // initialize the calendar grid and its contents"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentYear \u003d currentDateTime.getYear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentMonth \u003d currentDateTime.getMonthValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleObservableList \u003d moduleObservableList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update the Label"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update calendar"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update contents in calendar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // allow updating of calendar"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // TODO: whenever a module is added, do this also"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                resetCalendar();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to update the calendar as activities are edited/removed/added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void updateCalendar(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d module.getFilteredEventList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlineObservableList.addListener(new ListChangeListener\u003cDeadline\u003e() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Deadline\u003e c) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    resetCalendar();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventObservableList.addListener(new ListChangeListener\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Event\u003e c) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    resetCalendar();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the header for the calendar."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeCalendarHeader() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dayHeader \u003d new VBox();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            GridPane.setVgrow(dayHeader, Priority.NEVER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setText(DayOfWeek.of(i).getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.getChildren().add(day);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.getStyleClass().add(\"date-header\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dayHeader, i - 1, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the date grids for the calendar."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeDateGrids() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime monthDetails \u003d LocalDateTime.of(currentYear, currentMonth, 1, 0, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int firstDayOfMonth \u003d monthDetails.getDayOfWeek().getValue(); // get when the first date lies on which day"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d monthDetails.getMonth().maxLength(); // get total days in current month"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to adjust totalDaysInMonth for Feb (leap year)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDate date \u003d LocalDate.of(currentYear, currentMonth, 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!date.isLeapYear() \u0026\u0026 date.getMonth() \u003d\u003d Month.FEBRUARY) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            totalDaysInMonth--; // need to minus 1 as not leap year"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int nullDays \u003d firstDayOfMonth - 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int currentDate \u003d 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the first row of the calendar grid"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ScrollPane dateContentSp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setFitToWidth(true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setFitToHeight(true);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContentSp.setContent(dateContent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (i \u003c nullDays) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // not in current month, set to white color"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // set to purple color plus add date number"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setStyle(\"-fx-text-fill:black\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                currentDate++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dateContentSp, i, 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the rest of the grids as per normal"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ScrollPane dateContentSp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setFitToWidth(true);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setFitToHeight(true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setContent(dateContent);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContentSp.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // check if current grid is still within the month"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (currentDate \u003c\u003d totalDaysInMonth) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    currentDate++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    // create a white pane"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                calendarGrid.add(dateContentSp, j, i);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Load all activities into the calendar."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules in the application"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void loadActivities(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Deadline deadline : deadlineObservableList) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Deadline deadlineCopy \u003d (Deadline) deadline.deepCopy();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Name name \u003d new Name(String.format(\"[%s] %s\", module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    deadline.getName().toString()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlineCopy.setName(name);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (deadline.occurInMonth(currentMonth)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (deadline.getDueDate().getDate().getYear() !\u003d currentYear) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    int activityDate \u003d getDayOfMonth(deadline);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (activityHashMap.containsKey(activityDate)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.get(activityDate).add(deadlineCopy);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activities.add(deadlineCopy);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.put(activityDate, activities);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cEvent\u003e eventObservableList \u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                module.getFilteredEventList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            addEvents(eventObservableList, activityHashMap, module.getModuleCode());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // now we populate those grids that has activities"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Integer i : activityHashMap.keySet()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cActivity\u003e dateActivities \u003d activityHashMap.get(i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int size \u003d dateActivities.size();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(i));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ScrollPane dateContentSp \u003d (ScrollPane) node;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d (VBox) dateContentSp.getContent();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Activity activity : dateActivities) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label activityLabel \u003d getActivityLabel(activity);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    activityLabel.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(activityLabel);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the label representing the activity."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed in calendar"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label getActivityLabel(Activity activity) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Label activityLabel \u003d new Label();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it red"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color: purple; -fx-background-radius: 5\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \" 5 5 5\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (activity instanceof Event) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it yellow"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color: darkblue\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it green"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color:green\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return activityLabel;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the whole calendar."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeWholeCalendar() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeCalendarHeader();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeDateGrids();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the start months of the activities."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed on calendar"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getDayOfMonth(Activity activity) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Deadline) activity).getDueDate().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Event) activity).getStartDate().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to reset the whole calendar (remove all activities)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void resetCalendar() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cNode\u003e calendarCells \u003d calendarGrid.getChildren();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Node cell : calendarCells) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (GridPane.getRowIndex(cell) !\u003d null"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 GridPane.getRowIndex(cell) !\u003d 0) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cNode\u003e nodes \u003d ((VBox) ((ScrollPane) cell).getContent()).getChildren();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (nodes.size() \u003e 1) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    nodes.remove(1, nodes.size());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Updates the calendar to the next month\u0027s schedule."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void onClickNext() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (currentMonth \u003d\u003d 12) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // set to first month of next year"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth \u003d 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentYear +\u003d 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth +\u003d 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeDateGrids();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);*/"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update the calendar to previous month\u0027s schedule."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void onClickPrevious() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (currentMonth \u003d\u003d 1) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // set to last month of last year"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth \u003d 12;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentYear -\u003d 1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            currentMonth -\u003d 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateLabel();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Update label based on current months."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateLabel() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setText(String.format(\"%s %s\", Month.of(currentMonth), Year.of(currentYear)));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds event to the calendar."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param events list of events to be added"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to show activities on the calendar"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEvents(ObservableList\u003cEvent\u003e events, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                          ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int startYear \u003d event.getStartDate().getDate().getYear();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int endYear \u003d event.getEndDate().getDate().getYear();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Event eventCopy \u003d (Event) event.deepCopy();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Name name \u003d new Name(String.format(\"[%s] %s\", moduleCode.toString(),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                event.getName().toString()));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            eventCopy.setName(name);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (startYear \u003e currentYear"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || endYear \u003c currentYear) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                continue; // event not happening this year at all"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // now check for month"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                int startMonth \u003d event.getStartDate().getDate().getMonthValue();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                int endMonth \u003d event.getEndDate().getDate().getMonthValue();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (startYear \u003d\u003d currentYear \u0026\u0026 endYear \u003d\u003d currentYear) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    addEventHelper(startMonth, endMonth, eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else if (startYear \u003c currentYear \u0026\u0026 currentYear \u003c endYear) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    // any month will be filled with events"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (startYear \u003d\u003d currentYear) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        endMonth \u003d 12;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        startMonth \u003d 1;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (startMonth \u003e currentMonth || endMonth \u003c currentMonth) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (startMonth \u003c currentMonth \u0026\u0026 currentMonth \u003c endMonth) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (startYear \u003d\u003d currentYear \u0026\u0026 startMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthFromStartToEnd(eventCopy, activityHashMap,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            event.getStartDate().getDate().getDayOfMonth(), getMaxDaysInMonth());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else if (endYear \u003d\u003d currentYear \u0026\u0026 endMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthFromStartToEnd(eventCopy, activityHashMap,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                            1, event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        populateMonthWithEvents(eventCopy, activityHashMap);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Helper method to populate month with event {@code event}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param startMonth"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param endMonth"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addEventHelper(int startMonth, int endMonth, Event event,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                               HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (startMonth \u003e currentMonth || endMonth \u003c currentMonth) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // check if month in-between"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (startMonth \u003c currentMonth \u0026\u0026 currentMonth \u003c endMonth) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // means the whole month has the event"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthWithEvents(event, activityHashMap);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else if (startMonth \u003d\u003d currentMonth \u0026\u0026 endMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from start date to end-date"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap,"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getStartDate().getDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else if (startMonth \u003d\u003d currentMonth) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from start to last day of month"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getStartDate().getDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    getMaxDaysInMonth());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // populate from first day of month to end"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                populateMonthFromStartToEnd(event, activityHashMap, 1,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    event.getEndDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Populates month with event that span over multiple days."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be shown"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to store activities"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param startDate start date of event"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param endDate end date of event"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void populateMonthFromStartToEnd(Event event, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            int startDate, int endDate) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d startDate; i \u003c\u003d endDate; i++) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (activityHashMap.containsKey(i)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.get(i).add(event);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activities.add(event);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.put(i, activities);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Populates months with event."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event event to be shown"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activityHashMap underlying data structure to store activities"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void populateMonthWithEvents(Event event, HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d getMaxDaysInMonth();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalDaysInMonth; i++) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (activityHashMap.containsKey(i)) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.get(i).add(event);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activities.add(event);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                activityHashMap.put(i, activities);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int getMaxDaysInMonth() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime monthDetails \u003d LocalDateTime.of(currentYear, currentMonth, 1, 0, 0);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d monthDetails.getMonth().maxLength(); // get total days in current month"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to adjust totalDaysInMonth for Feb (leap year)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDate date \u003d LocalDate.of(currentYear, currentMonth, 1);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!date.isLeapYear() \u0026\u0026 date.getMonth() \u003d\u003d Month.FEBRUARY) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            totalDaysInMonth--; // need to minus 1 as not leap year"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return totalDaysInMonth;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 506,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandHint;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final HashMap\u003cString, String\u003e commandList \u003d CommandHint.getCommandList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ListIterator\u003cString\u003e commandHistoryIterator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private String matchedCommand \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MainWindow main;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, MainWindow main) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistoryIterator \u003d commandHistory.listIterator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_RELEASED, (key) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (key.isControlDown() \u0026\u0026 key.getCode() \u003d\u003d KeyCode.V) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            switch (key.getCode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case LEFT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.backward();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case RIGHT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.forward();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.previous());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.next());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (isValidCommand()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    main.getHint(commandList.get(matchedCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.requestFocus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                } else if (main.isHintShowing()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    main.hideHint();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Verifies if text in command field is a valid command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isValidCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        boolean isCommand \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (String command : commandList.keySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandTextField.getText().trim().toLowerCase().startsWith(command)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                isCommand \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                matchedCommand \u003d command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return isCommand;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistoryIterator \u003d commandHistory"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            matchedCommand \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (main.isHintShowing()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                main.hideHint();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * @see nasa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 154
    }
  },
  {
    "path": "src/main/java/nasa/ui/ExportQrWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Window showing the qr code to export NasaBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class ExportQrWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String FXML \u003d \"ExportQrWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /* Logger to track if qr code displayed to user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExportQrWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ImageView qrCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates a new ExportWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param root Stage to use as the root of the ExportWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ExportQrWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public ExportQrWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Updates the content of the window, with the qr code given by (@code pngData)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param pngData new qr code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void update(byte[] pngData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Image qrCode \u003d new Image(new ByteArrayInputStream(pngData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.qrCode.setImage(qrCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Shows window to user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.logger.fine(\"Showing QR Code to user\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this.getRoot().isShowing();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().hide();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.getRoot().requestFocus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 70
    }
  },
  {
    "path": "src/main/java/nasa/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-T10-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 98
    }
  },
  {
    "path": "src/main/java/nasa/ui/HintWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * UI component for hint window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class HintWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"HintWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private GridPane popUp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label parameters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label example;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label commandMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label parametersMessage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label exampleMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label copyMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Button copyExample;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public HintWindow() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Updates the input of the hint window"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popUp.setFocusTraversable(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup \u003d new Popup();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setHideOnEscape(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandMessage.setText(input.split(\"\\n\")[0].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        parametersMessage.setText(input.split(\"\\n\")[1].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        exampleMessage.setText(input.split(\"\\n\")[2].split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.getContent().add(popUp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Displays the hint panel to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param stage Stage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void show(Stage stage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popUp.setMaxWidth(stage.getWidth() * 3 / 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.show(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.setAnchorX(stage.getX());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (stage.isFullScreen()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            popup.setAnchorY(stage.getHeight() - 125 - popup.getHeight());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            popup.setAnchorY(stage.getHeight() - 100 - popup.getHeight());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        popup.hide();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return popup !\u003d null \u0026\u0026 popup.isShowing();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Copies the example for the command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void copyExample() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ClipboardContent example \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        example.putString(exampleMessage.getText());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        clipboard.setContent(example);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 91
    }
  },
  {
    "path": "src/main/java/nasa/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HintWindow hintWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private QuotePanel quotePanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ExportQrWindow exportQrWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem undoMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem redoMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow \u003d new ExportQrWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        quotePanel \u003d new QuotePanel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.addEventFilter(KeyEvent.KEY_RELEASED, event -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.next();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow \u003d new HintWindow();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanel \u003d new TabPanel(logic);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.heightProperty().addListener((obs, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPanel.updateModuleList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.widthProperty().addListener((obs, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPanel.updateModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getNasaBookFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hideHint() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isHintShowing() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return hintWindow.isShowing();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void getQuote(String input) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        quotePanel.setText(input);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        quotePanel.show(getPrimaryStage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles undo."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleUndo() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"undo\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles redo."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleRedo() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"redo\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getHint(String input) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.setInput(input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        hintWindow.show(getPrimaryStage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Handles export qr code."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void handleExportQr(byte[] qrData) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow.update(qrData);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!exportQrWindow.isShowing()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            exportQrWindow.show();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            exportQrWindow.focus();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        exportQrWindow.hide();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isModules()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getModules();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isCalendar()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getCalendar();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (commandResult.isStatistics()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.getStatistics();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (commandResult.isQuote()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                getQuote(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (commandResult.isShowQr()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                handleExportQr(commandResult.getQrData());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 90,
      "EdmondOng": 3,
      "-": 170,
      "kester-ng": 10,
      "don-tay": 22
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.activity.DeadlineListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.ui.activity.EventListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeadlineListPanel deadlineListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox activityListPanelPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleCard(Module module, int width) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMinWidth(width);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMaxWidth(width);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        cardPane.setMaxHeight(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        code.setText(module.getModuleCode().toString() + \" \" + module.getModuleName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListPanel \u003d new DeadlineListPanel(module.getFilteredDeadlineList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListPanel \u003d new EventListPanel(module.getFilteredEventList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityListPanelPlaceholder.getChildren().add(deadlineListPanel.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return module.equals(card.module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 58,
      "kester-ng": 8,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox moduleListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label noModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleObservableList \u003d moduleObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!moduleObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            noModules.setManaged(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setModuleListView();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setModuleListView();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setModuleListView() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListView.getChildren().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int width \u003d Math.max((int) scrollPane.getWidth() / moduleObservableList.size(), 275);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module :moduleObservableList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            moduleListView.getChildren().add(new ModuleCard(module, width).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 62
    }
  },
  {
    "path": "src/main/java/nasa/ui/QuotePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * UI component for quote panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class QuotePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"QuotePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int time \u003d 5000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private AnchorPane pane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Create a quote panel."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public QuotePanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup \u003d new Popup();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        label.setMaxWidth(400);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        pane.prefWidthProperty().bind(label.prefWidthProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        pane.prefHeightProperty().bind(label.prefHeightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.setAutoHide(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.getContent().add(pane);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setText(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        label.setText(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Show quote message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param stage Stage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void show(Stage stage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (popup.isShowing()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new Timeline(new KeyFrame(Duration.millis(time), runtime -\u003e popup.hide())).play();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.centerOnScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Timeline(new KeyFrame(Duration.millis(time), runtime -\u003e popup.hide())).play();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        popup.show(stage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 25,
      "kester-ng": 34
    }
  },
  {
    "path": "src/main/java/nasa/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatisticsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel showing statistics on modules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackedBarChart\u003cString, Integer\u003e stackedBarChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsPanel(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.setMinWidth(500);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.setMinWidth(500);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                resetStatistics();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        updateStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Method to update statistics as activities are edited/removed/added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void updateStatistics(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cDeadline\u003e deadlineObservableList \u003d module.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            deadlineObservableList.addListener(new ListChangeListener\u003cDeadline\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Deadline\u003e c) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    resetStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    loadStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Set statistics."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void loadStatistics(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cPieChart.Data\u003e pieData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            pieData.add(new PieChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    module.getFilteredDeadlineList().size()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e chartData \u003d FXCollections.observableArrayList(pieData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.setData(chartData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        chartData.forEach(data -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                data.nameProperty().bind(data.pieValueProperty().getValue() \u003e 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        ? Bindings.concat("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                data.getName(), \" - \", data.pieValueProperty().intValue(), \" deadlines\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        : Bindings.concat("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                data.getName(), \" - \", data.pieValueProperty().intValue(), \" deadline\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                )"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //Bar chart"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e tasksCompleted \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tasksCompleted.getData().add(new XYChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getFilteredDeadlineList()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .filter(activity -\u003e activity.isDone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .count()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tasksCompleted.setName(\"Completed\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e tasksNotCompleted \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tasksNotCompleted.getData().add(new XYChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getFilteredDeadlineList()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .filter(activity -\u003e !activity.isDone())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            .count()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tasksNotCompleted.setName(\"Not completed\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.getData().addAll(tasksCompleted, tasksNotCompleted);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void resetStatistics() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.getData().clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        stackedBarChart.getData().clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 123,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/nasa/ui/TabPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Tab for modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TabPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox statisticsList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TabPanel(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarView \u003d new CalendarView(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getStyleClass().add(\"background\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.setTabMinWidth(tabPane.getWidth() / 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.setTabMaxWidth(tabPane.getWidth() / 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void updateModuleList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanel.setModuleListView();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getModules() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getCalendar() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getStatistics() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Switches to the subsequent tab or the first tab if current tab is the last tab."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void next() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectNext();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 81
    }
  },
  {
    "path": "src/main/java/nasa/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nasa.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            mainWindow.getQuote(logic.execute(\"quote\").getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 9,
      "EdmondOng": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/DeadlineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeadlineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"DeadlineCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Deadline deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox deadlinePane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CheckBox isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label dateToRepeat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeadlineCard(Deadline deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name.setText(displayedIndex + \". \" + deadline.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date.setText(\"Due by: \" + deadline.getDueDate().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note.setText(deadline.getNote().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateToRepeat.setText(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (deadline.getSchedule().getType() !\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            dateToRepeat.setText(\"Repeat: \" + deadline.getSchedule().typeInString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone.setSelected(deadline.isDone());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        isDone.setMouseTransparent(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            deadline.setDone(!deadline.isDone());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //mainWindow.handleDeadlineClick(displayedIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (!deadline.isOverdue()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinePane.getParent().setStyle(\"-fx-background-color: #C7CEEA;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                deadlinePane.getParent().setStyle(\"-fx-background-color: darkred;\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            isDone.setSelected(deadline.isDone());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setPriority();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a Ui representation of the priority."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setPriority() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (deadline.getPriority().getPriorityLevel()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#00bc6b;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#85ba00;\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#d0d000;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#e1b400;\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setText(\"!!!!!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"-fx-text-fill:#e80303;\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            priority.setStyle(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof DeadlineCard)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeadlineCard card \u003d (DeadlineCard) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 100,
      "EdmondOng": 2,
      "kester-ng": 15
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/DeadlineListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeadlineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeadlineListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ListView\u003cDeadline\u003e deadlineListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeadlineListPanel(ObservableList\u003cDeadline\u003e deadlineList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setItems(deadlineList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        deadlineListView.setMaxHeight(deadlineList.size() * 50 + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setWidth(double width) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlineListView.setPrefWidth(width);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        protected void updateItem(Deadline deadline, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            prefWidthProperty().bind(deadlineListView.widthProperty().subtract(10));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            deadlineListView.setMaxHeight((deadlineListView.getItems().size() + 1) * 100);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setStyle(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (!deadline.isOverdue()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #C7CEEA;\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFB2AE;\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(new DeadlineCard(deadline, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "EdmondOng": 1,
      "kester-ng": 58
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox eventPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name.setText(displayedIndex + \". \" + event.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        date.setText(\"From \" + event.getStartDate().toString() + \" to \" + event.getEndDate().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note.setText(event.getNote().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/EventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        eventListView.setMaxHeight(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            prefWidthProperty().bind(eventListView.widthProperty().subtract(10));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            eventListView.setMaxHeight((eventListView.getItems().size() + 1) * 75);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setStyle(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (!event.isOver()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    setStyle(\"-fx-background-color: #aee4ff;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    setStyle(\"-fx-background-color: #FFB2AE;\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "kester-ng": 53
    }
  },
  {
    "path": "src/main/resources/text/quotes.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Life is what we make it, always has been, always will be.” – Grandma Moses"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You may be disappointed if you fail, but you are doomed if you don’t try.” – Beverly Sills"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Dream big and dare to fail.” – Norman Vaughan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It does not matter how slowly you go as long as you do not stop.” – Confucius"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Build your own dreams, or someone else will hire you to build theirs.” – Farrah Gray"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I would rather die of passion than of boredom.” – Vincent van Gogh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I didn’t fail the test. I just found 100 ways to do it wrong.” – Benjamin Franklin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Limitations live only in our minds. But if we use our imaginations, our possibilities become limitless.” – Jamie Paolinetti"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Challenges are what make life interesting and overcoming them is what makes life meaningful.” – Joshua J. Marine"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Too many of us are not living our dreams because we are living our fears.” – Les Brown"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If the wind will not serve, take to the oars.” – Latin Proverb"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you’re offered a seat on a rocket ship, don’t ask what seat! Just get on.” – Sheryl Sandberg"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Happiness is not something readymade. It comes from your own actions.” – Dalai Lama"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“When I let go of what I am, I become what I might be.” – Lao Tzu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Everything has beauty, but not everyone can see.” – Confucius"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Few things can help an individual more than to place responsibility on him, and to let him know that you trust him.” – Booker T. Washington"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“There is only one way to avoid criticism: do nothing, say nothing, and be nothing.” – Aristotle"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best revenge is massive success.” – Frank Sinatra"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Either you run the day, or the day runs you.” – Jim Rohn"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Winning isn’t everything, but wanting to win is.” – Vince Lombardi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Your time is limited, so don’t waste it living someone else’s life.” – Steve Jobs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Life is what happens to you while you’re busy making other plans.” – John Lennon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Just know, when you truly want success, you’ll never give up on it. No matter how bad the situation may get.” – Unknown"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I don’t regret the things I’ve done, I regret the things I didn’t do when I had the chance.” – Unknown"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Happiness cannot be traveled to, owned, earned, or worn. It is the spiritual experience of living every minute with love, grace \u0026 gratitude.” – Denis Waitley"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I am thankful for all of those who said NO to me. Its because of them I’m doing it myself.” – Albert Einstein"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t worry about failures, worry about the chances you miss when you don’t even try.” – Jack Canfield"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Nobody ever wrote down a plan to be broke, fat, lazy, or stupid. Those things are what happen when you don’t have a plan.” – Larry Winget"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Though no one can go back and make a brand new start, anyone can start from now and make a brand new ending.” – Carl Bard"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I don’t regret the things I’ve done, I regret the things I didn’t do – Lucas ( Rory Cochrane, Empire Records)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Never give up on something that you can’t go a day without thinking about.” – Unknown"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“When you feel like giving up, remember why you held on for so long in the first place.” – Unknown"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Always be a first-rate version of yourself, instead of a second-rate version of somebody else.” – Judy Garland"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What lies behind us and what lies before us are tiny matters compared to what lies within us.” – Henry S. Haskins"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Challenge yourself with something you know you could never do, and what you’ll find is that you can overcome anything.” – Unknown"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It is never too late to be what you might have been.” – George Eliot"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“All our dreams can come true–if we have the courage to pursue them.” – Walt Disney"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best way to predict the future is to invent it.” – Alan Kay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you cannot do great things, do small things in a great way.” – Napoleon Hill"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“An obstacle is often a stepping stone.” – William Prescott"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You make a living by what you get; you make a life by what you give.” – Winston Churchill"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The journey of a thousand miles begins with one step.” – Lao Tzu"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What you do speaks so loudly that I cannot hear what you say.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You must be the change you wish to see in the world.” – Gandhi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Tough times never last, but tough people do.” – Dr. Robert Schuller"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Keep your face to the sunshine and you can never see the shadow.” – Helen Keller"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best way out is always through.” – Robert Frost"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Make each day your masterpiece.” – John Wooden"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The best dreams happen when you’re awake.” – Cherie Gilderbloom"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t count the days, make the days count.” – Muhammad Ali"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The difference between ordinary and extraordinary is that little extra.” – Jimmy Johnson"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“You must not only aim right, but draw the bow with all your might.” – Henry David Thoreau"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Even if you’re on the right track, you’ll get run over if you just sit there.” – Will Rogers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Every strike brings me closer to the next home run.” – Babe Ruth"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t wait. The time will never be just right.” – Napoleon Hill"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“A year from now you may wish you had started today.” – Karen Lamb"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It is never too late to be what you might have been.” – George Eliot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If there is no struggle, there is no progress.” – Frederick Douglass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“What we fear doing most is usually what we most need to do.” – Tim Ferriss"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The more I want to get something done, the less I call it work.” – Richard Bach"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Your imagination is your preview of life’s coming attractions.” – Albert Einstein"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Do what you love and the money will follow.” – Marsha Sinetar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The harder I work, the luckier I get.” – Gary Player"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Even if you fall on your face, you’re still moving forward.” – Victor Kiam"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The purpose of our lives is to be happy.” – Dalai Lama"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The dreamers are the saviors of the world.” – James Allen"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Obsessed is just a word the lazy use to describe the dedicated.” – Russell Warren"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Someday is not a day of the week.” – Denise Brennan-Nelson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you can’t outplay them, outwork them.” – Ben Hogan"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Champions keep playing until they get it right.” – Billie Jean King"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Change your thoughts and you change your world.” – Norman Vincent Peale"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Action is the foundational key to all success – Pablo Picasso"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I will go anywhere as long as it is forward.” – David Livingston"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you aren’t going all the way, why go at all? – Joe Namath"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Just keep going. Everybody gets better if they keep at it.” – Ted Williams"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t wish it were easier, wish you were better.” – Jim Rohn"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The creation of a thousand forests is in one acorn.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It wasn’t raining when Noah built the ark.” – Howard Ruff"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Never let your memories be greater than your dreams.” – Doug Ivester"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“If you have built castles in the air, your work need not be lost; that is where they should be. Now put the foundations under them.” – Henry David Thoreau"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“There are two primary choices in life: to accept conditions as they exist, or accept the responsibility for changing them.” – Denis Waitley"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“We are what we repeatedly do. Excellence, then, is not an act, but a habit.” – Aristotle"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The greatest discovery of my generation is that a human being can alter his life by altering the attitudes of his mind.” – William James"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“In three words I can sum up everything I’ve learned about life: It goes on.” – Robert Frost"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“The aim of an argument or discussion should not be victory, but progress.” – Joseph Joubert"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Only those who will risk going too far can possibly find out how far one can go.” – T.S. Eliot"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“To live is the rarest thing in the world. Most people exist, that is all.” – Oscar Wilde"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Freedom is not the absence of commitments, but the ability to choose yours.” – Paulo Coelho"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Conformity is the jailer of freedom and the enemy of growth.” – John F. Kennedy"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“I am tomorrow, or some future day, what I establish today. I am today what I established yesterday or some previous day.” – James Joyce"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“It’s time to start living the life you’ve imagined – Henry James"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Every man dies. Not every man really lives.” – William Wallace"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Don’t be pushed by your problems. Be led by your dreams.” – Ralph Waldo Emerson"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Action is the foundational key to all success.” – Pablo Picasso"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "“Nothing important was ever achieved without someone taking a chance.” – H. Jackson Brown, Jr"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 95
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "   \u003cHBox fx:id\u003d\"calendarDetails\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003cButton fx:id\u003d\"prev\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onClickPrevious\" text\u003d\"Previous\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cLabel fx:id\u003d\"monthAndYear\" layoutX\u003d\"100.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"206.0\" styleClass\u003d\"cell_big_label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003cButton fx:id\u003d\"next\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onClickNext\" text\u003d\"Next\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "               \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" gridLinesVisible\u003d\"true\" layoutX\u003d\"36.0\" layoutY\u003d\"32.0\" styleClass\u003d\"calendarGrid\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints fx:id\u003d\"CalendarGrid\" minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"95.0\" prefHeight\u003d\"95.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColorAdjust /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "kester-ng": 52
    }
  },
  {
    "path": "src/main/resources/view/DeadlineCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox fx:id\u003d\"deadlinePane\" alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cCheckBox fx:id\u003d\"isDone\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"0.0\" right\u003d\"15.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cGridPane VBox.vgrow\u003d\"ALWAYS\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"80.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"20.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"activity_big_label\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"activity_priority_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.rowIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dateToRepeat\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 36,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" text\u003d\"Deadlines\" styleClass\u003d\"activity-label\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cListView  fx:id\u003d\"deadlineListView\"  /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox fx:id\u003d\"eventPane\" id\u003d\"event\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cGridPane VBox.vgrow\u003d\"ALWAYS\" hgap\u003d\"1\" vgap\u003d\"3\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"activity_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 26
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" text\u003d\"Events\" styleClass\u003d\"activity-label\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cListView  fx:id\u003d\"eventListView\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15
    }
  },
  {
    "path": "src/main/resources/view/ExportQrWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"QR code\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u003cImageView fx:id\u003d\"qrCode\" fitHeight\u003d\"250.0\" fitWidth\u003d\"250.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "don-tay": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/HintWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cGridPane fx:id\u003d\"popUp\" hgap\u003d\"5\" vgap\u003d\"3\" styleClass\u003d\"hint_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100.0\"  prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100.0\"  prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"-Infinity\" valignment\u003d\"TOP\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"command\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" text\u003d\"Description\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"parameters\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" text\u003d\"Parameters\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"example\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" text\u003d\"Example\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"commandMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"parametersMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"exampleMessage\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"copyMessage\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           text\u003d\"Copy example\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cfx:define\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cImage fx:id\u003d\"btnImage\" url\u003d\"@/images/clipboard.png\" requestedHeight\u003d\"30\" requestedWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/fx:define\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cButton id\u003d\"clipboard-button\" fx:id\u003d\"copyExample\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyExample\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cImageView image\u003d\"$btnImage\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         title\u003d\"Nice And Amazing Student Assistant\" minWidth\u003d\"800\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cImage url\u003d\"@/images/nasa.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabPanelPlaceholder\" AnchorPane.topAnchor\u003d\"25.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"125\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"80.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"50\" prefHeight\u003d\"50\" maxHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"50\" prefHeight\u003d\"50\" maxHeight\u003d\"50\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"30\" prefHeight\u003d\"30\" maxHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 25,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cVBox fx:id\u003d\"activityListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "               HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cScrollPane styleClass\u003d\"pane-with-border\" fx:id\u003d\"scrollPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cHBox styleClass\u003d\"pane-with-border\" fx:id\u003d\"moduleListView\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"noModules\" styleClass\u003d\"no-modules\" maxWidth\u003d\"Infinity\" minHeight\u003d\"200\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           maxHeight\u003d\"Infinity\" wrapText\u003d\"true\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "           text\u003d\"No modules added... Use add m/[MODULE_CODE] n/[MODULE_NAME] to add your first module!\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/resources/view/QuotePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"pane\" prefHeight\u003d\"50.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "       \u003cLabel fx:id\u003d\"label\" styleClass\u003d\"highlight_label\" text\u003d\"Label\" AnchorPane.bottomAnchor\u003d\"27.0\" AnchorPane.leftAnchor\u003d\"26.0\" AnchorPane.rightAnchor\u003d\"234.0\" AnchorPane.topAnchor\u003d\"23.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " \u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "kester-ng": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"50\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cPieChart fx:id\u003d\"pieChart\" layoutX\u003d\"50.0\" title\u003d\"Percentage of activities by module\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              id\u003d\"pieChart\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cStackedBarChart fx:id\u003d\"stackedBarChart\" id\u003d\"barChart\" title\u003d\"Number of activities per module\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     legendVisible\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     verticalGridLinesVisible\u003d\"false\" horizontalGridLinesVisible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" label\u003d\"Modules\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" label\u003d\"Deadlines\" upperBound\u003d\"2\" tickUnit\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/StackedBarChart\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cAnchorPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"calendarPlaceholder\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"25.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                           AnchorPane.rightAnchor\u003d\"25.0\" AnchorPane.bottomAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cHBox fx:id\u003d\"statisticsList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"500\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      prefHeight\u003d\"1000\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43
    }
  },
  {
    "path": "src/test/java/nasa/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/nasa/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 63
    }
  },
  {
    "path": "src/test/java/nasa/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nasa.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/nasa/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookStorage(temporaryFolder.resolve(\"nasaBook.json\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"historyBook.json\"), temporaryFolder.resolve(\"uiHistory.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String deleteCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Setup LogicManager with JsonNasaBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionNasaBook.json\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionHistoryBook.json\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionHistoryBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String addCommand \u003d AddModuleCommand.COMMAND_WORD + MODULE_CODE_DESC_CS2030 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module expectedModule \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleBuilder().withCode(VALID_MODULE_CODE_CS2030).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class JsonNasaBookIoExceptionThrowingStub extends JsonNasaBookStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        private JsonNasaBookIoExceptionThrowingStub(Path filePath, Path filePathTwo, Path filePathThree) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            super(filePath, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                 ReadOnlyHistory\u003cString\u003e uiHistoryBook,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                 Path filePathOne, Path filePathTwo, Path filePathThree) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39,
      "EdmondOng": 19,
      "-": 120
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(CommandException.class, AddModuleCommand.MESSAGE_DUPLICATED_MODULE, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2101 \u003d new ModuleBuilder().withCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommand \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2101Command \u003d new AddModuleCommand(cs2101);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommandCopy \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(addCS2101Command));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 70
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// Integrated test TODO: changed name to AddModuleCommandTest"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_NAME \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003cUniqueModuleList\u003e(), new HistoryBook\u003cString\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newModule_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module validModule \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUiHistoryBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                model.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new AddModuleCommand(validModule), model, String.format(AddModuleCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                validModule), expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateModule_fail() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // fails"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        AddModuleCommand command \u003d new AddModuleCommand(module);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command.execute(model); //add one time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // cannot add the same module again"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // check if it passes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleInList \u003d model.getNasaBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(moduleInList), model, AddModuleCommand.MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 8,
      "kester-ng": 57
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_emptyNasaBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_nonEmptyNasaBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "EdmondOng": 4
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                true, false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "kester-ng": 1,
      "-": 48,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Test util."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid module names and codes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1231 \u003d \"CS1231\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS2030 \u003d \"Programming Methodology II\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS1231 \u003d \"Discrete Structures\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid activity names and their parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_HWK \u003d \"Homework 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_TUTORIAL \u003d \"Weekly Tutorial\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_EXAM \u003d \"Final Paper\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_NOTES_TEST \u003d \"This is merely a testing of the notes\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_NOTES_TEST_2 \u003d \"Notes test two\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST_2 \u003d \"14-12-2020 23:59\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // parameters with their prefixes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS2030 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS1231 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS2030 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS1231 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_HWK \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_EXAM \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NOTES_DESC_TEST \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String NOTES_DESC_TEST_2 \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST_2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String DATE_DESC_TEST_2 \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_FROM \u003d \" \" + PREFIX_START_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_TO \u003d \" \" + PREFIX_END_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // invalid parameters with their prefixes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_DESC \u003d \" \" + PREFIX_MODULE + \"@31_+\"; //only alphanumeric char"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_NAME_DESC \u003d \" \" + PREFIX_MODULE_NAME + \"\\t\"; //only whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_ACTIVITY_NAME_DESC \u003d \" \" + PREFIX_ACTIVITY_NAME"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"\\t\\t\"; // only whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_NOTES_DESC \u003d \" \" + PREFIX_NOTE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"        \"; //only whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"r\"; //not an integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020-12-31 11:00\"; //not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_FROM_DESC \u003d \" \" + PREFIX_START_DATE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_TO_DESC \u003d \" \" + PREFIX_END_DATE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    //extra test strings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS2030;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS1231;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS2030 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS2030)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS2030).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS1231 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS1231)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        NasaBook expectedAddressBook \u003d new NasaBook(actualModel.getNasaBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getNasaBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 114,
      "don-tay": 18
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ContinueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validCommandUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ContinueCommand continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(ContinueCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand.execute(model); // set the activity to done for it to be undone"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(continueCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_moduleNotFoundUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ContinueCommand continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, new ModuleCode(\"MA1101R\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, model, ContinueCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is wrong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        continueCommand \u003d new ContinueCommand(Index.fromOneBased(10000), moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, model, ContinueCommand.MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that is already undone"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        continueCommand \u003d new ContinueCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(continueCommand, expectedModel, ContinueCommand.MESSAGE_ACTIVITY_ALREADY_UNDONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityUndone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityToDone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 78
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validActivityUnfilteredList_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(INDEX_FIRST_ACTIVITY.toString()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.removeActivityByIndex(moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is invalid (\u003e list.size())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_SECOND_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(Index.fromOneBased(6), moduleCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"UTW1001K\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 4,
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * {@code DeleteModuleCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validModuleUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to add in filtered next"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                moduleToDelete.getModuleCode().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"DAO2703\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validModuleFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(new Index(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a  module that does not exist"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(new ModuleCode(\"MA1521\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2101\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 1,
      "kester-ng": 119
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validCommandUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_moduleNotFoundUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, new ModuleCode(\"MA1101R\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, model, doneCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is wrong"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand \u003d new DoneCommand(Index.fromOneBased(10000), moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, model, doneCommand.MESSAGE_ACTIVITY_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that is already done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        doneCommand \u003d new DoneCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        setActivityToDone(expectedModel, moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(doneCommand, expectedModel, doneCommand.MESSAGE_ACTIVITY_ALREADY_DONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void setActivityToDone(ModelManager modelManager, ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d modelManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d deadlineList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 6,
      "kester-ng": 61
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.util.SampleDataUtil.getSampleNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and unit tests for EditModuleCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final Model model \u003d new ModelManager(getSampleNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode firstModuleCodeToEdit \u003d model.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode lastModuleCodeToEdit \u003d model.getFilteredModuleList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "             .get(model.getFilteredModuleList().size() - 1).getModuleCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build(); // module with attribute moduleName and moduleCode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Descriptor built off editedModule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Command making edits to moduleCode with descriptor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Initializing model with same initial state as global model variable"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Replace existing module in model with new, editedModule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.setModule(firstModuleCodeToEdit, editedModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Check if successful message from editModuleCommand is equal to expectedMessage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * and model is equal to expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Module firstModule \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // new EditModuleDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        final EditModuleCommand standardCommand \u003d new EditModuleCommand(lastModuleCodeToEdit, DESC_CS1231);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_CS1231);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand commandWithSameValues \u003d new EditModuleCommand(lastModuleCodeToEdit, copyDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(firstModuleCodeToEdit, DESC_CS1231)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(lastModuleCodeToEdit, DESC_CS2030)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 5,
      "don-tay": 103
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditModuleDescriptor(DESC_CS2030);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(DESC_CS2030));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(DESC_CS1231));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030).withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "don-tay": 44
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ExportCalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null file paths"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand otherCommand \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(command, otherCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same file paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        otherCommand \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(command, otherCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different file paths"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        otherCommand \u003d new ExportCalendarCommand(Path.of(\"./Test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertNotEquals(command, otherCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 31
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_zeroKeywords_noActivityFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_multipleKeywords_multipleActivitiesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\"Lab\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            CommandResult res \u003d findCommand.execute(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(res, new CommandResult(expectedMessage));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code userInput} into a {@code ActivityContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ActivityContainsKeyWordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ActivityContainsKeyWordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 1,
      "kester-ng": 89,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 5,
      "-": 14,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(null), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 4,
      "-": 25,
      "kester-ng": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new RepeatDeadlineCommand(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_scheduleIndexOutOfBounds() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name name \u003d new Name(\"Homework\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index correctIndex \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index wrongIndex \u003d Index.fromZeroBased(4);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(String.format(\"%s for %s %s %s\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                RepeatDeadlineCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                CS2103T.getModuleCode(), name, correctIndex.getZeroBased()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        RepeatDeadlineCommand repeatCommand \u003d new RepeatDeadlineCommand(CS2103T.getModuleCode(), Index.fromZeroBased(1),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                correctIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        RepeatDeadlineCommand incorrectRepeatCommand \u003d new RepeatDeadlineCommand(CS2103T.getModuleCode(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Index.fromZeroBased(1), wrongIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        //     assertEquals(expectedResult, repeatCommand.execute(model));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // } catch (Exception error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        //     System.out.println(\"Error in test case\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // assertThrows(IllegalArgumentException.class, () -\u003e incorrectRepeatCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 8,
      "kester-ng": 24,
      "don-tay": 18
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.TypicalModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void multipleUndoCheck() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //add -\u003e add -\u003e add -\u003e undo -\u003e undo -\u003e undo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2102);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2105\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2107\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2102\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void inBetweenUndoCheck() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //add -\u003e undo -\u003e add -\u003e undo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2105\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(model.hasModule(new ModuleCode(\"CS2107\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void complexCheck() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseOne \u003d new Deadline(new Name(\"Hello World\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-04-2020 00:00\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseTwo \u003d new Deadline(new Name(\"Check\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseThree \u003d new Deadline(new Name(\"SEA\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline caseFourth \u003d new Deadline(new Name(\"TEST\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Date(\"20-06-2020 00:00\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS3233 n/Competitive Programming"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2105);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS3033 n/Competitive Programming"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2102);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS3233 a/Hello World d/20-04-2020 00:00"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseOne);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //repeat m/CS3233 a/Hello World r/1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.setDeadlineSchedule(new ModuleCode(\"CS2105\"), Index.fromOneBased(1), Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //add m/CS2105 n/Software"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addModule(TypicalModules.CS2107);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS2105 a/Check d/20-06-2020 00:00"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseTwo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //deadline m/CS3233 d/20-05-2020 02:30 a/SEA"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseThree);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //-\u003e undo -\u003e undo -\u003e redo -\u003e redo"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //Ensure redo is working properly."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        redoCommand.execute(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        redoCommand.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //undo -\u003e add deadline -\u003e undo"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.addDeadline(new ModuleCode(\"CS2105\"), caseFourth);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        undoCommand.execute(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseFourth));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(model.hasActivity(new ModuleCode(\"CS2105\"), caseThree));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(model.hasActivity(new ModuleCode(\"CS2105\"), caseTwo));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 79,
      "kester-ng": 46
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_calendar_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS, \"calendar\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.CALENDAR), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_modules_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS, \"modules\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.MODULES), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_statistics_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ViewCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \"statistics\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                false, true, false, false, CommandResult.EMPTY_BYTE_ARRAY_DATA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ViewCommand(View.STATISTICS), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newDeadline_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.addModule(new Module(new ModuleCode(VALID_MODULE_CODE_CS1231),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new ModuleName(VALID_MODULE_NAME_CS1231)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addDeadline(new ModuleCode(VALID_MODULE_CODE_CS1231), deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddDeadlineCommand command \u003d new AddDeadlineCommand(deadline, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String.format(AddDeadlineCommand.MESSAGE_SUCCESS, deadline), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new AddDeadlineCommand(null, new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d (new DeadlineBuilder().build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddDeadlineCommand(deadline, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 4,
      "kester-ng": 51,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.EventBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addModule(new Module(new ModuleCode(VALID_MODULE_CODE_CS1231),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ModuleName(VALID_MODULE_NAME_CS1231)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addEvent(module.getModuleCode(), event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddEventCommand command \u003d new AddEventCommand(event, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, String.format(AddEventCommand.MESSAGE_SUCCESS, event), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(event, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "EdmondOng": 4,
      "kester-ng": 50
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.AddModuleCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // create the the cs1231 module, contains empty list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module cs1231 \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module codes - only the last one is taken into account"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2030 + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module names - only the last one is taken into account"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS2030 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // multiple tags - all accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module name prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS1231 + VALID_MODULE_NAME_CS1231,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "kester-ng": 79,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ContinueCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ContinueCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ContinueCommandParser parser \u003d new ContinueCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new ContinueCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"-4\" + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 45
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteDeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteDeadlineCommandParser parser \u003d new DeleteDeadlineCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DeleteDeadlineCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // incorrect module code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 36,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DeleteEventCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // incorrect module code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 36,
      "don-tay": 5
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.DeleteModuleCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231); // dummy module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteModuleCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231, new DeleteModuleCommand(moduleCode));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no PREFIX_MODULE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "kester-ng": 37,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DoneCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //no module stated in the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"-4\" + MODULE_NAME_DESC_CS1231, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/EditModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.module.EditModuleCommand.EXCESS_MODULE_CODE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.module.EditModuleCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleCommandParser parser \u003d new EditModuleCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no existing module code specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS2030 , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code to be edited specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS); // invalid module name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code followed by valid name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module name followed by valid module code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + MODULE_CODE_DESC_CS1231,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // two module codes input (in addition to preamble)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_CODE_DESC_CS2030,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                EXCESS_MODULE_CODE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // multiple invalid values, but module code errors are always caught before module name errors"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module code only"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module name only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d validPreamble + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_multipleRepeatedModuleNames_acceptsLast() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidModuleNameFollowedByValidModuleName_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC + MODULE_NAME_DESC_CS1231"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "don-tay": 144
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ExportCalendarCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.ExportCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ExportCalendarCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ExportCalendarCommandParser parser \u003d new ExportCalendarCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_argsWithoutFilePath_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"\", command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_argsWithFilePath_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ExportCalendarCommand command \u003d new ExportCalendarCommand(Path.of(\"./Calendar\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \" f/./Calendar\", command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 34
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, \"     \", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 4,
      "kester-ng": 23
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/NasaBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser parser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 54
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-12-20 12:59\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_ACTIVITY_NAME \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_NOTE \u003d \"\\t\\r\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"-2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String INVALID_MODULE_NAME \u003d \"C@!;\u0027[]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-08-2020 23:59\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_ACTIVITY_NAME \u003d \"CS2103T TP\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Finish milestone v1.2 by next wednesday.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"prepare for new features.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_MODULE_NAME \u003d \"Computer organisation\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleName((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_validModuleNameWithoutWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(VALID_MODULE_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_validModuleNameWithWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + VALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(INVALID_MODULE_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + INVALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithoutWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + INVALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActivityName(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithoutWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(VALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + VALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(INVALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + INVALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithoutWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + INVALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithoutWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + INVALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 178,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/RepeatActivityCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class RepeatActivityCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private RepeatDeadlineCommandParser parser \u003d new RepeatDeadlineCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void commandParserTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertParseSuccess(parser, \"1 m/CS1231 r/1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               new RepeatDeadlineCommand(moduleCode, Index.fromOneBased(1), index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 23
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_HWK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddDeadlineCommandParser parser \u003d new AddDeadlineCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.getAllFieldsPresent(), moduleCode));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing moduleCode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // notes parameter missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.getNoteFieldMissing(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                moduleCode));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // priority parameter missing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + NOTES_DESC_TEST, new AddDeadlineCommand(DeadlineBuilder.getPriorityFieldMissing(), moduleCode));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + INVALID_DATE_DESC + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Notes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + INVALID_NOTES_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Priority"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DeadlineBuilder {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getAllFieldsPresent() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline allFieldsPresent \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        allFieldsPresent.setNote(new Note(VALID_NOTES_TEST));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        allFieldsPresent.setPriority(new Priority(VALID_PRIORITY_HIGH));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return allFieldsPresent;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getNoteFieldMissing() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline noteFieldMissing \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        noteFieldMissing.setPriority(new Priority(VALID_PRIORITY_HIGH));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return noteFieldMissing;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Deadline getPriorityFieldMissing() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline priorityFieldMissing \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        priorityFieldMissing.setNote(new Note(VALID_NOTES_TEST));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return priorityFieldMissing;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 121,
      "don-tay": 8
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_FROM_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_TO_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "//@@author kester-ng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddEventCommand(new EventBuilder().build(), moduleCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing from-date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing to-date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "             + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // note field missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddEventCommand(EventTemplate.getNoteFieldMissing(), moduleCode));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-from"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + INVALID_DATE_FROM_DESC + DATE_DESC_TEST_TO + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-to"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + INVALID_DATE_TO_DESC + DATE_DESC_TEST_FROM + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + INVALID_NOTES_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class EventTemplate {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Event getNoteFieldMissing() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event noteFieldMissing \u003d new Event(new Name(VALID_ACTIVITY_NAME_EXAM),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return noteFieldMissing;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 109,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.DEADLINE_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.ModuleBuilder.EVENT_3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalNasaBook.NASABOOK_TYPE_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.testutil.UiHistoryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ModelManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialized model manager with NasaBook, NASABOOK_TYPE_1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(NASABOOK_TYPE_1, new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UiHistoryBuilder().build(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.getNasaBook().equals(NASABOOK_TYPE_1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"GEH1001\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2106\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredModuleListTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cModule\u003e list \u003d modelManager.getFilteredModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"CS2106\"), list.get(0).getModuleCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"GEH1001\"), list.get(1).getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(new ModuleCode(\"CS2103T\"), list.get(2).getModuleCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredDeadlineListTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e deadlineList \u003d modelManager.getFilteredDeadlineList(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_1.getName(), deadlineList.get(0).getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_2.getName(), deadlineList.get(1).getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_3.getName(), deadlineList.get(2).getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(DEADLINE_4.getName(), deadlineList.get(3).getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getFilteredEventListTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cEvent\u003e eventList \u003d modelManager.getFilteredEventList(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_1.getName(), eventList.get(0).getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_2.getName(), eventList.get(1).getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(EVENT_3.getName(), eventList.get(2).getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(CS2106.getModuleCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(new NasaBook(), new NasaBook(modelManager.getNasaBook()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addModule_uniqueModule_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module cs1010 \u003d new Module(new ModuleCode(\"CS1010\"), new ModuleName(\"Test\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        modelManager.addModule(cs1010);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(modelManager.hasModule(cs1010.getModuleCode()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void addModule_duplicateModule_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e modelManager.addModule(GEH1001));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeModule_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasModule(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeDeadline_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addDeadline(GEH1001.getModuleCode(), DEADLINE_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.removeDeadline(GEH1001.getModuleCode(), DEADLINE_1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(GEH1001.getModuleCode(), DEADLINE_1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void removeEvent_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addEvent(GEH1001.getModuleCode(), EVENT_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.removeEvent(GEH1001.getModuleCode(), EVENT_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(GEH1001.getModuleCode(), EVENT_1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasActivity_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.addDeadline(CS2106.getModuleCode(), DEADLINE_3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(modelManager.hasActivity(CS2106.getModuleCode(), DEADLINE_3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasActivity_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasActivity(CS2106.getModuleCode(), EVENT_2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"nasa/book/file/path\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"new/nasa/book/file/path\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_validPath_setsNasaBookFilePath() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path path \u003d Paths.get(\"nasa/book/file/path\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modelManager.setNasaBookFilePath(path);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(path, modelManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule((nasa.model.module.ModuleCode) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        modelManager.deleteModule(GEH1001.getModuleCode()); // module code"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(modelManager.hasModule(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void hasModule_moduleInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(modelManager.hasModule(GEH1001.getModuleCode())); // module code"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBookBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook differentNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentNasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] keywords \u003d GEH1001.getModuleName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //modelManager.updateFilteredModuleList((Predicate) new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //assertFalse(modelManager.equals(new ModelManager(nasaBook, userPrefs)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        differentUserPrefs.setNasaBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), new HistoryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 20,
      "EdmondOng": 70,
      "kester-ng": 87,
      "-": 58,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/model/NasaBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalDeadlines.CS2103T_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalEvents.CORRECT_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class NasaBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Collections.emptyList(), nasaBook.getModuleList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.resetData(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withValidReadOnlyNasaBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook newData \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(newData, nasaBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Two Modules with the same identity fields\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS2103T, editedcs2103t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBookStub newData \u003d new NasaBookStub(newModules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e nasaBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.hasModule(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder(CS2103T).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(editedcs2103t.getModuleCode()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e nasaBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addEvent(CS2103T.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(nasaBook.hasActivity(CS2103T.getModuleCode(), CORRECT_EVENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void addDeadline() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(nasaBook.hasActivity(CS2103T.getModuleCode(), CS2103T_DEADLINE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeDeadline() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.removeDeadline(CS2103T.getModuleCode(), CS2103T_DEADLINE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(nasaBook.hasActivity(CS2103T.getModuleCode(), CS2103T_DEADLINE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void removeEvent() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        NasaBook book \u003d new NasaBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        book.addModule(CS2106);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        book.addEvent(CS2106.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        book.removeEvent(CS2106.getModuleCode(), CORRECT_EVENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(book.hasActivity(CS2106.getModuleCode(), CORRECT_EVENT));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A stub ReadOnlyNasaBook whose Modules list can violate interface constraints."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class NasaBookStub implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        NasaBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public UniqueModuleList getUniqueModuleList() { // stub"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new UniqueModuleList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 94,
      "EdmondOng": 30,
      "kester-ng": 23,
      "don-tay": 8
    }
  },
  {
    "path": "src/test/java/nasa/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"30-02-2020\")); // invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-2020 12:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2020\")); //no time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid Dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-05-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Date.isValidDate(\"12-03-2020 20:00\")); //leap year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getDifferenceInDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoOne \u003d new Date(\"20-04-2020 23:59\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoTwo \u003d new Date(\"19-03-2020 01:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        long difference \u003d dateNoOne.getDifference(dateNoTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        System.out.println(difference);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 10,
      "kester-ng": 49
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void create_deadline() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new Deadline(new Name(\"Hello\"), new Date(\"12-12-2020 23:59\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(deadline.isValidDeadline(deadline.getDueDate()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void set_due_date() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date date \u003d new Date(\"19-12-2020 03:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d new Deadline(new Name(\"Hello\"), new Date(\"20-12-2021 03:00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        subject.setDueDate(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void set_done() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d new Deadline(new Name(\"Hello\"), new Date(\"12-12-2020 23:59\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        subject.setDone(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(subject.isDone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 22,
      "kester-ng": 8,
      "don-tay": 4
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * An EventTest class to test the functionality of Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void isValidEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 14
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"\\t\\t\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"cs2103 tutorial\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"Studying for cs2103 finals\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 32,
      "kester-ng": 5
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_validNote_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean result \u003d Note.isValidNote(\"Remember to update UG and DG!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_invalidNote_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * Test for empty string, or whitespace characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"       \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\\t\\t\\n\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_validInstantiation_noException() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note note \u003d new Note(\"Update UG and DG!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"ABC\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\t\\t\\tThe best in the world!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\n\\t\\nUpdate website headings!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"..........\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_invalidInstantiation_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note \u003d new Note(\"            \\t\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(\"java.lang.IllegalArgumentException: \" + Note.MESSAGE_CONSTRAINTS, e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidPriorityValue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"3\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"2.0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"3.5\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"-1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"10\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"a\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number beyond range of 1 to 5 inclusive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"6\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"-3\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number: non-numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"d\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"testing string\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 1,
      "kester-ng": 34
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/ScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date date \u003d new Date(\"10-03-2020 03:00\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date temp \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Schedule schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(date, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(0, schedule.getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void checkChangeType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dateExpected \u003d new Date(date.toString()).addDaysToCurrDate(7);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(1, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateExpected \u003d new Date(date.toString()).addDaysToCurrDate(14);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(2, date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        dateExpected \u003d new Date(date.toString()).addMonthsToCurrDate(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(3, date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(dateExpected, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.cancel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(temp, schedule.getRepeatDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void checkWrongSchedule() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e schedule.setType(-1, date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e schedule.setType(4, date));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 36,
      "kester-ng": 8
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/UniqueActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * To test the UniqueActivity class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class UniqueActivityListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueActivityList newUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivity_test() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivity(DEADLINE, CORRECT_EVENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(CORRECT_EVENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove_test() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.remove(DEADLINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities_test() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivities(newUniqueActivityList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void checkUnmodifiableList_test() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.asUnmodifiableObservableList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void modifyUnmodifiableList_test() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e temp \u003d uniqueActivityList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e temp.add(CORRECT_EVENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void getActivityByName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d uniqueActivityList.getActivityByName(new Name(\"Homework for tut\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(DEADLINE, activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 47,
      "kester-ng": 26
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/UniqueDeadlineListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalDeadlines.DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class UniqueDeadlineListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueDeadlineList uniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueDeadlineList newUniqueDeadlineList \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeadlineList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void remove_test() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.remove(DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(uniqueDeadlineList.contains(DEADLINE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void checkUnmodifiableList_test() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueDeadlineList.asUnmodifiableObservableList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void modifyUnmodifiableList_test() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueDeadlineList.add(DEADLINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cDeadline\u003e temp \u003d uniqueDeadlineList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e temp.add(DEADLINE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "EdmondOng": 4,
      "kester-ng": 40
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null moduleCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid moduleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2103 finals\")); // module code with whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"stringchars\")); // 11 characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid moduleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"t\")); // 1 alphanumeric letter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103TCS2\")); // 10 alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 38,
      "don-tay": 3
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isValidModuleName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModuleName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // No special characters, only whitespaces or empty strings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"123@@*\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\\t\\t\\t\\n\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // valid module name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Econometrics\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Software Engineering\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Programming Methodology II\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "kester-ng": 12
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withEmail(VALID_EMAIL_CS2101)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withName(VALID_NAME_CS2101).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withEmail(VALID_EMAIL_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withAddress(VALID_ADDRESS_CS2101).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //TODO: Add test method for equals, similar idea to ModuleTest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(CS2106));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different code-\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2113\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedcs2103t \u003d new ModuleBuilder().withName(\"Object Oriented Programming\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 81,
      "kester-ng": 23
    }
  },
  {
    "path": "src/test/java/nasa/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class UniqueModuleListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList newUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueModuleList.remove(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModules() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueModuleList.setModule(CS2103T.getModuleCode(), CS2106);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2106.getModuleCode()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void testSetModules() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueModuleList.add(GEH1001);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.setModules(newUniqueModuleList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(GEH1001.getModuleCode()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T.getModuleCode()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getModule() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(CS2103T.equals(uniqueModuleList.getModule(CS2103T.getModuleCode())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(CS2106.equals(uniqueModuleList.getModule(CS2103T.getModuleCode())));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 42,
      "kester-ng": 14
    }
  },
  {
    "path": "src/test/java/nasa/model/quote/QuoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model.quote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class QuoteTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getLines().isEmpty());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void getQuoteTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Quote.readFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Quote.getQuote().isEmpty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 27
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_DUE_DATE \u003d \"02-30-2020 23:59\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"0\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_SCHEDULE \u003d \"-1\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_ISDONE \u003d \"NOPE\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NAME \u003d \"tP\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_DATE \u003d \"13-02-2020 23:59\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Finish UG and DG\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_DUE_DATE \u003d \"13-04-2020 23:59\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_SCHEDULE \u003d new Schedule().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_ISDONE \u003d \"true\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_validDeadlineDetails_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(VALID_NAME, VALID_DATE, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                VALID_DUE_DATE, VALID_SCHEDULE, VALID_ISDONE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(CS2103T_DEADLINE, module.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedDeadline(INVALID_CODE, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d DeadlineCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(null, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeadlineCode.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedDeadline(VALID_CODE, INVALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d DeadlineName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedDeadline module \u003d new JsonAdaptedDeadline(VALID_CODE, null, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeadlineName.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 62
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS@\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NAME \u003d CS2103T.getModuleCode().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final List\u003cJsonAdaptedDeadline\u003e VALID_DEADLINES \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CS2103T.getDeadlineList().getActivityList()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .map(JsonAdaptedDeadline::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final List\u003cJsonAdaptedEvent\u003e VALID_EVENTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CS2103T.getEventList().getActivityList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new JsonAdaptedModule(INVALID_CODE, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new JsonAdaptedModule(VALID_CODE, INVALID_NAME, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, null, VALID_DEADLINES, VALID_EVENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "-": 28,
      "kester-ng": 13
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonNasaBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \"JsonNasaBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readNasaBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyNasaBook\u003e readNasaBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new JsonNasaBookStorage(Paths.get(filePath),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Paths.get(filePath), Paths.get(filePath)).readNasaBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(readNasaBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"notJsonFormatNasaBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidAndValidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidAndValidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readAndSaveNasaBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempNasaBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Path filePathTwo \u003d testFolder.resolve(\"TempHistoryBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Path filePathThree \u003d testFolder.resolve(\"TempUiHistoryBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonNasaBookStorage jsonNasaBookStorage \u003d new JsonNasaBookStorage(filePath, filePathTwo, filePathThree);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        original.removeModule(CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        original.addModule(CS2103T);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullNasaBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves {@code NasaBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void saveNasaBook(ReadOnlyNasaBook nasaBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new JsonNasaBookStorage(Paths.get(filePath), Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .saveNasaBook(nasaBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(new NasaBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 37,
      "EdmondOng": 8,
      "-": 65,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonSerializableNasaBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonSerializableNasaBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableNasaBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesNasaBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleNasaBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleNasaBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook typicalModulesNasaBook \u003d TypicalModules.getTypicalNasaBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(nasaBookFromFile, typicalModulesNasaBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableNasaBook.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 25,
      "-": 22,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"data/nasabook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/nasa/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(getTempFilePath(\"ab\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                getTempFilePath(\"cd\"), getTempFilePath(\"ls\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void nasaBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * {@link JsonNasaBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonNasaBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager.saveNasaBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook retrieved \u003d storageManager.readNasaBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getNasaBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(storageManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "EdmondOng": 1,
      "-": 51,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/testutil/DeadlineBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to help build example deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Homework\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"Take note of qns2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DUE_DATE \u003d \"13-11-2020 03:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Date dateCreated;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dueDate \u003d new Date(DEFAULT_DUE_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dateCreated \u003d Date.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the DeadlineBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline activity \u003d (Deadline) activityToCopy;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dateCreated \u003d activity.getDateCreated();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        dueDate \u003d activity.getDueDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority \u003d activity.getPriority();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        schedule \u003d activity.getSchedule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d activity.isDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withDateCreated(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.dateCreated \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withDueDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d new Date(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withNote(String note) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withSchedule(String schedule) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.schedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineBuilder withIsDone(String isDone) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d Boolean.parseBoolean(isDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new Deadline(name, dueDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadline.setNote(note);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 47,
      "EdmondOng": 60,
      "kester-ng": 11,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(module.getModuleName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleName(String moduleName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(new ModuleName(moduleName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "don-tay": 50
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"19-10-2020 03:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_FROM_DATE \u003d VALID_DATE_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_TO_DATE \u003d VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date toDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date fromDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d (Activity) activityToCopy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        date \u003d activity.getDateCreated();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withNote(String note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code toDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withToDate(String toDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.toDate \u003d new Date(toDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code fromDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withFromDate(String fromDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.fromDate \u003d new Date(fromDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Event(name, fromDate, toDate, note);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 81,
      "kester-ng": 19
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueDeadlineList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.UniqueEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_NAME \u003d \"SOFTWARE ENGINEERING\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_1 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"06-06-2021 01:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do models for project\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_2 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Assignment\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"02-08-2021 01:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do tutorials\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_3 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Prepare group meeting\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"22-06-2021 01:00\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Prepare for group meetings\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Deadline DEADLINE_4 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Lab\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withDueDate(\"13-06-2021 01:00\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Chapter 1\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_1 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Competition\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"06-06-2021 01:00\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"08-06-2021 01:00\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Booked MPSH\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_2 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Presentation\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"06-05-2020 01:00\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"07-05-2020 02:00\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withNote(\"Revise on notes\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Event EVENT_3 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withName(\"Recitation\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withFromDate(\"08-08-2020 11:00\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withToDate(\"12-08-2020 12:00\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withNote(\"Study tutorial\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleName name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueDeadlineList uniqueDeadlineList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private UniqueEventList uniqueEventList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new ModuleName(DEFAULT_MODULE_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        code \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueDeadlineList deadlines \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        deadlines.add(DEADLINE_4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        UniqueEventList events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        events.add(EVENT_3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList \u003d events;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList \u003d deadlines;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(events);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module \u003d moduleToCopy.getDeepCopyModule();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        name \u003d module.getModuleName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        code \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueDeadlineList \u003d module.getDeadlineList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueEventList \u003d module.getEventList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.code \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Adds deadline to the module."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param deadline Deadline to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return module update with this deadline in it"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleBuilder addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList.add(deadline);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Adds event to the module."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param event Event to be added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return module updated with this event in it"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleBuilder addEvent(Event event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList.add(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove every activity."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleBuilder"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withRemoveAll() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueDeadlineList.removeAll();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.uniqueEventList.removeAll();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build module based on code and name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setDeadlines(uniqueDeadlineList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        module.setEvents(uniqueEventList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 52,
      "kester-ng": 78,
      "don-tay": 10
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE + module.getModuleName().toString() + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE_NAME + module.getModuleCode().toString() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module.getActivities().getActivityList().stream().forEach("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/NasaBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example NasaBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NasaBookBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_1 \u003d CS2106;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_2 \u003d GEH1001;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_3 \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_1); // first module in moduleList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Reset nasabook builder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder reset() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add module to Nasabook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder addModule(Module module) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Delete the module from Nasabook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBookBuilder deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleList.remove(moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build Nasabook."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueModuleList newModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModuleList.setModules(moduleList.getDeepCopyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setModuleList(newModuleList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 39,
      "kester-ng": 24,
      "don-tay": 7
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalDeadlines.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains examples of deadlines use for testing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TypicalDeadlines {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_NAME \u003d \"tP\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_DATE \u003d \"13-02-2020 23:59\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_NOTE \u003d \"Finish UG and DG\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_DUE_DATE \u003d \"13-04-2020 23:59\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_PRIORITY \u003d \"5\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_SCHEDULE \u003d new Schedule().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALID_ISDONE \u003d \"true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline DEADLINE \u003d new DeadlineBuilder().withName(\"Homework for tut\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(\"19-02-2021 06:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline DEADLINE_LATE \u003d new DeadlineBuilder().withName(\"Test\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(\"12-01-2021 06:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Deadline CS2103T_DEADLINE \u003d new DeadlineBuilder().withName(VALID_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDateCreated(VALID_DATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withDueDate(VALID_DUE_DATE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withNote(VALID_NOTE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withPriority(VALID_PRIORITY)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withSchedule(VALID_SCHEDULE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withIsDone(VALID_ISDONE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TypicalDeadlines() {} // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains examples of events use for testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event WRONG_EVENT \u003d new EventBuilder().withName(\"BasketBall MPSH\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-02-2021 06:00\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"01-01-2021 06:00\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event CORRECT_EVENT \u003d new EventBuilder().withName(\"Tennis\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-04-2021 06:00\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"13-06-2021 06:00\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Event PAST_EVENT \u003d new EventBuilder().withName(\"Soccer\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withFromDate(\"02-04-2019 06:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .withToDate(\"13-06-2019 06:00\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_FIRST_ACTIVITY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_SECOND_ACTIVITY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_THIRD_ACTIVITY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 10
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //Default module"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2106 \u003d new ModuleBuilder().withCode(\"CS2106\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Operating System\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 1\").withNote(\"Lab1 IPC\").build())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 2\").withNote(\"Lab2 Processes\").build())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Lab Assignment 3\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .withNote(\"Lab3 Synchronization\").build())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().build())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().withName(\"Workshop\").build())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module GEH1001 \u003d new ModuleBuilder().withCode(\"GEH1001\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Globalization and new media\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Midterm\").withNote(\"Midterm Essay\").build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Finals\").withNote(\"Final Essay\").build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 1\").withNote(\"Quiz1\").build())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 2\").withNote(\"Quiz2\").build())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addDeadline(new DeadlineBuilder().withName(\"Quiz 3\").withNote(\"Quiz3\").build())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().build())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .addEvent(new EventBuilder().withName(\"Workshop\").build())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2107 \u003d new ModuleBuilder().withCode(\"CS2107\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Computer Security\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2102 \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Database\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2105 \u003d new ModuleBuilder().withCode(\"CS2105\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Computer Networks\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an {@code NasaBook} with all the typical modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static NasaBook getTypicalNasaBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nb \u003d new NasaBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            nb.addModule(module.getDeepCopyModule());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, GEH1001));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 19,
      "EdmondOng": 34,
      "kester-ng": 14
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalNasaBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class for a NasaBook."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalNasaBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final NasaBook NASABOOK_TYPE_1 \u003d new NasaBookBuilder().build().deepCopyNasaBook();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalNasaBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 9,
      "kester-ng": 3
    }
  },
  {
    "path": "src/test/java/nasa/testutil/UiHistoryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Constructor for UiHistoryBuilder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UiHistoryBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static String atMainScreen \u003d \"null\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static String atActivityScreen \u003d \"deadline activity Hello GG HELLO WORLD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UiHistoryBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        history.add(atMainScreen);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        history.add(atActivityScreen);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Create a new UI History Book for testing purpose."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyHistory\u003cString\u003e build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Stack\u003cString\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.addAll(history);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleListHistory\u003cString\u003e listHistory \u003d new ModuleListHistory\u003c\u003e(stack);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cString\u003e book \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        book.setModuleListHistory(listHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return book;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 38
    }
  },
  {
    "path": "src/test/java/nasa/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/nasa/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cfx:root type\u003d\"nasa.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 5
    }
  }
]
