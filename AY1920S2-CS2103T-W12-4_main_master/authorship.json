[
  {
    "path": ".github/ISSUE_TEMPLATE/add-a-user-story.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "name: Add a User Story"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "about: This template helps add a user story as an issue to be tracked."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "title: As a user, I can ..."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "labels: type.Story"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "... so that ..."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Command: `...`"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 12
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-W12-4/main[image:https://travis-ci.org/AY1920S2-CS2103T-W12-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://ci.appveyor.com/project/AdarshChugani/main[image:https://ci.appveyor.com/api/projects/status/coce69u02f8j3qte?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-W12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-W12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://app.codacy.com/gh/AY1920S2-CS2103T-W12-4/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S2-CS2103T-W12-4/main\u0026utm_campaign\u003dBadge_Grade_Dashboard[image:https://api.codacy.com/project/badge/Grade/26ab505f4302490cb6160c093889381c[Code Quality]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d CookBuddy Recipe Manager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* CookBuddy Recipe Manager is a desktop application for managing recipes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* It has a Graphical User Interface (GUI) but most of the user interactions happen through a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* CookBuddy is designed primarily for advanced computer users who prefer typing over using a mouse."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* This project has been adapted from AddressBook-Level3 sample application created by the SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* Some parts of CookBuddy were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 4,
      "-": 24,
      "kevinswk94": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "mainClassName \u003d \u0027cookbuddy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    // ignoreFailures \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.jfxtras\u0027, name: \u0027jmetro\u0027, version: \u002711.6.9\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    archiveName \u003d \u0027CookBuddy.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ignoreFailures(true)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        \u0027site-name\u0027: \u0027CookBuddy\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W12-4/main/\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "//defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "sharadhr": 3,
      "AdarshChugani": 4,
      "-": 147,
      "kevinswk94": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "CookBuddy - This recipe managing application was developed by the https://github.com/AY1920S2-CS2103T-W12-4/main[AY1920S2-CS2103T-W12-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Adarsh Mohandas Chugani"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::adarshchugani.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "{empty}[https://github.com/AdarshChugani[github]] [\u003c\u003cadarshchugani#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Kevin Sum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::kevinswk94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "{empty}[https://github.com/kevinswk94[github]] [\u003c\u003ckevinswk94#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Responsibilities: Dev Ops"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Qi Mingsi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::e0316059.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "{empty}[http://github.com/e0316059[github]] [\u003c\u003ce0316059#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Sharadh Rajaraman"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::sharadhr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "{empty}[http://github.com/sharadhr[github]] [\u003c\u003csharadhr#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Zain Alam"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::muhd97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "{empty}[https://github.com/muhd97[github]] [\u003c\u003cmuhd97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 26,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-W12-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Email us* : You can also reach us at:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Adarsh: `adarsh@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Kevin: `kevinswk@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Mingsi: `e0316059@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Sharadh: `r.sharadh@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Zain: `zain@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "AdarshChugani": 6,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d CookBuddy - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "A project often depends on third-party libraries. For example, *CookBuddy* depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d CookBuddy Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ":toc-title: Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ":toc-placement: auto"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "By: `AY1920S2-CS2103T-W12-4`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Introduction [Done by Zain Alam]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Welcome to CookBuddy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "For more information about using CookBuddy, consult the \u003c\u003cUserGuide#, CookBuddy User Guide\u003e\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "CookBuddy is an integrated platform fully customized for users who wish to manage their recipes easily and effectively."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "All your recipe information is stored on our simple and clean Graphical User Interface (GUI) with optimization for users who prefer working on a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you are looking for a way to easily manage your recipes and have quick fingers, then CookBuddy is definitely for you!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d About this Document [Done by Zain Alam]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "This document is a Developer Guide written for developers who wish to contribute to or extend our CookBuddy project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "It is technical, and explains the inner workings of CookBuddy and how the different components of our"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "application work together."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "We have adopted a \"top-down\" approach in structuring our Developer Guide with first focusing at the high-level architecture of CookBuddy and then delving into the implementation details of each feature that makes up our application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Take note of the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "TIP: This icon denotes useful tips to note of during development."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "NOTE: This icon denotes important details to take note of during development."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Overview of Features [Done by Zain Alam]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "This section will provide you a short overview of CookBuddy\u0027s features."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Manage your recipes easily"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".. Include recipe information e.g. ingredients, instructions, calories, difficulty, rating, serving, tags etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Various icons to find information easily and quickly"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".. Various icons display short information such as difficulty, serving size, tags etc of a recipe."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Data is saved onto your disk automatically"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".. Any changes made will be saved onto your device so you dont have to worry about the data being lost."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::ArchitectureDiagram.svg[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of CookBuddy."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "A quick overview of each component is given below."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit the UML diagrams."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/cookbuddy/Main.java[`Main`] and"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "link:{repoURL}/src/main/java/cookbuddy/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to CookBuddy\u0027s log file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The rest of CookBuddy consists of four components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of CookBuddy."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of CookBuddy in-memory."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from and writes data to the hard disk."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::ArchitectureSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::UiClassDiagram.svg[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*API* : link:{repoURL}/src/main/java/cookbuddy/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RecipeListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The `UI` component uses the JavaFx UI framework."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/cookbuddy/ui/MainWindow.java[`MainWindow`] is specified in"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The `UI` component uses the JMetro library to apply a theme to the default JavaFX interface. The resulting product presents a neat, Windows 10-style UI to the user, that employs https://www.microsoft.com/design/fluent/#/[Microsoft\u0027s Fluent Design patterns]."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "For more information on JMetro, refer to the https://pixelduke.com/java-javafx-theme-jmetro/[JMetro home page]."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::LogicClassDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "link:{repoURL}/src/main/java/cookbuddy/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".  `Logic` uses the `RecipeBookParser` class to parse the user command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a recipe)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::DeleteSequenceDiagram.svg[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::ModelClassDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*API* : link:{repoURL}/src/main/java/cookbuddy/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* stores the Recipe Book data."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRecipe\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Recipe Book`, which `Recipe` can reference. This would allow `Recipe Book` to only require one `Tag` object per unique `Tag`, instead of each `Recipe` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image:BetterModelClassDiagram.svg[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d The `attribute` package"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[attrib-package]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".Structure of the `attribute` package, defining each `Recipe` \u0027s key attributes"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::AttributeClassDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "`attribute` defines common attributes for each recipe, such as time taken to cook, serving size, an image of the recipe, and so on."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::StorageClassDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*API* : link:{repoURL}/src/main/java/cookbuddy/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The `Storage` component manages the recipe data, the user configuration, preferences, and the image data. To be specific, it:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* reads and writes `UserPref` objects to and from disk, as `.json` format;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* serialises, reads and writes recipe data to and from disk, _also_ as `.json` format;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* passes on the file path for the user-entered image into methods in the `ImageUtil` class. More details are given in \u003c\u003cImg-considerations\u003e\u003e."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Classes used by multiple components are in the `cookbuddy.commons` package; the three over-arching sub-packages are `core`, `exceptions`, and `util`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d `core`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "This package defines classes for user configuration, GUI settings, and even a version number."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d `exceptions`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "This package defines exceptions thrown by CookBuddy when it encounters an error state."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d `util`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "This package defines utility classes for certain operations, like file I/O, argument validation, and image processing."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d Implementation details and Possible Enhancements"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Some possible future components are briefly covered, and these may be released in `v2.0`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Counting recipes [Done by Zain Alam]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "muhd97"
        },
        "content": "We allow users to count the total number of recipes stored in CookBuddy. This section shows how we handle this request from the user."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "muhd97"
        },
        "content": "We store every single `Recipe` added by the user into an `ObservableList\u003cRecipe\u003e`, which is a list object in `UniqueRecipeList`. We used an `ObservableList` to easily reflect changes to the list by any other component of CookBuddy using the list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The `count` command was implemented as a `CountCommand` in the `bookbuddy/logic/commands` package."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The `count` has the following input format: `count`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The following sequence diagram shows how the count operation works:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "muhd97"
        },
        "content": ":figure-caption: Figure"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".Sequence diagram of how `count` command is processed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::count-command/CountSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muhd97"
        },
        "content": "An incorrect syntax will cause a `ParseException` to be thrown by the parser."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Incorrect user input will display Unknown command message."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muhd97"
        },
        "content": "We will now demonstrate how a `count` command works in `CookBuddy`:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Step 1. The user executes the command **count** to count the total number of recipes stored in CookBuddy."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Step 2. The input is now checked and an attempt to parse the parameter occurs. The `CountCommand#execute(Model model)` method is executed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Step 3. The method `Model#count()` will then be called to calculate the total number of recipes stored in CookBuddy."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Step 4. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "muhd97"
        },
        "content": "success message. Otherwise, an error message is thrown as `ParseException`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Since the user, input in this case, is valid,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "muhd97"
        },
        "content": "the `count` command is successfully executed and the total number of recipes currently stored in CookBuddy is displayed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The following activity diagram summarizes what happens when the user executes `count` command to count the total number of recipes:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muhd97"
        },
        "content": ":figure-caption: Figure"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".Activity diagram of executing the `count`command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::count-command/CountActivityDiagram.svg[align\u003d\"center\",650]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Image Management [Done by Sharadh Rajaraman]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "CookBuddy allows users to add images to their recipes, which are then saved into the `data/images` folder created by CookBuddy (at least, using the default settings). This section elaborates on implementation."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The two key classes allowing image and photo management are `ImageUtil` and `Photograph`; the former is a utility class written in the https://en.wikipedia.org/wiki/Singleton_pattern[singleton pattern]; the latter is the attribute that each `Recipe` directly contains, as \u003c\u003cattrib-package\u003e\u003e details."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d From User Command to Image On Screen"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[img-seq]]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".Sequence Diagram of image retrieval from disk"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::PhotoSequenceDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The above sequence diagram details how a user-entered command is translated to an image file as displayed on screen. Some initial details are omitted, such as the calls to `RecipeBookParser#parseCommand()` (which have already been demonstrated in \u003c\u003cDesign-Model\u003e\u003e)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The steps taken are also described step-by-step in the activity diagram below:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".Activity diagram of \u003c\u003cimg-seq\u003e\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::PhotoReadActivityDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d Saving Images Into the Data Folder"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "When saving images, there were a few considerations that needed to be taken into account:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* The image on disk *must* contain the recipe name, so as to be reasonably understandable;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* The image on disk must be stored _losslessly_, so that repeated read-write cycles do not deplete the quality;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* If an image already exists on disk, then read/write cycles must not be wasted in overwriting an image with the same data;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Even if recipes have the same name, the image file names must be distinct, and yet always resolve to the same."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Therefore, a hashcode is appended to each image file name, and the resulting data is saved to disk as a `.png` image, which is lossless. `jpeg` formats would require lossy compression at each save, which would progressively degrade image quality."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "This entire process is also demonstrated in the activity diagram below:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".Activity diagram representing image save process"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::PhotoSaveActivityDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[Img-considerations]]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "`ImageUtil` is implemented as a singleton class. In other words, its constructor is declared `private`, and the object can only be retrieved by the `public static` factory method, `ImageUtil.imageUtil()`. Given the class defines _several_ constants using methods, we believed this was the most straightforward direction possible."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "`ImageUtil` also declares `PLACEHOLDER_IMAGE` as several static constant types: a `BufferedImage`, an `InputStream`, and even as a `Path`. The _actual_ image is bundled with the `JAR` file, which can be explored at will using an extractor tool like `7zip`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "These constants are loaded when the Photograph class is first called, thus adhering to Java\u0027s Just-In-Time (JIT) principle."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Furthermore, the initial `ImageUtil` written as an ordinary static utility class led to the JVM throwing `ExceptionInInitializerError` when the built `.jar` was run. There were no issues running this from the IDE; hence the singleton pattern."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d Possible Improvements"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "As it is, image processing spans _several_ classes: `FileUtil`, `ImageUtil`, `Photograph`. We would like to simplify this. Furthermore, _saving_ image data requires returning a file path through several methods, which have little relation to one another."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::FindCommandImpl[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Finding recipes [Done by Kevin]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The following section describes how the `find` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `find` command."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The `find` command is implemented in the _FindCommand_ class."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `find` command is run."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".Activity diagram of finding recipes"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::FindCommandActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". When entering the `find` command, the user will specify one attribute to search within as well as the search terms. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Possible attributes to search within are _name_ (`n/`), _ingredients_ (`ing/`) and _instructions_ (`ins/`)."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". _FindCommandParser_ ensures that only one attribute is specified and returns a _FindCommand_ with the relevant _ContainsKeywordPredicate_ class."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The following sequence diagram summarizes the execution of the `find` command"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".Sequence diagram for the execution of a `find` command"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::FindCommandSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "As the _FindCommand_ class only takes in a single _ContainsKeywordsPredicate_ object,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "CookBuddy can only search within a single attribute at a time."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "As it is currently implemented, the `find` command only accepts finding via one attribute at a time."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "A possible future improvement would enable it to search for recipes using multiple attributes."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "This would greatly enhance the usefulness of the `find` function in *CookBuddy*."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "For example, running `find n/Ham ing/toast` will make *CookBuddy* search for recipes with _Ham_ in its name, or _toast_ in its ingredients."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::FindCommandImpl[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::FavCommandImpl[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Favouriting recipes [Adarsh]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `fav` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `fav` command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `fav` command is implemented in the _FavCommand_ class."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `fav` command is run."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `fav` command"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::FavActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `fav` command, the user will specify the index of the recipe to be favourited."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _FavCommandParser_ ensures that index specified is valid and returns a _FavCommand_."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `fav` command"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `fav` command"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::FavSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How many indexes should be taken in?"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): Only 1 index to be specified per use of the command"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Less error-prone"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Less efficient"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Multiple indexes can be specified per use of the command"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: More efficient"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: More error prone"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, you are able to favourite recipes, even if they have already been favourited."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to notify users if the recipe they are trying to favourite has already been favourited."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would greatly enhance the usefulness of the `fav` function in *CookBuddy*."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::FavCommandImpl[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::UnFavCommandImpl[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Un-favouriting recipes [Adarsh]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `unfav` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `unfav` command."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `unfav` command is implemented in the _UnFavCommand_ class."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `unfav` command is run."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `unfav` command"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::UnfavActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `unfav` command, the user will specify the index of the recipe to be un-favourited."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _UnFavCommandParser_ ensures that index specified is valid and returns a _UnFavCommand_."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `unfav` command"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `unfav` command"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::UnfavSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How many indexes should be taken in?"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): Only 1 index to be specified per use of the command"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Less error-prone"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Less efficient"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Multiple indexes can be specified per use of the command"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: More efficient"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: More error prone"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, you are able to un-favourite recipes, even if they are not favourited."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to notify users if the recipe they are trying to favourite has not been favourited."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would greatly enhance the usefulness of the `find` function in *CookBuddy*."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::UnFavCommandImpl[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::DoneCommandImpl[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Marking recipes as done [Adarsh]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `done` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `done` command."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `done` command is implemented in the _DoneCommand_ class."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `done` command is run."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `done` command"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::DoneActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `done` command, the user will specify the index of the recipe to be mared as done."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _DoneCommandParser_ ensures that index specified is valid and returns a _DoneCommand_."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `done` command"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `done` command"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::DoneSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How many indexes should be taken in?"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): Only 1 index to be specified per use of the command"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Less error-prone"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Less efficient"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Multiple indexes can be specified per use of the command"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: More efficient"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: More error prone"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, you are able to mark recipes as done, even if they are already marked as done."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to notify users if the recipe they are trying to favourite has already been marked as done."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would greatly enhance the usefulness of the `done` function in *CookBuddy*."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::DoneCommandImpl[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::UndoCommandImpl[]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Un-marking recipes as done [Adarsh]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `undo` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `undo` command."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `undo` command is implemented in the _UndoCommand_ class."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `undo` command is run."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `undo` command"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::UndoActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `undo` command, the user will specify the index of the recipe to be un-favourited."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _UndoCommandParser_ ensures that index specified is valid and returns a _UndoCommand_."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `undo` command"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `undo` command"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::UndoSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How many indexes should be taken in?"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): Only 1 index to be specified per use of the command"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Less error-prone"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Less efficient"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Multiple indexes can be specified per use of the command"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: More efficient"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: More error prone"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, you are able to mark recipes as not attempted, even if they have not been marked as attempted."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to notify users if the recipe they are trying to unmark as done has not been attempted."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would greatly enhance the usefulness of the `undo` function in *CookBuddy*."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::UndoCommandImpl[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::ViewCommandImpl[]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Viewing recipes [Adarsh]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `view` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `view` command."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `view` command is implemented in the _ViewCommand_ class."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `view` command is run."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `view` command"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::ViewActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `view` command, the user will specify the index of the recipe that they wish to view."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _ViewCommandParser_ ensures that index specified is valid and returns a _ViewCommand_."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `view` command"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `view` command"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::ViewSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should the user specify the recipe they want to view"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): Using the index of the recipe"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Easily identified from the GUI"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: -"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Using the name of the recipe"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: Users may know the name of the recipe better than the index"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Less efficient"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, the `view` command only takes in the index of the recipe."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to allow users to input the recipe name they want viewed."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "That way, users can input either the recipe name or index."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::ViewCommandImpl[]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::TimeCommandImpl[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Assigning a time to a recipe [Adarsh]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following section describes how the `time` command is implemented as well as design considerations that were taken into account during its implementation."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Some possible future improvements are also suggested to improve the functionality of the `time` command."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The `time` command is implemented in the _TimeCommand_ class."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following activity diagram shows the possible paths *CookBuddy* can take when a `time` command is run."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Activity diagram of the `time` command"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::TimeActivityDiagram.svg[align\u003d\"center]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". When entering the `time` command, the user will input the index of the recipe they wish to assign a time, as well as the time they wish to assign to the recipe. The time is to be in the following format (hh:MM:ss). Minutes and seconds are optional, and would be set to 0 if no values are provided for them."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". _TimeCommandParser_ ensures that index specified is valid and returns a _TimeCommand_."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The following sequence diagram summarizes the execution of the `time` command"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".Sequence diagram for the execution of a `time` command"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::TimeSequenceDiagram.svg[align\u003d\"center\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Should the minutes and seconds be mandatory inputs"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 1 (Chosen): No, they can be optional inputs"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: More efficient"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: -"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* Alternative 2: Yes, they should be mandatory inputs"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Pros: -"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Cons: Much less efficient"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Possible improvements"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "In the current implementation, we are parsing the hours, minutes and seconds as integers."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "A possible improvement would be to use the java.util.time class."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::TimeCommandImpl[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Certain properties of the application may be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[Implementation-Future]]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Features coming in `v2.0`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "We have some exciting features in line for `v2.0`, and some of these include:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Converting between units: American users of our application might be more comfortable with pounds, quarts, gallons and such. Therefore, we aim to implement a seamless conversion between US customary and metric units, with a one-command (or click) way to switch between the two."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* We also note that users may prefer some advanced UNIX-style compressed syntax; hence, we are exploring using the https://picocli.info/[PicoCLI] library to implement _both_ the current Windows-style slash-based syntax, as well as UNIX-style dash-based syntax. This is a _single_ class that can either be imported as a dependency, or directly included as source."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "We expect that this change would also drastically decrease code length and improve stability and testability, given the current implementation spans not just several _classes_, but two entire _packages_: `cookbuddy.logic.parser`, and `cookbuddy.logic.command`. As it is now, we have needless object-orientation for the sake of doing so, and we believe in simplicity as much as possible."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* We understand users who cook love to share their creations with friends and family; therefore, we intend to use social media APIs from Facebook, Google, Twitter, Reddit, Instagram, and Snapchat, to allow users to share their recipes to the world."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Users might not be comfortable with keeping their computers near the stove, hence, we plan to offer two solutions in `v2.0`:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "** We plan to release mobile apps for the two major platforms, Android and iOS."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "** For users more comfortable with paper, we plan to allow _printing_ of recipes to PDF, and directly to printers. This engine is intended to be powered by `LaTeX`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Product Scope [Done by Zain Alam \u0026 Sharadh Rajaraman]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Target user profile*: [Done by Sharadh Rajaraman]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* cooks for oneself on a nearly daily basis, and hence:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   - needs to manage many recipes"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   - needs to have a clean interface to view and read recipes"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   - experiments with dishes"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* is reasonably familiar with the command-line"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* requires a straightforward means to catalogue and codify dishes and meals without using spreadsheets"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Value proposition*: [Done by Zain Alam]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Store, retrieve, manage and display recipes faster than navigating through websites and bookmarks, with command-line input, but GUI responses."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Present a unified interface for recipe management."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* When managing recipes:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   - allow easier and faster retrieval with attributes like tags, time, difficulty, etc;"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   - present a straightforward interface to edit, duplicate and combine recipes into meals"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* Overall increase in productivity."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::UserStories[]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d User Stories [Done by Sharadh Rajaraman and Adarsh Chugani]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Priorities: *High* (must have), *Medium* (nice to have), *Low* (unlikely to have)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%, 30%, 30%, 30%\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| Priority | As a/an …                                           | I want to …                                                                        | So that…"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | add a recipe                                                                       | I can keep track of the recipe"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | delete a recipe                                                                    | I can stop keeping track of the recipe"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | list out all the recipes I have                                                    | I can easily see what recipies I have"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | view the recipe                                                                    | I can use the recipe"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | More experienced user                               | duplicate a recipe                                                                 | I can modify a copy and keep the original"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | User who is inexperienced with software             | use a helper command                                                               | I can see all the commands and how to use them"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | add instructions for the recipe                                                    | I know how to cook the dish"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | add ingredient to recipe                                                           | I know how much ingredients to use"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Health-focused user                                 | track the amount of calories a dish has                                            | I know how healthy a dish is"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | add time it takes to prepare / cook recipe                                         | I know how long it takes to cook the recipe"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Organized user                                      | tag recipes based on meal time (breakfast/lunch/dinner)                            | I can easily refer to them"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | User who likes experimenting                        | modify a recipe                                                                    | I can change the components of the recipe"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Regular user                                        | add a serving size of a dish                                                       | I know the serving size of the recipe"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Time-strapped user                                  | see the preparation and cooking time for each recipe                               | I can plan my schedule around the time needed"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | Health-focused user                                 | search for a dish based on how many calories i want to consume                     | I can eat healthily"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | User who is new to cooking                          | tag recipes based on difficulty (beginner/intermediate/master)                     | I can check if I am skilled enough to cook the dish"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|   *High* | User with many recipes                              | tag recipes based on their cuisine (western, chinese, indian etc)                  | I can find them easily"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User who wants to be efficient                      | favourite recipes/dishes                                                           | I can easily refer back to them"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User who wants to get rid of ingredients            | search for dishes based on ingredients                                             | I can use up the ingredients that I want to get rid of"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User with many recipes                              | search for recipes based on a word in the dish name                                | I can find it easily"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Organized user                                      | mark recipe as successfully done                                                   | I can keep track of the recipes I have successfully attempted"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Inexperienced user                                  | view the recipe in a GUI                                                           | I have more visual feedback to work with"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Inexperienced user                                  | view an image of the final dish                                                    | I know what dish I am cooking"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Organized user                                      | have a counter of total recipes in the book                                        | I can know how many recipes I have"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User who likes experimenting                        | give me a random recipe that i have added                                          | I can challenge myself to cook what has been given"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Regular user                                        | give a rating for the dish                                                         | I can tag, search for and sort dishes based on my rating of the dish"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User with a limited budget                          | find recipes within my budget                                                      | I do not overspend"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User with allergies                                 | tag the dish as dangerous for allergies                                            | I can avoid cooking the dish"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | User who not experienced                            | highlight instructions in the recipe                                               | I can follow the recipe more easily"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Organized user                                      | sort my recipes based on criteria (tags)                                           | I can choose what order to view them"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| *Medium* | Regular user                                        | add ingredient prices                                                              | I can tabulate the total cost of cooking dishes"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User with a limited budget                          | view the price of a specific ingredient                                            | I know how much a ingredient costs"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User with many friends                              | import and combine my friend\u0027s recipes from a file (.txt perhaps)                  | I can have access to their recipies"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who enjoys challenging themselves              | suggest dish to attempt based on my previous successful attempts                   | I can become more skillful"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | Regular user                                        | choose to only see the basic information for the recipe                            | I can easily skim through the instructions and ingredients"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User on a budget                                    | check the total price of the dish                                                  | I can check if it is within my budget"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User cooking for a group / occasion                 | scale up/down the recipe                                                           | I can prepare food for different group sizes"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User cooking for a group / occasion                 | find out how much of each ingredient i need                                        | I can get the ingredients at one go"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | Health-focused user                                 | add nutrition facts                                                                | I can see how much sugar, salt, fat etc is in the dish prepared"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who is more familiar with the metric system    | Convert between metric and imperial sizes.                                         | I can use the tools I have without needing to convert elsewhere"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who usually prepares multiple dishes as sets   | group dishes into sets                                                             | I can be more organised when cooking"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who is experienced with the software           | use shorthand commands                                                             | I can navigate the software more efficiently"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who wants to challenge myself                  | have a timer/stopwatch                                                             | I can time myself when I cook dishes and have a \"best time\" feature"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who doesn\u0027t like screens and prefers paper     | print recipes as pdf/paper                                                         | I can refer to it more easily"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who likes sharing my cooking                   | post my recipes and dishes on social media                                         | I can share recipes and images for others to use"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|    *Low* | User who appreciates efficiency                     | add a recipe directly from online                                                  | I can be efficient"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::UserStories[]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Use Cases [Done by Sharadh Rajaraman]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "(For all use cases below, the *System* is `CookBuddy` and the *Actor* is the `User`, unless specified otherwise)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Use case: List recipes"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "1.  `User` requests to list recipes"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "2.  `CookBuddy` displays the list of recipes"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* 1a. The name cannot be found, or the index is invalid."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** 1a1. `CookBuddy` throws an error message."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** 2a1. `CookBuddy` displays a message stating the list is empty"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Use case: Delete recipe"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "muhd97"
        },
        "content": "1.  `User` requests to delete a specific _recipe_ by specifying its index"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "2.  CookBuddy deletes the recipe"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* 1a. The name cannot be found, or the index is invalid."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** 1a1. `CookBuddy` throws an error message."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Use case: Modify recipe"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "1. `User` requests to modify a recipe"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "2. `CookBuddy` edits attributes of the recipe, and asks for user confirmation"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "3. `User` confirms the edit"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* 1a. `User` does not provide new attributes."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "** `CookBuddy` throws an error message."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* 2a. `User` does not confirm."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** 2a1. `CookBuddy` does not save the edit"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Non Functional Requirements [Done by Zain Alam]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".  Should be able to hold up to 1000 recipes without noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".  Commands should be \u003c\u003cone-shot-c,one-shot\u003e\u003e commands as opposed to \u003c\u003cmulti-level-c, multi-level commands\u003e\u003e."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".  CookBuddy should be able to function without internet access."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".  A user should be able to familiarise herself with less than 30 minutes of usage."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Glossary [Done by Zain Alam]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[attributes]] Attributes::"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The information of a recipe. For example, calories, ingredients or instructions etc."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Windows, macOS, Linux, UNIX"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[multi-level-c]] Multi-level Commands::"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Commands that require multiple lines of user input for execution."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[one-shot-c]] One-shot Commands::"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Commands that are executed using only a single line of user input."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[recipe]] Recipe::"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "A list of ingredients followed by a list of instructions, detailing how to prepare a dish."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "A (possibly custom) text marker that users can use to organise their recipes; examples include `vegetarian`, `spicy`, `Indian`. Tags can themselves be organised into groups, such as `cuisines`, `diet`, `ingredients`, `mealtime`, etc."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Product Survey [Done by Zain Alam]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*CookBuddy*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Author: Zain Alam"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Functionality"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Ease of recipe management"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Tracks calories, rating and diffculty"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Non-funtional requirements"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Well-designed GUI"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Cross platform"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Functionality"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Unable to find a recipe with more than one parameters at a time"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Unable to pin recipes when working with multiple meals"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Unable to translate a recipe from one language to another language"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Non-functional requirements"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* slightly GUI-dependent, some buttons need to be clicked and screens traversed to perform a task"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::ManualTesting[]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d Instructions for Manual Testing [Done by Kevin]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are advised to do more _exploratory_ testing."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Launching *CookBuddy*"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Ensure you are using *Java 11* by opening a Command Prompt / terminal and run `java -version`."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Download the latest *CookBuddy* jar file https://github.com/AY1920S2-CS2103T-W12-4/main/releases[here] and copy it into an empty folder"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Launch Command Prompt / a terminal, navigate to the folder *CookBuddy* is in and enter `java -jar CookBuddy.jar`. Do not double-click CookBuddy.jar +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Shows *CookBuddy\u0027s* GUI with a set of sample recipes. The window size may not be optimum."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Resize *CookBuddy\u0027s* window to an optimum size. Move the window to a different location on the screen. Close the window."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Re-launch *CookBuddy* by entering `java -jar CookBuddy.jar` in a Command Prompt / terminal. +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Exiting *CookBuddy*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. On Windows, click the _Close Window_ button btn:[X] on the top-right corner of *CookBuddy\u0027s* GUI"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. On Mac, click the _Close Window_ button btn:[X] on the top-left corner of *CookBuddy\u0027s* GUI"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Type `exit` in *CookBuddy\u0027s* command box and press kbd:[Enter]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Expected: *CookBuddy* will shut down."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Adding a recipe"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Add a recipe with all mandatory fields present. Name (n/), Ingredients (ing/) and Instructions (ins/) are mandatory fields."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisites: The recipe to be added is not present in the recipe book."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test case: `new n/Eggs on Toast ing/bread, 2 slices; egg, 1 ins/toast the 2 slices of bread; scramble the eggs;"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "               put eggs on toasted bread; serve` +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The _Eggs on Toast_ recipe is added to the recipe list. Details of the newly added recipe is shown in the result pane."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Add a recipe with one mandatory field missing, Instructions in this case."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test case: `new n/Eggs on Toast ing/bread, 2 slices; egg, 1` +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: No recipe is added. An _\"Invalid command format\"_ error message is shown in the result pane."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Add a recipe with a missing ingredient quantity (egg is missing its quantity)"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `new n/Eggs on Toast ing/bread, 2 slices; egg ins/toast the 2 slices of bread; scramble the eggs;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "               put eggs on toasted bread; serve` +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: No recipe is added. Error message _No quantity has been provided for one or more ingredients!_ is shown in the result pane."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Modifying a recipe"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* should contain at least one recipe."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "If no recipe exists, delete the _data_ folder and re-launch *CookBuddy*."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The recipe book should contain two recipes, _Ham Sandwich_ \u0026 _Idiot Sandwich_."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The Modify command allows changing multiple attributes in one command."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "For example, `modify 1 n/Rice cal/250` updates both recipe 1\u0027s name and calories."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s name"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 n/Chicken Rice` +"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s name is updated to _Chicken Rice_."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 n/` +"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s name is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 n/!@#abc` +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s name is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s ingredients"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 ing/ing1, qty1; ing2, qty2` +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s original ingredients should be overwritten with ing1 \u0026 ing2."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 ing/ing1, ; ing2, qty2` +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s ingredients are not updated due to ing1 missing its quantity."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 ing/, qty1; ing2, qty2` +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s ingredients are not updated due to ing1 missing its name."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s instructions"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 ins/ins1; ins2` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s original instructions should be overwritten with ins1 \u0026 ins2."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 ins/` +"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s instructions should not be updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s calories"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 cal/2000` +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s calories should be updated to 2000 kCal."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 cal/abc` +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s calories is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s serving size"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 s/3` +"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s serving size should be updated to 3."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 s/abc` +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s serving size is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s difficulty"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 d/4` +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s difficulty should be updated to 4 on a scale of 1 to 5."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 d/6` +"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s difficulty is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 d/abc` +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s difficulty is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s rating"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 r/5` +"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s rating should be updated to 5 stars."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 r/8` +"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s rating is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 r/abc` +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s rating is not updated. Error details are shown in in result pane."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Modifying a recipe\u0027s tags"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 t/breakfast` +"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s tags should be updated to contain *one* tag, _breakfast_."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 t/breakfast, lunch` +"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s tags should be updated to contain *two* tags, _breakfast_ \u0026 _lunch_."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `modify 1 t/` +"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s tags should be updated to contain *zero* tags."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Finding a recipe"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Finding recipes by name"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisite: *CookBuddy* contains a recipe with _Ham_ in its name. +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Test Case: `find n/Ham` +"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Recipes with the word _Ham_ in their name are listed."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisite: *CookBuddy* contains _Ham Sandwich_ and _Idiot Sandwich_. +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Test Case: `find n/Ham Sandwich` +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Recipes whose name contains _Ham_ or _Sandwich_ are listed."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   So both _Ham Sandwich_ and _Idiot Sandwich_ are listed."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Finding recipes by ingredient"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisite: *CookBuddy* contains a recipe with _bread_ in its ingredients. +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Test Case: `find ing/bread` +"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Recipes whose ingredient names contain _bread_ are listed."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Finding recipes by instruction"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisite: *CookBuddy* contains a recipe with _ham_ in its instructions. +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Test Case: `find ins/bread` +"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Recipes whose instructions contain _ham_ are listed."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Marking a recipe as done / not done"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* should contain at least one recipe."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "If no recipe exists, delete the `data` folder and re-launch *CookBuddy*."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The recipe book should contain two recipes, _Ham Sandwich_ \u0026 _Idiot Sandwich_."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Marking a recipe as done"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `done 1` +"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe should be marked as done."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `done n` (where n is larger than the list size) +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid list index number."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `done abc` +"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid integer."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Marking a recipe as not done"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `undo 1` +"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe should be marked as not done."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `undo n` (where n is larger than the list size) +"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid list index number."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `undo abc` +"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid integer."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Marking a recipe as a favourite / not a favourite"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* should contain at least one recipe."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "If no recipe exists, delete the `data` folder and re-launch *CookBuddy*."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The recipe book should contain two recipes, _Ham Sandwich_ \u0026 _Idiot Sandwich_."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Marking a recipe as a favourite"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `fav 1` +"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe should be marked as favourite, indicated by the filled heart symbol."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `fav n` (where n is larger than the list size) +"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid list index number."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `fav abc` +"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid integer."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Un-marking a recipe as a favourite"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `unfav 1` +"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe should be un-marked as favourite, indicated by the un-filled heart symbol."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `unfav n` (where n is larger than the list size) +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid list index number."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `unfav abc` +"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a valid integer."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Adding a prep time to a recipe"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* should contain at least one recipe."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "If no recipe exists, delete the `data` folder and re-launch *CookBuddy*."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The recipe book should contain two recipes, _Ham Sandwich_ \u0026 _Idiot Sandwich_."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Adding a prep time"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `time 1 00:15` +"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s prep time should be updated to _15 minutes_."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `time 1 00:15:30` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe\u0027s prep time should be updated to _15 minutes and 30 seconds_."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `time 1 00:63` +"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: An error message is shown in the result pane prompting the user to enter a _minutes_ value which is \u003c 60."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test Case: `time 1 00:15:65` +"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: Expected: An error message is shown in the result pane prompting the user to enter a _seconds_ value which is \u003c 60."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Deleting a recipe"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ". Deleting a recipe while all recipes are listed"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Prerequisites: List all recipes using the `list` command. Have at least one recipe in the list."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: The first recipe is deleted from the list. Details of the deleted recipe is shown in the result pane."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: No recipe is deleted. Error message _\"The recipe index provided is invalid\"_ is shown in the result pane."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test case: `delete n` (where n is larger than the list size) +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test case: `delete` +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: No recipe is deleted. An error message prompting the user to provide an index is shown in the result pane."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Test case: `delete abc` +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   Expected: No recipe is deleted. An error message prompting the user to provide a valid integer is shown in the result pane."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Saving *CookBuddy\u0027s* recipe book to the save file."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Enter any valid command that modifies data in the recipe book."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. A file named _recipebook.json_ should be created in the _data/_ folder."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Dealing with missing/corrupted data in *CookBuddy\u0027s* save file"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. Edit _recipebook.json_ and delete any recipe\u0027s _difficulty_ parameter and re-launch *CookBuddy*."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".. The recipe whose _difficulty_ was deleted will have defaulted back to 0 difficulty."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::ManualTesting[]"
      }
    ],
    "authorContributionMap": {
      "muhd97": 86,
      "sharadhr": 136,
      "AdarshChugani": 280,
      "-": 307,
      "kevinswk94": 375
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d CookBuddy - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 121
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all recipes who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The above method can be used to get a printable string representing a bunch of recipe details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "-": 214
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d CookBuddy - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". *JDK `11`*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Run `cookbuddy.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S2-CS2103T-W12/main`), you should do the following:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, CookBuddy\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 6,
      "-": 76
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d CookBuddy - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "e.g. `cookbuddy.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "e.g. `cookbuddy.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "e.g. `cookbuddy.logic.parser.RecipeBookParserTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 5,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# CookBuddy Recipe Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ":toc-title: Table Of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W12-4/main/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "By: `AY1920S2-CS2103T-W12-4`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d Product Information [Done by Zain Alam]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Greetings, and welcome to CookBuddy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Looking for an all-in-one solution to manage your recipe? Look no further!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*CookBuddy* is an integrated platform fully customized for users with the aim of helping you manage your recipes effectively. The application allows you to keep track of your recipes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "It looks like you will never have to worry about finding your recipe anymore!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "CookBuddy uses a graphical user interface (GUI) to display your recipes, while allowing interaction using text, which is optimised for users familiar with the command-line, and are fast typists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you are looking for a way to easily manage your recipes and have quick fingers, then CookBuddy is definitely for you!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Interested?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Proceed to \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d How to navigate this User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "This user guide provides documentation on CookBuddy such as a quick start guide and an overview of its features for you to fully utilise CookBuddy."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you want to find out more about CookBuddy\u0027s features and commands, you can go to the \u003c\u003cFeatures\u003e\u003e section."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you need an overview regarding the usage of CookBuddy\u0027s commands, head on to the \u003c\u003cCommand Summary\u003e\u003e section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Throughout this guide, you may come across a few symbols."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "They are used to draw your attention to important or note-worthy information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Here are the symbols used in this User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "This block displays additional *notes* that contains extra information that you should take note of."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "This block displays *tips* that you may find useful."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "This block displays *cautions* that you should exercise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::QuickStart[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The following steps will walk you through installing *CookBuddy* on your computer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Ensure you have Java 11 or later installed on your computer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - If not, download and install the latest Java Runtime Environment from https://www.java.com/en/download/[here]."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Download the latest CookBuddy.jar from https://github.com/AY1920S2-CS2103T-W12-4/main/releases[here]."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Copy the executable to the folder you want to use as the home folder for *CookBuddy*."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Double-click the executable to start *CookBuddy*. CookBuddy\u0027s GUI should appear in a few seconds as shown in the diagram below:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".Home page of *CookBuddy*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Type your command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "   e.g. typing `help` and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "   * `list` : lists all the recipes stored in CookBuddy."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "   * `new n/Ham Sandwich ing/bread, 2 slices; ham, 1 slice ins/put ham between bread; serve on plate`:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    adds a recipe named \"Ham Sandwich\" to *CookBuddy*."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "   * `delete 3` : deletes the 3rd recipe shown in the current list from CookBuddy."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "   * `exit` : quits *CookBuddy*."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::QuickStart[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Understanding CookBuddy’s GUI [Done by Zain Alam]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "This section teaches you on how to utilise *CookBuddy’s* GUI."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".The different components of CookBuddy\u0027s GUI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/ui-components.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhd97"
        },
        "content": "There are four major components that you will be using in *CookBuddy* as seen in the diagram above and will be referenced in the upcoming sections."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". *Menu bar* +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The menu bar contains clickable buttons that you can use to execute certain commands, such as help, `help` to open the help window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". *Command Line* +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "_The command line is where you enter all your commands in *CookBuddy*._ +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhd97"
        },
        "content": "+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhd97"
        },
        "content": "After entering your command, you can execute it by simply using the kbd:[Enter] key on your keyboard!"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". *Result Display* +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The result display displays feedback from *CookBuddy* to you after you have executed a command in *CookBuddy*."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". *Status bar* +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The status bar shows you the path where your data is saved when you are using the features of *CookBuddy*."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d  Features"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "The following sub-sections describes the features you can use in *CookBuddy*."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".COMMAND FORMAT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* Words in `UPPER_CASE` are values of the parameters to be supplied by the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ** In `find n/RECIPE_NAME`, `RECIPE_NAME` refers to the value of the `n/` parameter supplied to the `find` command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* Words in square brackets indicate that they are optional. `[t/TAG]` means the `t/` parameter is optional."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Please follow the format specified *strictly* and carefully."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Command History [Done by Kevin]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can view previously entered commands with kbd:[Page Up] and kbd:[Page Down]."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Ensure the _Command Box_ is in focus."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "To view the previous command in the command history, press kbd:[Page Up]."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "To view the next command in the command history, press kbd:[Page Down]."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d  Help — `help`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can list all the commands recognised by *CookBuddy* by typing `help` into the command box and pressing kbd:[Enter]."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you also specify a command after typing help, *CookBuddy* will show how to use that specific command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhd97"
        },
        "content": "TIP: You can also execute this command by using the kbd:[F1] key on your keyboard."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example 1: You can type `help` and *CookBuddy* will display the commands that it recognises."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhd97"
        },
        "content": "A separate help window will appear."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/helpwindow.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example 2: You can type `help delete` and *CookBuddy* will show you how to use the `delete` command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muhd97"
        },
        "content": "A separate help window will appear with details on the delete command\u0027s usage."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/helpwindowdelete.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::AddRecipe[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Adding a recipe — `new` [Done by Kevin]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can add a new recipe to *CookBuddy* using the `new` command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Parameters in *bold* indicate they are mandatory."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Format: `new *n/NAME* *ing/INGREDIENT, QUANTITY* [; ...] *ins/INSTRUCTION* [; ...] [p/PATH] [cal/CALORIES] [s/SERVING_SIZE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[r/RATING] [t/TAG [, ...]]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Remember to follow the format specified *strictly* and carefully."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* accepts the following parameters:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    * `n/` - *name of the recipe*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * `ing/` - *ingredients in the recipe*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * `ins/` - *instructions to follow*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    * `p/` - path of the recipe\u0027s photo"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    * `cal/` - calories in the recipe (in kcal)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    * `s/` - serving size of the recipe (any integer greater than 0)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    * `r/` - personal rating of the recipe (any integer between 0-5 inclusive)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * `d/` - difficulty in following the recipe (any integer between 0-5 inclusive)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * `t/` - tags (separated by commas)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example 1: You can enter `new n/Fried Rice ing/White rice, 1 cup; salt, 1 gram ins/Fry the rice; add salt` into *CookBuddy*, and a new recipe with the following attributes will be added:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * Name: Fried Rice"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * Ingredients:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ** 1 cup of white rice"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ** 1 gram of salt"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * Instructions:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        . Fry the rice"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        . Add salt"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) If you would like to add a recipe to *CookBuddy*, enter the `new` command including the attributes of the recipe"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/new-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `new` command, the new recipe will be added to *CookBuddy* and will be displayed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/new-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::AddRecipe[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d Viewing a Recipe — `view`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can view a recipe at the given index on *CookBuddy* using the `view` command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "muhd97"
        },
        "content": "`INDEX` must be a positive integer value, within the range of the number of recipes in your CookBuddy."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `view 2` and *CookBuddy* will display you the recipe at index 2 on the main page."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to view the second recipe in *CookBuddy*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/view-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".2) After using the `view` command, the recipe will be displayed to you"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/view-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::TimeCommand[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Assigning a time to a recipe — `time` [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "You can assign a time to an existing recipe from *CookBuddy* using the `time` command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `time INDEX TIMING`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* `INDEX` must be a positive integer value, within range of the number of recipes in *CookBuddy*."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* The timing specified must be in the format hh:MM:ss"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* for the timing, it is optional to include minutes and seconds. If they are omitted, they will be set to 0."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: You can type `time 1 00:10:00` and *CookBuddy* will assign the recipe at index 1 a timing of 10 minutes."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".1) You want to assign the first `recipe` in CookBuddy a timing of 10 minutes."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::user-guide/timecommand-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ".2) After typing in `time 1 00:10:00` command, the recipe time will be updated accordingly"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "image::user-guide/timecommand-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::TimeCommand[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Deleting a recipe — `delete`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can delete an existing recipe from *CookBuddy* using the `delete` command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `delete 1` and *CookBuddy* will delete the recipe at index 1."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* `INDEX` must be a positive integer value, within the range of the number of recipes in *CookBuddy*."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to delete the first recipe in *CookBuddy*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/delete-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `delete` command, the recipe will be removed from *CookBuddy*"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/delete-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "This command cannot be undone. Once a `recipe` has been deleted, its respective data entry in the save file will be permanently deleted."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "+"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//See \u003c\u003cdata-storage\u003e\u003e for more details."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::ModifyRecipe[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Modifying a recipe — `modify`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can modify the attributes of an existing recipe in *CookBuddy* using the `modify` command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Format: `modify INDEX [ing/INGREDIENT, QUANTITY [; ...]] [ins/INSTRUCTION [; ...]] [cal/CALORIES] [s/SERVING_SIZE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[r/RATING] [t/TAG [, ...]]`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "muhd97"
        },
        "content": "`INDEX` must be a positive integer value, within range of the number of recipes in *CookBuddy*."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Remember to follow the format specified *strictly* and carefully."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying a recipe\u0027s ingredients"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can modify a recipe\u0027s ingredients by appending `ing/INGREDIENT, QUANTITY [; ...]` to a `modify` command."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `modify 1 ing/ham, 2 slices` and *CookBuddy* will modify the ingredients of the 1st recipe in"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "muhd97"
        },
        "content": "the list to contain 2 slices of ham."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to modify the `recipe ingredients` in your CookBuddy"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifyingredient-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe ingredients` will be changed accordingly"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifyingredient-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying a recipe\u0027s instructions"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can modify a recipe\u0027s instructions by appending `ins/INSTRUCTION [; ...]` to a `modify` command."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `modify 2 ins/boil eggs; slice apples` and *CookBuddy* will modify the instructions in the 2nd"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "recipe to contain two instructions:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * boil eggs"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * slice apples"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying a recipe\u0027s tags"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can modify a recipe\u0027s tags by appending `[t/TAG [, ...]]` to a `modify` command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "muhd97"
        },
        "content": "If you want to remove all the tags from the recipe, append `t/` instead."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example 1: You can type `modify 2 t/lunch, dinner` and *CookBuddy* will update the tags in the 1st recipe to contain"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "two tags:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * lunch"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    * dinner"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to modify a recipe\u0027s tags in *CookBuddy*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/modifytag-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `modify` command, the recipe\u0027s tags will be changed accordingly"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example 2: You can type `modify 1 t/` and *CookBuddy* will remove all the existing tags from the 1st recipe."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to remove all the tags from a recipe in *CookBuddy*"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/modifyremovetag-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `modify` command, the recipe\u0027s tags will be removed accordingly"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "muhd97"
        },
        "content": "image::user-guide/modifyremovetag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::ModifyRecipe[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::FavCommand[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Favouriting a recipe — `fav` [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "You can favourite an existing recipe from *CookBuddy* using the `fav` command."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `fav INDEX`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* `INDEX` must be a positive integer value, within range of the number of recipes in *CookBuddy*."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* A favourited recipe is indicated by a red filled heart."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `fav 1` and *CookBuddy* will favourite the recipe at index 1."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::FavCommand[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::UnFavCommand[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Un-Favouriting a recipe — `unfav` [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can un-favourite an existing recipe from *CookBuddy* using the `unfav` command."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `unfav INDEX`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* `INDEX` must be a positive integer value, within range of the number of recipes in your CookBuddy."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Recipes are not favourited by default."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* This command is only useful if you wish to un-favourite a recipe that is already favourited."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* A non-favourited recipe is indicated by a heart with a read outline and no fill."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::UnFavCommand[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::DoneCommand[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Marking a recipe as done — `done` [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can mark an existing recipe from *CookBuddy* as being done using the `done` command. This indicates that the recipe"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "muhd97"
        },
        "content": "has been attempted."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* `INDEX` must be a positive integer value, within the range of the number of recipes in your CookBuddy."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: You can type `done 1` and *CookBuddy* will mark the recipe at index 1 as being done, indicating that it has"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "been attempted."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::DoneCommand[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::UndoCommand[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Un-Marking a recipe as done — `undo` [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "You can un-mark an existing recipe from *CookBuddy* as being done, using the`undo` command. This indicates that the"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "recipe has not been attempted."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `undo INDEX`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* `INDEX` must be a positive integer value, within range of the number of recipes in your CookBuddy."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* Recipes are marked as not attempted by default."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* This command is only useful if you wish to un-mark recipe that is already marked as done."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `undo 1` and *CookBuddy* will un-mark the recipe at index 1 as done, indicating that it has not"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "muhd97"
        },
        "content": "been attempted."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::UndoCommand[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d Listing recipes — `list`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can list all the existing recipes from *CookBuddy* using the `list` command. This command also helps to refresh"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "muhd97"
        },
        "content": "the current recipe list."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `list` and *CookBuddy* will display all the recipes that are currently stored in it."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// tag::FindRecipe[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Finding recipes — `find` [Done by Kevin]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can find an existing recipe with a particular attribute from *CookBuddy* using the `find` command."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Format: `find [n/NAME [...]]` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Format: `find [ing/INGREDIENT 1, QUANTITY [; ...]]` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Format: `find [ins/INSTRUCTION [; ...]]`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*CookBuddy* can find recipes from one parameter at a time."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a recipe by name"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can find a recipe by its name by running `find n/NAME [...]`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `find n/Ham` and *CookBuddy* will display recipes that contain the word *Ham* in their name."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Expected Outcome*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to find recipes that contain *Ham* in their name"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findName-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `find n/Ham` command, recipes that contain *Ham* in their name are displayed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findName-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a recipe by ingredient"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can find a recipe by its ingredients by running `find ing/INGREDIENT [...]`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `find ing/bread` and *CookBuddy* will display the recipes containing *bread* as an ingredient to you."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to find recipes that contain *bread* in their ingredients"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findIngredients-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `find ing/bread` command, recipes that contain *bread* in their ingredients are displayed."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findIngredients-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a recipe by instructions"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can find a recipe by its instructions by running `find ins/INSTRUCTION [...]`."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example: You can type `find ins/head` and *CookBuddy* will display the recipes containing *head* in its instructions to you."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".1) You want to find recipes that contain *head* in their instructions"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findInstructions-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "[caption\u003d]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".2) After using the `find ins/head` command, recipes that contain *head* in their ingredients are displayed."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "image::user-guide/findInstructions-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// end::FindRecipe[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d\u003d Counting recipes — `count`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can count the total number of recipes stored in *CookBuddy* using the `count` command."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Format: `count`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `count` and *CookBuddy* will display the total number of recipes stored in it."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "//"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "//"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// \u003d\u003d\u003d Duplicate Recipe — `dup \u003cindex\u003e`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// Duplicates the recipe found at the specified index, and places the new recipe at `index + 1`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// Useful for users who wish to experiment with recipes while keeping a copy of the original."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Deleting all recipes — `reset`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can remove all the recipes stored in *CookBuddy* using the `reset`command."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Format: `reset`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `reset` and *CookBuddy* will clear all the recipes stored in it."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//*Expected Outcome*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.1) You want to favourite the first `recipe` in your CookBuddy"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/fav-before.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//[caption\u003d]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//.2) After using the `modify` command, the `recipe tags` will be changed accordingly"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "muhd97"
        },
        "content": "//image::user-guide/modifytag-after.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d\u003d Exiting CookBuddy — `exit`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "muhd97"
        },
        "content": "You can exit from *CookBuddy* using the `exit` command."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Example: You can type `exit` and *CookBuddy* will terminate."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d Configuration and Recipe Data [Sharadh]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "CookBuddy may be easily configured, by editing the key-value pairs in `preferences.json`, which is automatically created at the same folder where the CookBuddy `jar` file is. The key-value pairs are detailed in \u003c\u003cconfigoptions\u003e\u003e."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[[configoptions]]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[options\u003d\"header\",width\u003d700]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".`preferences.json` key-value pairs"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|Key|Default value|Valid values"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|`windowWidth`|740.0|Any positive floating-point (decimal) number"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|`windowHeight`|600.0|Any positive floating-point (decimal) number"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|`windowCoordinates: x`|398|Any positive integer"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|`windowCoordinates: y`|88|Any positive integer"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "| `dataFilePath`|`data/recipebook.json` on *nix, `\\data\\\\recipebook.json` on Windows | Any valid file path appropriate to the OS"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|\"recipeImagePath\" | `data/images` on *nix, `data\\\\images` on Windows | Any valid file path appropriate to the OS"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Recipe data"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The recipe data is stored in the specified path above, as _another_ `.json` file, with key-value pairs."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Do *_not_* edit the `recipebook.json` file by hand, nor delete any lines from the file. CookBuddy may fail to read the file and may crash, or worse, overwrite the file with placeholder data."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The file may be copied out elsewhere for editing, but adhere strictly to the format as written out by CookBuddy."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d\u003d\u003d Image data"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Each recipe\u0027s image is stored as a `.png` file in the pecified folder, with the recipe name, and a unique identifier (UID). If a given recipe does not have an image, CookBuddy will automatically use a placeholder instead, and denote so in `recipebook.json`."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// tag::FutureStuff[]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d Coming in v2.0 [Done by: Adarsh Chugani]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Look forward to these features coming up in version 2.0 of CookBuddy!"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Adding price *(coming in v2.0)*: `price`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Adds the price attribute to recipes."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "With this, to can assign every recipe a specific price."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `price INDEX PRICE`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Inputs from user:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* INDEX: the index of the recipe you wish to assign a price to"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* PRICE: the price that you wish to assign to the recipe (accepts both integer and decimal values)"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: `price 1 10.50`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would assign the recipe at index a price of $10.50"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Viewing statistics *(coming in v2.0)*: `stats`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Displays your statistics: such as percentage of recipes attempted, difficulty breakdown of attempted recipes, amongst many others."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "With this feature, you will be able to analyse your cooking preferences!"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Suggestions *(coming in v2.0)*: `suggest`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `suggest`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This feature suggests a recipe from your CookBuddy application for you to attempt."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "You will be suggested a recipe based on your statistics, namely the difficulty and ratings of the recipes you have attempted."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The suggested recipe is more likely to be a recipe that you have not attempted, as we do not want you to constantly cook the same recipes."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Additionally, the suggested recipe is more likely to have a difficulty similar to, or slightly higher than the recipes you have attempted, as we want you to grow as a budding cook!"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Scale the recipe *(coming in v2.0)*: `scale`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This feature scales a recipe to your intended size."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "The quantities of the ingredients used, as well as the prep time required will be adjusted for your use."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `scale INDEX SIZE`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Inputs from user:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* INDEX: The index of the recipe you wish to scale"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* SIZE: The size that you wish to scale the recipe to"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: scale 1 3"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would scale the recipe at index 1 to be able to serve 3 people."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Import and export *(coming in v2.0)*: `import`, `export`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Import a file: `import`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Imports recipes from the file at the given path."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `import PATH`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Inputs from user:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* PATH: the file path at which the desired file is"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: import \"/docs/recipebook.json\""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would import the \"recipebook\" JSON file from the docs folder."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d\u003d Export transactions: `export`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Exports all transactions to the given path."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `export PATH`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Inputs from user:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* PATH: the file path at which the desired file is"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Exports the recipes from cookbuddy into the given path"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: export \"/docs/\""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would export the recipes from CookBuddy into a file in the docs folder."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Printing *(coming in v2.0)*: `print`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Prints out the recipe."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `print INDEX`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Key-Words:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* INDEX: the index of the recipe you wish to print."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: `print 1`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would print out the recipe at index 1."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d\u003d Sharing Recipes *(coming in v2.0)*: `share`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Prints out the recipe."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Format: `share INDEX SITE`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Key-Words:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* INDEX: the index of the recipe you wish to share."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* SITE: the website you wish to share the recipe to"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "Example: `share 1 facebook`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "This would share the recipe at index 1 on the user\u0027s facebook account."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "// end::FutureStuff[]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d FAQ [Done by Zain Alam]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The following section answers some questions you might have regarding *CookBuddy*."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: Is *CookBuddy* safe to use?* +"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: Yes, *CookBuddy* is safe to use. We regularly review our code to ensure that there are no vulnerabilities for hackers to exploit."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: Is *CookBuddy* secure?* +"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: Yes, *CookBuddy* is secure. Your data is stored only on your computer. No data is sent to any online server."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: Do I need an Internet connection to use *CookBuddy*?* +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: No. *CookBuddy* works 100% offline."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: Will *CookBuddy* receive updates?* +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*A*: Yes. We are a dedicated team of software developers who are constantly collating feedback and running tests on the app. We are also working towards delivering additional features for our users."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Q: Can I use CookBuddy on a mobile device?* +"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: *CookBuddy* is designed to work best on a desktop/ laptop computer. We are currently working on releasing *CookBuddy* on mobile platforms."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*Q: How do I transfer my data to another Computer?* +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: Download the jar in the other computer and copy the entire data folder over to the same directory. Run *CookBuddy* and update the preferences.json if necessary."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: Can I edit my data folder of *CookBuddy* which contains the information regarding my recipes?* +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: No. Please do not modify the data folder of *CookBuddy*. All modifications of the recipes should be done through the `modify`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "muhd97"
        },
        "content": "command only."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: How do I retrieve back all the recipes in *CookBuddy* if I accidentally reset *CookBuddy*?* +"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: Right now *CookBuddy* does not support a backup feature. Thus, it would be best if you do not accidentally use the `reset`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "muhd97"
        },
        "content": "command. The backup feature will be released soon in the near future."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*Q: *CookBuddy* is not working on my computer. How do I fix it?* +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*A*: Ensure that your computer is running on Java 11 and not other versions. *CookBuddy* does not support other versions of Java."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Command Summary [Done by Zain Alam]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The following section gives a quick summary of all the commands you can use in CookBuddy arranged in an alphabetical order in the table below."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[cols\u003d\"1, 3\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ".Various commands of *CookBuddy*."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|Command | Usage"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `count` | Counts the total number of recipes stored in CookBuddy."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `delete *INDEX*` | Deletes the recipe at the given `INDEX`."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `done *INDEX*` | Marks the recipe at the given `INDEX` as `done`."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `exit` | Exits CookBuddy."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `fav *INDEX*` | Favourites the recipe at the given `INDEX`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `find [n/NAME [...]] [ing/INGREDIENT [...]]` | Finds an existing recipe with the given parameter(s) from CookBuddy."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `help` | Lists all the commands recognised by CookBuddy."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `help [COMMAND]` | Displays how to use the `COMMAND` command."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `list` | Lists all the recipes."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `modify INDEX [ing/INGREDIENT, QUANTITY [; ...]] [ins/INSTRUCTION [; ...]] [cal/CALORIES] [s/SERVING_SIZE]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[r/RATING] [t/TAG [, ...]]` | Modifies the given parameter(s) of the recipe."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `new *n/NAME* *ing/INGREDIENT, QUANTITY* [; ...] *ins/INSTRUCTION* [; ...] [p/PATH] [cal/CALORIES] [s/SERVING_SIZE]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[r/RATING] [t/TAG [, ...]]` | Adds a new recipe."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `reset` | Removes all the recipes from CookBuddy."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `undo *INDEX*` | Undoes the recipe at the given `INDEX`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `unfav *INDEX*` | Un-favourites the recipe at the given `INDEX`."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| `view *INDEX*` | Displays the recipe at the given `INDEX` on CookBuddy."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d Glossary [Done by Zain Alam]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "muhd97"
        },
        "content": "This section will cover and explain certain technical/CookBuddy specific terms used in this user guide in the table below."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "muhd97"
        },
        "content": ".Explanation of various terms used in this user guide."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "muhd97"
        },
        "content": "[cols\u003d\"1, 3\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|Term                           | Explanation"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|Command Line Interface (CLI)   | A user interface where a user is required to use the program by entering commands into a text box."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|Graphical User Interface (GUI) | A user interface that includes visuals such as buttons, icons, images, menus etc."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|Metadata                       | Details associated with  an entity. For example, metadata of a `recipe` include the `name`, `ingredients`, `instructions` etc."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "muhd97": 332,
      "sharadhr": 33,
      "AdarshChugani": 228,
      "-": 67,
      "kevinswk94": 186
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image:netlify/grant_or_request_access.svg[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "-": 58
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::ArrowLength.svg[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::AllDown.svg[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::UpAndDown.svg[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::HiddenArrows.svg[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::ABeforeC.svg[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::CBeforeA.svg[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "|image::PackagesAndConsistency.svg[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "sharadhr": 7,
      "-": 204
    }
  },
  {
    "path": "docs/team/adarshchugani.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d Adarsh Chugani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d PROJECT: CookBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* is a desktop recipe manager for students staying in university accommodation who enjoy cooking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "They can interact with it through a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Major enhancement*: added *the ability to favourite/un-favourite recipes*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** What it does: allows the user to favourite or un-favourite a recipe. A recipe is marked as not favourited by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "default, but the user can change this using the `fav` command. If a user wants to un-favourite a recipe, they may do"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "so using the `unfav` command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Major enhancement #2*: implemented the `view` command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** What it does: allows users to view any recipe on the GUI. Before this feature was implemented, the displayed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "recipe would always be the first recipe added in the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Minor enhancement*: Added the `done` and `undo` features, which behave similarly to the `fav` and `unfav` commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "They are used to mark recipes as attempted and not attempted, respoectively."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Minor enhancement #2*: implemented the `time` command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** What it does: allows users to assign a time to a recipe. Users may exclude hours and seconds when inputting the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "time, and these fields will be set to 0 if they are omitted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dAdarshChugani\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code Contribution]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Updated the GUI color scheme https://github.com/AY1920S2-CS2103T-W12-4/main/issues/71[Pull Request #71]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 27% to 51%: Pull requests https://github.com/AY1920S2-CS2103T-W12-4/main/issues/299[#299], https://github.com/AY1920S2-CS2103T-W12-4/main/issues/300[#300]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Did many changes to the User Guide and Developer Guide: Pull Requests"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/20[#20], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/22[#22],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/89[#89], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/193[#193], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/327[#327] as well as many more."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Approved many team-members PRs, often providing feedback if it did not meet standards."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Contributed to forum discussions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Created the vast majority of the issues on the Issue Tracker"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/issues/[here]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "*** Integrated Codacy as well as Coveralls."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dTimeCommand]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFavCommand]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFutureStuff]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFavCommandImpl]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dTimeCommandImpl]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dViewCommandImpl]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dUserStories]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 79,
      "kevinswk94": 3
    }
  },
  {
    "path": "docs/team/e0316059.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d Mingsi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d PROJECT: CookBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* is a desktop recipe manager for students staying in university accommodation who enjoy cooking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "They can interact with it through a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* *Major enhancement*: added *the ability to duplicate a recipe*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "** What it does: Generally the application does not allow duplicated recipe (recipes with the same names, ingredients and instructions are considered as the same). By adding duplicate command, a new recipe with the same content but a new name with perfix \u0027Duplicate of\u0027 can be added to the recipe list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "** Justification: This feature improves the product because a user can easily make two similar recipes by making small modification after duplication, instead of typing the whole content again."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "** Highlights: The implementation allows the user to add duplicated recipe while pass the \u0027identical recipe\u0027 checking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* *Minor enhancement*: added a scale recipe command that allows the user to scale their recipes by a given size."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003de0316059\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code Contribution]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "*** Participate in group discussion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0316059"
        },
        "content": "*** Added a method to convert the ingredient of a recipe from string to readable quantity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "*** Added command to mark a recipe as done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0316059"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/e0316059/ped)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "e0316059": 10,
      "-": 50,
      "kevinswk94": 3
    }
  },
  {
    "path": "docs/team/kevinswk94.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d Kevin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d PROJECT: CookBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*CookBuddy* is a desktop recipe manager for students staying in university accommodation who enjoy cooking."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "They can interact with it through a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* *Major enhancement*: Morphed addressbook-level3 into a basic version of *CookBuddy*. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/75[#75]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** What it does: allows my teammates to start working on features to extend *CookBuddy*."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** Justification: *CookBuddy* does not make use of the Person class or its fields like _Email_ \u0026 _Address_."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** Highlights: This enhancement affects the commands *CookBuddy* can respond to. For instance, *CookBuddy* responds to `new` instead of `add`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* *Major enhancement*: Created the test framework for *CookBuddy*. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/120[#120]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** What is does: It creates the test framework for my teammates to create test classes for *CookBuddy*."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** Justification: This enhancement makes it a bit easier for my teammates to write test classes for *CookBuddy*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "** Highlights: The test framework has some sample recipes with initialised attributes to make creating test recipes a bit easier."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* *Minor enhancement*: added a Command History feature that allows the user to navigate to previous commands using the page up / page down keys."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/289[#289]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dkevinswk94\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkevinswk94\u0026tabRepo\u003dAY1920S2-CS2103T-W12-4%2Fmain%5Bmaster%5D[Code Contributed]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Reviewed pull requests opened by teammates for code quality and bugs (https://github.com/AY1920S2-CS2103T-W12-4/main/pull/133[#133],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/127[#127], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/257[#257])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Refactored the _AddCommand_ command into _NewCommand_. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/77[#77]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Added a command history to the _Command Box_ so that users can reuse previously entered commands. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/289[#289]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Updated tag parsing from multiple t/ prefixes to a single t/ prefix with comma delimited tags. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/255[#255]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Updated the instructions for the `new` and `modify` commands in the User Guide. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/170[#170]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Updated the instructions for the `find` command in the User Guide. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/314[#314],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    https://github.com/AY1920S2-CS2103T-W12-4/main/pull/164[#164]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Added instructions on how to use the `find` command in the User Guide. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/164/[#164]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Added an explanation of how the `find` command works to the Developer Guide. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/323[#323]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Added Instructions for Manual Testing to the Developer Guide. https://github.com/AY1920S2-CS2103T-W12-4/main/pull/302[#302]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/295[#295],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/293[#293],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/171[#171],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/124[#124],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W12-4/main/pull/113[#113]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "*** Reported bugs and suggestions for other teams during the Practical Exam Dry-Run"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    (examples:  https://github.com/kevinswk94/ped/issues/4[1], https://github.com/kevinswk94/ped/issues/1[2], https://github.com/kevinswk94/ped/issues/6[3])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "include::../UserGuide.adoc[tag\u003dAddRecipe]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFindRecipe]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFindCommandImpl]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dManualTesting]"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "-": 35,
      "kevinswk94": 45
    }
  },
  {
    "path": "docs/team/muhd97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d Zain Alam - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d PROJECT: CookBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*CookBuddy* is a personal desktop recipe manager application for students staying in university accommodation who enjoy cooking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The user can interact with it through a Command Line Interface (CLI) along with a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "It is written in Java and only supports Java 11. It also has close to 10 kLoC. With that being said, there are future plans to expand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "the application to an online version as well as for different platforms."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Added a count command that allows the user to count the total number of recipes stored in CookBuddy."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** What it does: It gives the user an ability to keep track of total number of recipes stored in CookBuddy."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Justification: This feature improves the product significantly because a user can know the number of recipes he/ she has. When a user have highly differentiated tastes and needs, knowing how many recipes he/ she has can let him/ her satisfy his/ her own particular wants."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "** Highlights: The user is able to view the number of recipes he/ she has. This enhancement also affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ". Added a calorie attribute to a recipe class with the necessary restraints."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dmuhd97\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code and Test code contributed]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Helped in managing the team\u0027s repository and pull requests.  Commented on other\u0027s PR if there are any improvements or suggestions to make."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Helped teammates with testing errors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Helped in the documentations of the overall code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Explained to teammates the flow of AB3 to better help them understand the code and therefore aiding them in implementing their own features."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage (Pull requests https://github.com/AY1920S2-CS2103T-W12-4/main/pull/301[#301], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/306[#306])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Major refactoring of certain commands and packaging (Pull requests https://github.com/AY1920S2-CS2103T-W12-4/main/pull/17[#17], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/74[#74], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/147[#147], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/154[#154])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/AY1920S2-CS2103T-W12-4/main/pull/295[#295]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Updated User Guide to include Product Information, Understanding CookBuddy\u0027s GUI, FAQs, Command Summary and the Glossary (Pull requests https://github.com/AY1920S2-CS2103T-W12-4/main/pull/171[#171], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/279[#279], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/295[#295], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/298[#298])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Updated Developer Guide to include Introduction, About this Document, Overview of Features, Implementation details of Count feature, Value Proposition, Non Functional Requirements, Glossary and Product Survey  (Pull requests https://github.com/AY1920S2-CS2103T-W12-4/main/pull/297[#297], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/305[#305], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/313[#313])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W12-4/main/pull/113[#113], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/114[#114], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/125[#125], https://github.com/AY1920S2-CS2103T-W12-4/main/pull/170[#170]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "*** Reported bugs and suggestions for other teams (examples: https://github.com/muhd97/ped[Practical Exam Dry Run]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dproductinformation]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunderstandingcookBuddysgui]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaqcmdsummaryglossary]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dintroductionabouththisdocumentoverviewoffeatures]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcountfeature]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dproductscope]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnonfuncreqglossarypdtsurvey]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 37,
      "-": 38
    }
  },
  {
    "path": "docs/team/sharadhr.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003d Sharadh Rajaraman — Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003d\u003d PROJECT: CookBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "*CookBuddy* is a desktop recipe manager for students living in on-campus accommodation, and who enjoy cooking, and are also familiar with the command line."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Users may interact with CookBuddy through a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "CookBuddy is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "* *Major enhancement*: added *Image reading, processing and writing*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "** What it does: allows users to add images to their recipes. Images are saved in a data folder local to CookBuddy, and are named with a UID (unique identifier)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "** Justification: Users should be able to see what the final dish looks like, and an image goes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dsharadhr\u0026tabRepo\u003dAY1920S2-CS2103T-W12-4%2Fmain%5Bmaster%5D[Code Contributed]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "sharadhr": 9,
      "AdarshChugani": 1,
      "-": 37
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Changes the remark of an existing recipe in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::CommandInterface.svg[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the recipe identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            + \"by the index number used in the last recipe listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param remark of the recipe to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::ParserInterface.svg[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the recipe\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muhd97"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a recipe."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Create a new `Remark` in `recipe`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each recipe."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public PersonCard(Person recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    remark.setText(recipe.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "muhd97": 11,
      "sharadhr": 2,
      "-": 411,
      "kevinswk94": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.recipe.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::../ArchitectureDiagram.svg[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::../ArchitectureSequenceDiagram.svg[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`cookbuddy.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "image::LogicSequenceDiagram.svg[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 3,
      "-": 254,
      "kevinswk94": 1
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 20,
      "-": 83
    }
  },
  {
    "path": "src/main/java/cookbuddy/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPathStrings(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            ? Paths.get(configPathParameter)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            : null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "sharadhr": 1,
      "kevinswk94": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/cookbuddy/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 4,
      "kevinswk94": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cookbuddy/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.RecipeBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CookBuddy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        RecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getDataFilePath(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                userPrefs.getImagesPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s recipe"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * The data from the sample recipe book will be used instead if"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code storage}\u0027s recipe book is not found, or an empty recipe book will be"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * used instead if errors occur when reading {@code storage}\u0027s recipe book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Optional\u003cReadOnlyRecipeBook\u003e recipeBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ReadOnlyRecipeBook initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            recipeBookOptional \u003d storage.readRecipeBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (!recipeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                logger.info(\"Data file not found. Populating RecipeBook with sample recipes.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            initialData \u003d recipeBookOptional.orElseGet(SampleDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * file path, or a new {@code UserPrefs} with default configuration if errors"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * occur when reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        logger.info(\"Starting CookBuddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CookBuddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 6,
      "sharadhr": 16,
      "kevinswk94": 32,
      "-": 135
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_EMPTY_RECIPE_BOOK \u003d \"There are no recipes in the recipe book!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes found!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "AdarshChugani": 1,
      "kevinswk94": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.Main;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final String CORRUPTED \u003d \"Your JAR file is corrupt, and possibly missing files. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        + \"Please re-download from the source.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns {@code true} if {@code pathString} can be represented as a valid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link Path}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param pathString A {@link String} of a filesystem path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return duh."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean isValidPathString(String pathString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            relativePathFrom(pathString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (InvalidPathException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns true if {@code pathStrings} can be converted into a {@code Path} via"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param pathStrings A comma-separated list of {@link String}s representing the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                    file path. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean isValidPathStrings(String... pathStrings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            relativePathFrom(pathStrings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a \u003cem\u003erelative\u003c/em\u003e {@link Path} from {@code pathStrings} by using"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the OS\u0027s file system separator ({@code /} on *nix, {@code \\} on Windows)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * For example, {@code \"path\", \"foo\", \"bar\"} is returned as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code path/foo/bar}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param pathStrings A comma-separated list of {@link Strings} which are"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                    concatenated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An \u003cem\u003eabsolute\u003c/em\u003e file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Path relativePathFrom(String... pathStrings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Paths.get(\"\", pathStrings).normalize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an \u003cem\u003eabsolute\u003c/em\u003e {@link Path} from {@code pathStrings} by using"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the OS\u0027s file system separator ({@code /} on *nix, {@code \\} on Windows)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * For example, {@code \"path\", \"foo\", \"bar\"} is returned as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code path/foo/bar}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param pathStrings A comma-separated list of {@link Strings} which are"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                    concatenated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An \u003cem\u003eabsolute\u003c/em\u003e file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Path absolutePathFrom(String... pathStrings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Paths.get(\"\", pathStrings).toAbsolutePath().normalize();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Appends {@code paths} to {@code p1}, in the order of appearance."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param p1    The highest path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param paths A comma-separated list of {@link Path}s to append to {@code p1}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An appended {@link Path}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Path joinPaths(Path p1, Path... paths) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Path returnable \u003d p1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (Path path : paths) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            returnable \u003d returnable.resolve(path);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return returnable;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * directories."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * directories."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an {@link InputStream} from {@code file}; the stream is buffered."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param file A {@link Path} to the file in question"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws FileNotFoundException if the file is not found."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static InputStream streamFromFile(File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new BufferedInputStream(new FileInputStream(file));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an {@link InputStream} from the file located at {@code filePath}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param filePath A {@link Path} to a file in the filesystem."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An input stream of {@code filePath}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException As specified by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                     {@link Files#newInputStream(Path, java.nio.file.OpenOption...)}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static InputStream streamFromPath(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new BufferedInputStream(Files.newInputStream(filePath));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static InputStream getResourceAsInputStream(String resourceString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new BufferedInputStream(Main.class.getResourceAsStream(resourceString));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 109,
      "kevinswk94": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/PhotographUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import static cookbuddy.commons.util.FileUtil.getResourceAsInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A singleton class for working with images, converting between image objects,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * reading and writing from image files, and to simplify and reduce calls to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link ImageIO} repeatedly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * This class follows the singleton pattern"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ({@link https://www.geeksforgeeks.org/singleton-class-java/}), because"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * deadlocks were encountered when initialising static variables, when this was"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * originally a utility class. This pattern would originally fail several"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * CheckStyle checks, which have since been disabled."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class PhotographUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String PLACEHOLDER_IMAGE_PATH_STRING \u003d \"/images/recipe_placeholder.jpg\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final Path PLACEHOLDER_IMAGE_PATH \u003d Paths.get(PLACEHOLDER_IMAGE_PATH_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public final InputStream placeHolderImageStream;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public final BufferedImage placeholderImage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public final Path defaultStoragePath \u003d FileUtil.relativePathFrom(\"data\", \"images\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public final String messageConstraints \u003d \"Image not found, or invalid image path given.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private PhotographUtil() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.placeHolderImageStream \u003d getResourceAsInputStream(PLACEHOLDER_IMAGE_PATH_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.placeholderImage \u003d getImage(placeHolderImageStream);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static PhotographUtil imageUtil() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return new PhotographUtil();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link BufferedImage} from the given {@code Path}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param path An image file path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An image object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public BufferedImage readImage(Path path) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return ImageIO.read(path.toFile());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            logger.warning(messageConstraints);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return this.placeholderImage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an {@link InputStream} from the given {@code image}, by invoking a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link ByteArrayOutputStream} and copying the data out."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param image An image object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return A data object representing that image"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public InputStream getImageInputStream(BufferedImage image) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            public synchronized byte[] toByteArray() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return this.buf;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ImageIO.write(image, \"png\", baos);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            logger.warning(\"An error has occurred. Using placeholder image instead.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return placeHolderImageStream;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new BufferedInputStream(new ByteArrayInputStream(baos.toByteArray()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link BufferedImage} from the given {@code imageInputStream}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imageInputStream A data object representing an image."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An image object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public BufferedImage getImage(InputStream imageInputStream) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return ImageIO.read(imageInputStream);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            logger.warning(\"An error has occurred. Using placeholder image instead.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return placeholderImage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link BufferedImage} from the specified {@code url}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param url The {@link URL} that the image is located at."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The image at the URL."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public BufferedImage getImage(URL url) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return ImageIO.read(url);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            logger.warning(\"An error has occurred. Using placeholder image instead.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return placeholderImage;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Compares two {@link BufferedImage}s, specified by {@code i1} and {@code i2},"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * pixel-by-pixel, to determine if they are the same image."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Expensive O(n^2) operation; use sparingly."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if {@code i1}\u0027s pixels are all equal to those of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code i2}\u0027s."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean isSameImage(BufferedImage i1, BufferedImage i2) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (i1.getWidth() !\u003d i2.getWidth() || i1.getHeight() !\u003d i2.getHeight()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (int x \u003d 0; x \u003c i1.getWidth(); x++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (int y \u003d 0; y \u003c i2.getHeight(); y++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                if (i1.getRGB(x, y) !\u003d i2.getRGB(x, y)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * See {@link #isPlaceHolderImage(Path)}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static boolean isPlaceHolderImage(String... imageFilePathStrings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isPlaceHolderImage(FileUtil.relativePathFrom(imageFilePathStrings));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Checks if {@link imageFilePath} refers to the placeholder image."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imageFilePath A {@link Path} where an image is stored."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if {@link imageFilePath} resolves to the placeholder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static boolean isPlaceHolderImage(Path imageFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return imageFilePath.compareTo(PLACEHOLDER_IMAGE_PATH) \u003d\u003d 0"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            || imageFilePath.compareTo(FileUtil.relativePathFrom(\"data\", \"images\", \"placeholder\")) \u003d\u003d 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes all images in {@code recipeList} to disk; skips if the file already"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * exists."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param recipeList    An unmodifiable list of recipes whose images are to be"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                      saved."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imageFilePath"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void saveAllImages(ObservableList\u003cRecipe\u003e recipeList, Path imageFilePath) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Path recipeImagePath \u003d FileUtil.joinPaths(imageFilePath, recipe.getPhotograph().getImageFileName(recipe));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (!isPlaceHolderImage(recipeImagePath) \u0026\u0026 !FileUtil.isFileExists(recipeImagePath)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                FileUtil.createIfMissing(recipeImagePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                ImageIO.write(recipe.getPhotograph().getData(), \"png\", recipeImagePath.toFile());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Generates a hashcode for {@code image}, based on its RGB pixel data. Two"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * identical images should return the same hashcode."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param image A {@link BufferedImage} to hash"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The hashcode."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int hashImage(BufferedImage image) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Arrays.hashCode(image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 19,
      "sharadhr": 173,
      "AdarshChugani": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Helper class that is responsible for storing commands entered by user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final LinkedList\u003cString\u003e commandHistory \u003d new LinkedList\u003cString\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private ListIterator\u003cString\u003e iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private int maxSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Uses the default {@code maxSize} of 50 for history."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        maxSize \u003d 50;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Adds {@code cmd} to command history."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmd The command to be stored in the history."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void addCommand(String cmd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        commandHistory.addFirst(cmd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (commandHistory.size() \u003e maxSize) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            commandHistory.removeLast();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.iterator \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the command history size."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the size of the command history."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return commandHistory.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Resets the iterator."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void resetIterator() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        iterator \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the previous command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the previous command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String iterateNext() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (this.iterator \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            this.iterator \u003d commandHistory.listIterator(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (this.iterator.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return this.iterator.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the next command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the next command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String iteratePrevious() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (this.iterator !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (this.iterator.hasPrevious()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.iterator.previous();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (this.iterator.hasPrevious()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                String result \u003d this.iterator.previous();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.iterator.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 81
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @see Model#getRecipeBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "kevinswk94": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.RecipeBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final RecipeBookParser recipeBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBookParser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Command command \u003d recipeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            storage.saveRecipeBook(model.getRecipeBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 22,
      "-": 56
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/CountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Counts all recipes in the recipe book and displays the total number to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class CountCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"count\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the total number of recipes in CookBuddy.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total available recipes are: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static long total;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        total \u003d model.count();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + total);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 24,
      "AdarshChugani": 3
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Deletes the recipe identified by the index number shown in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe recipeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "kevinswk94": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Marks a recipe as done, identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Marks the recipe identified by the index number shown in the displayed recipe list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_DONE_RECIPE_SUCCESS \u003d \"Completed Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToDo \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.attemptRecipe(recipeToDo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_RECIPE_SUCCESS, recipeToDo.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/DuplicateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": " * Adds a duplicate of the recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class DuplicateCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"duplicate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \": Adds a duplicate of the recipe identified by the index number to the recipe list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Recipe duplicated: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE_FAIL \u003d \"This recipe has already been duplicated!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public DuplicateCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Recipe recipeToDuplicate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        String name \u003d recipeToDuplicate.getName().getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        String newName \u003d \"Duplicate of \" + name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Name nameOfDuplicate \u003d new Name(newName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor editRecipeDescriptor \u003d new ModifyCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        editRecipeDescriptor.setName(nameOfDuplicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Recipe duplicatedRecipe \u003d ModifyCommand.createEditedRecipe(recipeToDuplicate, editRecipeDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (model.hasRecipe(duplicatedRecipe)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE_FAIL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            model.addRecipe(duplicatedRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            duplicatedRecipe.setTime(recipeToDuplicate.getPrepTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (recipeToDuplicate.getFavStatus().getfavStatus()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                duplicatedRecipe.favRecipe();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (recipeToDuplicate.getDoneStatus().getDoneStatus()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                duplicatedRecipe.attemptRecipe();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDuplicate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                || (other instanceof DuplicateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DuplicateCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 58,
      "AdarshChugani": 13
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Exits the CookBuddy application\\n\" + \"Example: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CookBuddy as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 4,
      "kevinswk94": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/FavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Favourites a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class FavCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fav\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Favourites the recipe identified by the index number shown in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_FAV_RECIPE_SUCCESS \u003d \"Favourited Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public FavCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToFav \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.favRecipe(recipeToFav);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FAV_RECIPE_SUCCESS, recipeToFav.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof FavCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FavCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Finds and lists all recipes in recipe book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose attribute contains any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \"Parameters: attribute/ KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ sandwich\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public FindCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "kevinswk94": 10,
      "-": 30
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public HelpCommand(String commandWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        commandDescription \u003d commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UiManager.setCommandDescription(commandDescription);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String getCommandWord () {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return commandDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 13,
      "kevinswk94": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays all the recipes in CookBuddy.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all available recipes.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 3,
      "kevinswk94": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/ModifyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Edits the details of an existing recipe in the recipe book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class ModifyCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"modify\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + \"by the index number used in the displayed recipe list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \"[\" + PREFIX_INGREDIENTS + \"INGREDIENT 1, QUANTITY; INGREDIENT 2, QUANTITY] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \"[\" + PREFIX_INSTRUCTIONS + \"INSTRUCTION 1; INSTRUCTION 2] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + \"[\" + PREFIX_IMAGEFILEPATH + \"PATH] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + \"[\" + PREFIX_CALORIE + \"CALORIES] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_SERVING + \"SERVING] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG [TAG]...]\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INGREDIENTS + \"toast, 2; eggs, 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INSTRUCTIONS + \"put egg on toast; put bread on egg\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param index                of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public ModifyCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (UiManager.getViewedRecipe() \u003d\u003d recipeToEdit) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            UiManager.changeRecipe(editedRecipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        IngredientList updatedIngredients \u003d editRecipeDescriptor.getIngredients().orElse(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        InstructionList updatedInstructions \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editRecipeDescriptor.getInstructions().orElse(recipeToEdit.getInstructions());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Photograph updatedImage \u003d editRecipeDescriptor.getImageFilePath().orElse(recipeToEdit.getPhotograph());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Calorie updatedCalorie \u003d editRecipeDescriptor.getCalorie().orElse(recipeToEdit.getCalorie());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Serving updatedServing \u003d editRecipeDescriptor.getServing().orElse(recipeToEdit.getServing());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Rating updatedRating \u003d editRecipeDescriptor.getRating().orElse(recipeToEdit.getRating());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Difficulty updatedDifficulty \u003d editRecipeDescriptor.getDifficulty().orElse(recipeToEdit.getDifficulty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags().orElse(recipeToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return new Recipe(updatedName, updatedIngredients, updatedInstructions, updatedImage, updatedCalorie,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            updatedServing,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            updatedRating, updatedDifficulty, updatedTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!(other instanceof ModifyCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand e \u003d (ModifyCommand) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private IngredientList ingredients;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private InstructionList instructions;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        private Photograph imageFilePath;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Calorie calorie;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Serving serving;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public EditRecipeDescriptor() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setInstructions(toCopy.instructions);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            setImageFilePath(toCopy.imageFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setCalorie(toCopy.calorie);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setServing(toCopy.serving);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, ingredients, instructions, imageFilePath, calorie, serving, rating,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                difficulty, tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setIngredients(IngredientList ingredients) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cInstructionList\u003e getInstructions() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return Optional.ofNullable(instructions);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setInstructions(InstructionList instructions) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.instructions \u003d instructions;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        public Optional\u003cPhotograph\u003e getImageFilePath() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return Optional.ofNullable(imageFilePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        public void setImageFilePath(Photograph imageFilePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            this.imageFilePath \u003d imageFilePath;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setCalorie(Calorie calorie) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cCalorie\u003e getCalorie() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return (calorie !\u003d null)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? Optional.of(calorie)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setServing(Serving serving) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.serving \u003d serving;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cServing\u003e getServing() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return (serving !\u003d null)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? Optional.of(serving)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return (rating !\u003d null)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? Optional.of(rating)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return (difficulty !\u003d null) ? Optional.of(difficulty) : Optional.empty();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            this.tags \u003d (tags !\u003d null)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? new HashSet\u003c\u003e(tags)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return (tags !\u003d null)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getIngredients().equals(e.getIngredients())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getInstructions().equals(e.getInstructions())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                //  \u0026\u0026 getImageFilePath().equals(e.getImageFilePath())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getCalorie().equals(e.getCalorie())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getServing().equals(e.getServing())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getDifficulty().equals(e.getDifficulty())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 29,
      "e0316059": 1,
      "sharadhr": 5,
      "AdarshChugani": 240,
      "kevinswk94": 27,
      "-": 4
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/NewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class NewCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe book.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INGREDIENTS + \"INGREDIENT 1, QUANTITY; INGREDIENT 2, QUANTITY... \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INSTRUCTIONS + \"INSTRUCTION 1, INSTRUCTION 2... \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + \"[\" + PREFIX_IMAGEFILEPATH + \"PATH] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + \"[\" + PREFIX_CALORIE + \"CALORIES] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_SERVING + \"SERVING SIZE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG [TAG]...]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_NAME + \"Ham Sandwich \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INGREDIENTS + \"bread, 2 slices; ham, 1 slice \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_INSTRUCTIONS + \"put ham between bread; eat sandwich \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        + PREFIX_IMAGEFILEPATH + \"absolute/path/to/image \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        + PREFIX_CALORIE + \"169 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + PREFIX_SERVING + \"2 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + PREFIX_RATING + \"4 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + PREFIX_DIFFICULTY + \"2 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + PREFIX_TAG + \"breakfast\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Creates an NewCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public NewCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (model.hasRecipe(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.addRecipe(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            || (other instanceof NewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u0026\u0026 toAdd.equals(((NewCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 10,
      "sharadhr": 1,
      "AdarshChugani": 7,
      "kevinswk94": 28,
      "-": 32
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/RandomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.lang.Math.random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Displays a random recipe from the recipe book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"random\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \": Displays a random recipe \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_VIEW_RECIPE_SUCCESS \u003d \"Viewing Recipe: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static int maxVal \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public RandomCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        double randomVal \u003d random();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        randomVal *\u003d maxVal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int randomNum \u003d (int) randomVal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index randomIndex \u003d Index.fromZeroBased(randomNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d randomIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        maxVal \u003d (int) model.count();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (maxVal \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMPTY_RECIPE_BOOK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UiManager.changeRecipe(recipeToView);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_RECIPE_SUCCESS, recipeToView.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            || (other instanceof RandomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((RandomCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 69,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/ResetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Clears the recipe book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes all recipes from CookBuddy.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The recipe book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (model.getFilteredRecipeList().size() \u003e 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            UiManager.removeRecipe();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 8,
      "kevinswk94": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/TimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Adds a time to a recipe, identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class TimeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"time\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Provides a prep time to the recipe identified by the index number shown in the displayed recipe list\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                                               + \".\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), TIME (hh:MM:ss) *minutes and seconds are optional*\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" 00:59:00 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_TIME_RECIPE_SUCCESS \u003d \"Time for Recipe: %1$s %2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Time prepTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public TimeCommand(Index targetIndex, Time prepTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToSet \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.setTime(recipeToSet, prepTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TIME_RECIPE_SUCCESS, recipeToSet.getName(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                recipeToSet.getPrepTime()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof TimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TimeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 56,
      "kevinswk94": 2
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/UnFavCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Un-favourites a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UnFavCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfav\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Un-favourites the recipe identified by the index number shown in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_UNFAV_RECIPE_SUCCESS \u003d \"Un-Favourited Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public UnFavCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToUnFav \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.unFavRecipe(recipeToUnFav);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNFAV_RECIPE_SUCCESS, recipeToUnFav.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof UnFavCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnFavCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Un-Marks a recipe as done, identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \": Un-Marks the recipe identified by the index number shown in the displayed recipe list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_UNDONE_RECIPE_SUCCESS \u003d \"Un-Marked Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public UndoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToDo \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.unAttemptRecipe(recipeToDo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDONE_RECIPE_SUCCESS, recipeToDo.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof UndoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UndoCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.UiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        + \": Views the recipe identified by the index number shown in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_VIEW_RECIPE_SUCCESS \u003d \"Viewing Recipe: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UiManager.changeRecipe(recipeToView);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_RECIPE_SUCCESS, recipeToView.getName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 55,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENTS \u003d new Prefix(\"ing/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final Prefix PREFIX_INSTRUCTIONS \u003d new Prefix(\"ins/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final Prefix PREFIX_IMAGEFILEPATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"cal/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Prefix PREFIX_SERVING \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "AdarshChugani": 5,
      "kevinswk94": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"\\nFor a command summary, type \\\"help delete\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "kevinswk94": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"\\nFor a command summary, type \\\"help done\\\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "AdarshChugani": 28
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/DuplicateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.DuplicateCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": " * Parses input arguments and creates a new DuplicateCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class DuplicateCommandParser implements Parser\u003cDuplicateCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DuplicateCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * and returns a DuplicateCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public DuplicateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return new DuplicateCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                    + \"\\nFor a command summary, type \\\"help duplicate\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 30
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/FavCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new FavCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class FavCommandParser implements Parser\u003cFavCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a FavCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public FavCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new FavCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"\\nFor a command summary, type \\\"help fav\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "AdarshChugani": 27
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.InstructionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if only one of the prefixes contains a value in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static boolean isSinglePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        long number \u003d Arrays.stream(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return number \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENTS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                PREFIX_INSTRUCTIONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // TODO: allow finding via multiple prefixes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!isSinglePrefixPresent(argumentMultimap, PREFIX_NAME, PREFIX_INGREDIENTS, PREFIX_INSTRUCTIONS)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(\"Please search for 1 attribute at a time!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (argumentMultimap.getValue(PREFIX_NAME).get().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            keywords \u003d argumentMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (argumentMultimap.getValue(PREFIX_INGREDIENTS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (argumentMultimap.getValue(PREFIX_INGREDIENTS).get().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new ParseException(\"Enter ingredients to search for.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            keywords \u003d argumentMultimap.getValue(PREFIX_INGREDIENTS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new FindCommand(new IngredientContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (argumentMultimap.getValue(PREFIX_INSTRUCTIONS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (argumentMultimap.getValue(PREFIX_INSTRUCTIONS).get().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new ParseException(\"Enter instruction words to search for.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            keywords \u003d argumentMultimap.getValue(PREFIX_INSTRUCTIONS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new FindCommand(new InstructionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 54,
      "-": 21
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.DuplicateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.RandomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.TimeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UnFavCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.ui.HelpWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String command \u003d ParserUtil.parseHelp(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String preface \u003d \"Showing usage for the \" + command + \" command:\\n\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String ending \u003d \"\\n\\nFor more information, you may \" + HelpWindow.HELP_MESSAGE.toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case NewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + NewCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case ModifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + ModifyCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            case DuplicateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                return new HelpCommand(preface + DuplicateCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + DeleteCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + DoneCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + UndoCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case FavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + FavCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case UnFavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + UnFavCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case ResetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + ResetCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + ViewCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + FindCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + ListCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case RandomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + RandomCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case TimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + TimeCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case CountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + CountCommand.MESSAGE_USAGE + ending);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(preface + ExitCommand.COMMAND_USAGE + ending);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(\"You are already using the help command\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                throw new ParseException(\"Invalid Command chosen!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 100,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/ModifyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Parses input arguments and creates a new ModifyCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class ModifyCommandParser implements Parser\u003cModifyCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModifyCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and returns an ModifyCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public ModifyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENTS, PREFIX_INSTRUCTIONS, PREFIX_IMAGEFILEPATH,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                PREFIX_CALORIE, PREFIX_SERVING, PREFIX_RATING, PREFIX_DIFFICULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    + \"\\nFor a command summary, type \\\"help modify\\\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor editRecipeDescriptor \u003d new ModifyCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            editRecipeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INGREDIENTS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            editRecipeDescriptor.setIngredients("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                ParserUtil.parseIngredients(argMultimap.getValue(PREFIX_INGREDIENTS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INSTRUCTIONS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            editRecipeDescriptor.setInstructions("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                ParserUtil.parseInstructions(argMultimap.getValue(PREFIX_INSTRUCTIONS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGEFILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            editRecipeDescriptor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .setImageFilePath(ParserUtil.parsePhotoFilePath(argMultimap.getValue(PREFIX_IMAGEFILEPATH).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERVING).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editRecipeDescriptor.setServing("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                ParserUtil.parseServing(argMultimap.getValue(PREFIX_SERVING).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIE).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            editRecipeDescriptor.setCalorie("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editRecipeDescriptor.setRating("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editRecipeDescriptor.setDifficulty("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        parseTagsForEdit(argMultimap.getValue(PREFIX_TAG)).ifPresent(editRecipeDescriptor::setTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(ModifyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new ModifyCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * If {@code tags} is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Optional\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tags));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 18,
      "sharadhr": 1,
      "AdarshChugani": 20,
      "kevinswk94": 30,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/NewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Parses input arguments and creates a new NewCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class NewCommandParser implements Parser\u003cNewCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * and returns an NewCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public NewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENTS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                PREFIX_INSTRUCTIONS, PREFIX_IMAGEFILEPATH, PREFIX_CALORIE, PREFIX_SERVING, PREFIX_RATING,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INGREDIENTS, PREFIX_INSTRUCTIONS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        IngredientList ingredients \u003d ParserUtil.parseIngredients(argMultimap.getValue(PREFIX_INGREDIENTS).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        InstructionList instructions \u003d ParserUtil.parseInstructions(argMultimap.getValue(PREFIX_INSTRUCTIONS).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Photograph photograph \u003d ParserUtil.parsePhotoFilePath(argMultimap.getValue(PREFIX_IMAGEFILEPATH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .orElse(Photograph.IMAGE_UTIL.PLACEHOLDER_IMAGE_PATH_STRING));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).orElse(\"0\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Serving serving \u003d ParserUtil.parseServing(argMultimap.getValue(PREFIX_SERVING).orElse(\"1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).orElse(\"0\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).orElse(\"0\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getValue(PREFIX_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Recipe recipe \u003d new Recipe(name, ingredients, instructions, photograph, calorie, serving, rating, difficulty,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                tagList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new NewCommand(recipe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "sharadhr": 10,
      "AdarshChugani": 5,
      "kevinswk94": 37,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Instruction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index must be a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEPATH \u003d Photograph.IMAGE_UTIL.messageConstraints;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                        unsigned integer)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (trimmedIndex.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"No index has been provided for the command!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Parses {@code ingredientString} into an {@link IngredientList}. Leading and"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws ParseException if {@code ingredientString} is invalid"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static IngredientList parseIngredients(String ingredientString) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(ingredientString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (ingredientString.isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            List\u003cIngredient\u003e ingredientList \u003d Stream.of(ingredientString.trim().split(\";\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    .map(String::trim).map(Ingredient::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (ingredientList.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new IngredientList(ingredientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(\"No ingredient name has been provided for one or more ingredients!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"No quantity has been provided for one or more ingredients!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Parses {@code instructionString} into a {@link InstructionList}. Leading and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws ParseException if {@code instructionString} is blank, as specified by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                        {@link String#isBlank()}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static InstructionList parseInstructions(String instructionString) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(instructionString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (instructionString.isBlank()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(\"Recipes need to have instructions; please enter some instructions.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new InstructionList(Stream.of(instructionString.trim().split(\";\")).map(String::trim)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .map(Instruction::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Parses {@code filePathString} as a {@link Photograph}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param filePathString The file path of a {@link Recipe}\u0027s photo, as a"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                       {@link String}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return A Photograph from the file at {@code filePathString}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws ParseException If {@code filePathString} is an invalid path, or the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                        file does not exist."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Photograph parsePhotoFilePath(String filePathString) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(filePathString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String trimmedPath \u003d filePathString.trim().replaceAll(\"^[\u0027\\\"]*\", \"\").replaceAll(\"[\u0027\\\"]*$\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!FileUtil.isValidPathString(trimmedPath)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILEPATH);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (Photograph.IMAGE_UTIL.isPlaceHolderImage(filePathString)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Photograph.PLACEHOLDER_PHOTOGRAPH;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new Photograph(trimmedPath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILEPATH);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Parses a {@code String calorie} into a {@code Calorie}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws ParseException if the given {@code calorie} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static Calorie parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String trimmedCalorie \u003d calorie.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (!Calorie.isValidCalorieAmount(trimmedCalorie)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return new Calorie(trimmedCalorie);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses a {@code String servingString} into a {@code Serving}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the given {@code servingString} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static Serving parseServing(String servingString) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(servingString);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int serving;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            serving \u003d Integer.parseInt(servingString.trim());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"Input provided for serving is not a valid integer!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Serving.isValidServing(serving)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Serving.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new Serving(serving);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses a {@code String ratingString} into a {@code Rating}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the given {@code ratingString} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static Rating parseRating(String ratingString) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(ratingString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int rating;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            rating \u003d Integer.parseInt(ratingString.trim());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"Input provided for rating is not a valid integer!\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new Rating(rating);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses a {@code String difficultyString} into a {@code Difficulty}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the given {@code difficultyString} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static Difficulty parseDifficulty(String difficultyString) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(difficultyString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int difficulty;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            difficulty \u003d Integer.parseInt(difficultyString.trim());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"Input provided for difficulty is not a valid integer!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new Difficulty(difficulty);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses a {@code String timeString} into a {@code Time}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param timeString the string to be parsed"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @return the Time of the recipe"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the given {@timeString} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static Time parseTime(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int hour;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int min \u003d 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        int sec \u003d 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String trimmedTime \u003d timeString.trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String[] timeArray \u003d trimmedTime.split(\":\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            hour \u003d Integer.parseInt(timeArray[0]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (timeArray.length \u003e 1) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                min \u003d Integer.parseInt(timeArray[1]);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                if (timeArray.length \u003e 2) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    sec \u003d Integer.parseInt(timeArray[2]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(\"Input provided for time does not match the required pattern.\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"Please enter the time in the following format: hh:MM:ss (minutes and seconds are optional, and will be\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \" set to 0 if no input is provided for them.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Time.isValidHour(hour)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS_HOUR);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Time.isValidMin(min)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS_MIN);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!Time.isValidSec(sec)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS_SEC);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return new Time(hour, min, sec);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses a {@code String command} into a {@Code string}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param command the command to be parsed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @return a trimmed string of the command word."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static String parseHelp (String command) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String trimmedCommand \u003d command.trim();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return trimmedCommand;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Optional\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (tags.isPresent() \u0026\u0026 !tags.get().equals(\"\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            String tagsString \u003d tags.get();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            List\u003cString\u003e tagList \u003d Stream.of(tagsString.split(\",\")).map(String::trim).collect("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Collectors.toList());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            for (String tagName : tagList) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 24,
      "sharadhr": 53,
      "AdarshChugani": 133,
      "kevinswk94": 24,
      "-": 71
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/RecipeBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.DuplicateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.RandomCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.TimeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.UnFavCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import cookbuddy.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case NewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new NewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        case ModifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return new ModifyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        case DuplicateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return new DuplicateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case FavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new FavCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case UnFavCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new UnFavCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case ResetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (!arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                throw new ParseException((\"The reset command does not take in any arguments!\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return new ResetCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case RandomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new RandomCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        case TimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new TimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        case CountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (!arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                throw new ParseException(\"The count command does not take in any arguments!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return new CountCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (!arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new ParseException(\"The exit command does not take in any arguments!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommand(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 21,
      "muhd97": 5,
      "AdarshChugani": 32,
      "kevinswk94": 15,
      "-": 52
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/TimeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.TimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new FavCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class TimeCommandParser implements Parser\u003cTimeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a FavCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public TimeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String[] splitArgs \u003d args.substring(1).split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Time time \u003d ParserUtil.parseTime(splitArgs[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new TimeCommand(index, time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage(), TimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 32
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/UnFavCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UnFavCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new UnFavCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UnFavCommandParser implements Parser\u003cUnFavCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnFavCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a UnFavCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public UnFavCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new UnFavCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    + \"\\nFor a command summary, type \\\"help unfav\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 30
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/UndoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a UndoCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public UndoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new UndoCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"\\nFor a command summary, type \\\"help undo\\\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "AdarshChugani": 28
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Parses input arguments and creates a new UnFavCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnFavCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * and returns a UnFavCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getLocalizedMessage()) + \"\\nFor a command \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                            + \"summary, type \\\"help view\\\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 33
    }
  },
  {
    "path": "src/main/java/cookbuddy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /** {@code Predicate} that always evaluates to false */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_NO_RECIPES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /** Returns the RecipeBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the total number of recipes in the recipe book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    long count();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Marks a recipe as attempted/done"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be marked."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    void attemptRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Un-Makrs a recipe as attempted/done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be un-marked."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    void unAttemptRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Favourites the recipe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    void favRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Un-Favourites the recipe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    void unFavRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Sets a time to the recipe"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be set"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param time the prep time of the recipe."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    void setTime(Recipe recipe, Time time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 11,
      "AdarshChugani": 38,
      "kevinswk94": 22,
      "-": 56
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Represents the in-memory model of the recipe book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initializes a ModelManager with the given recipeBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireAllNonNull(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this(new RecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return userPrefs.getDataFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        userPrefs.setDataFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void attemptRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipeBook.attempt(recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_NO_RECIPES);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unAttemptRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipeBook.unAttempt(recipe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_NO_RECIPES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void favRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipeBook.fav(recipe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_NO_RECIPES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unFavRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipeBook.unFav(recipe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_NO_RECIPES);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public long count() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return recipeBook.count();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void setTime(Recipe recipe, Time time) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.setTime(time);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_NO_RECIPES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muhd97"
        },
        "content": "               \u0026\u0026 filteredRecipes.equals(other.filteredRecipes);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 16,
      "AdarshChugani": 48,
      "kevinswk94": 29,
      "-": 98
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/ReadOnlyRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Unmodifiable view of an recipe book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public interface ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * This list will not contain any duplicate recipe."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "kevinswk94": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    Path getDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Path getImagesPath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "sharadhr": 1,
      "kevinswk94": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/RecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Wraps all data at the recipe-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Creates an RecipeBook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Resets the existing data of this {@code RecipeBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the total number of recipes in the recipe book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public long count() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return recipes.count();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * favourites a recipe from the recipe book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be favourited."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void fav(Recipe recipe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.favRecipe();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Un-favourites a recipe from the recipe book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be un-favourited."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unFav(Recipe recipe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.unFavRecipe();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Attempts the recipe, marking it as done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be marked as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void attempt(Recipe recipe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.attemptRecipe();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Un-Marks the recipe as attempted, marking it as not done."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param recipe the recipe to be un-marked."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unAttempt(Recipe recipe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.unAttemptRecipe();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipes.add(recipe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (target.getFavStatus().toString().equals(\"\\u2665\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editedRecipe.favRecipe();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (target.getDoneStatus().toString().equals(\"Yes\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editedRecipe.attemptRecipe();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhd97"
        },
        "content": "               || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                   \u0026\u0026 recipes.equals(((RecipeBook) other).recipes));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 88,
      "AdarshChugani": 50,
      "kevinswk94": 33
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.commons.util.PhotographUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Path dataFilePath \u003d Paths.get(\"data\" , \"recipebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Path recipeImagePath \u003d PhotographUtil.imageUtil().defaultStoragePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        setDataFilePath(newUserPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        setImagesPath(newUserPrefs.getImagesPath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Path getDataFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Path getImagesPath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return recipeImagePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void setImagesPath(Path recipeImagePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(recipeImagePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.recipeImagePath \u003d recipeImagePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "               \u0026\u0026 dataFilePath.equals(o.dataFilePath)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "               \u0026\u0026 recipeImagePath.equals(o.recipeImagePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return Objects.hash(guiSettings, dataFilePath, recipeImagePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + dataFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        sb.append(\"\\nRecipes image location : \" + recipeImagePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 24,
      "sharadhr": 3,
      "kevinswk94": 2,
      "-": 75
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/ContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Predicate to test for."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public interface ContainsKeywordsPredicate extends Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    boolean test(Recipe recipe);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 10
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/IngredientContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code IngredientList} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class IngredientContainsKeywordsPredicate implements ContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public IngredientContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cString\u003e ingredients \u003d recipe.getIngredients().ingredientData.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .map(x -\u003e x.name)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e ingredients.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .anyMatch(ingredient -\u003e StringUtil.containsWordIgnoreCase(ingredient, keyword)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "               || (other instanceof IngredientContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                   \u0026\u0026 keywords.equals(((IngredientContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 35
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/InstructionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code IngredientList} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class InstructionContainsKeywordsPredicate implements ContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public InstructionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cString\u003e instructions \u003d recipe.getInstructions().instructionData.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .map(x -\u003e x.instructionString)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e instructions.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .anyMatch(instruction -\u003e StringUtil.containsWordIgnoreCase(instruction, keyword)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                || (other instanceof InstructionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    \u0026\u0026 keywords.equals(((InstructionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 35
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class NameContainsKeywordsPredicate implements ContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().toString(), keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "sharadhr": 1,
      "kevinswk94": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Fav;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Represents a Recipe in the recipe book. Guarantees: details are present and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * not null, field values are validated, immutable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final IngredientList ingredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final InstructionList instructions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final Photograph photograph;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Serving serving;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Fav favStatus \u003d new Fav(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Done doneStatus \u003d new Done(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final Time prepTime \u003d new Time(0, 0, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Recipe(Name name, IngredientList ingredients, InstructionList instructions, Photograph photograph,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                  Calorie calorie, Serving serving, Rating rating, Difficulty difficulty, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireAllNonNull(name, ingredients, instructions);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.instructions \u003d instructions;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.photograph \u003d photograph;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.serving \u003d serving;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public IngredientList getIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public InstructionList getInstructions() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return instructions;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Photograph getPhotograph() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return photograph;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Serving getServing() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return serving;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Fav getFavStatus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return favStatus;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Done getDoneStatus() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return doneStatus;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Time getPrepTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return prepTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an immutable tag set, which throws"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if both recipes of the same name have the same ingredients and instructions. This defines a weaker"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * notion of equality between two recipes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return otherRecipe !\u003d null \u0026\u0026 otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u0026\u0026 otherRecipe.getInstructions().equals(getInstructions())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u0026\u0026 otherRecipe.getPhotograph().equals(getPhotograph());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void favRecipe() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        favStatus.fav();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unFavRecipe() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        favStatus.unFav();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void attemptRecipe() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        doneStatus.attempt();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unAttemptRecipe() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        doneStatus.unAttempt();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void setTime(Time time) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        prepTime.setTime(time);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields. This"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return otherRecipe.getName().equals(getName()) \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u0026\u0026 otherRecipe.getInstructions().equals(getInstructions()) \u0026\u0026 otherRecipe.getPhotograph()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .equals(getPhotograph())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u0026\u0026 otherRecipe.getCalorie().equals(getCalorie()) \u0026\u0026 otherRecipe.getRating().equals(getRating())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u0026\u0026 otherRecipe.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Objects.hash(name, ingredients, instructions, photograph, calorie, serving, rating, difficulty, tags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        builder.append(getName()).append(\" Ingredients: \").append(getIngredients()).append("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \" Instructions: \").append(getInstructions()).append(\" Path: \").append(getPhotograph()).append("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \" Calories: \").append(getCalorie()).append(\" Serving size: \").append(getServing().serving).append("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \" Rating: \").append(getRating().rating).append(\" Difficulty \").append(getDifficulty().difficulty).append("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \" Tags\" + \": \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 17,
      "sharadhr": 18,
      "AdarshChugani": 69,
      "kevinswk94": 83
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the total number of recipes in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public long count() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (target.getFavStatus().toString().equals(\"\\2665\") \u003d\u003d true) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            editedRecipe.favRecipe();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 8,
      "AdarshChugani": 4,
      "kevinswk94": 136
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Calorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents a Calorie in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Guarantees: immutable; calorie is valid as declared in {@link #isValidCalorieAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Calorie amount should be a positive integer value.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public final String calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param calorie A valid calorie amount."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Calorie(String calorie) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        checkArgument(isValidCalorieAmount(calorie), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns true if a given string is a valid calorie amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static boolean isValidCalorieAmount(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                || (other instanceof Calorie // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                \u0026\u0026 calorie.equals(((Calorie) other).calorie)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return calorie.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 50,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Difficulty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents the Difficulty of the recipe in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: immutable; difficulty is valid as declared in {@link #isValidDifficulty(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty should be an integer \u003e\u003d 0 and \u003c\u003d 5\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public final int difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Difficulty}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Difficulty(int difficulty) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidDifficulty(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d 5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 difficulty \u003d\u003d (((Difficulty) other).difficulty)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(difficulty).hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(difficulty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 53
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Done.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents a Recipe\u0027s Done status in the recipe book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: mutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Done {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \"A recipe can only be done or not!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private boolean doneStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Done status}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param status true or false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Done(boolean status) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.doneStatus \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void attempt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.doneStatus \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unAttempt() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.doneStatus \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return doneStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (doneStatus \u003d\u003d true) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return \"Yes\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return \"No\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Done // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    \u0026\u0026 doneStatus \u003d\u003d (((Done) other).doneStatus)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(doneStatus).hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 61
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Fav.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents a Recipe\u0027s favourite status in the recipe book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: mutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Fav {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \"Favourites can only be true or false!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private boolean favStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Fav status}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param status true or false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Fav(boolean status) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.favStatus \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void fav() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.favStatus \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unFav() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.favStatus \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean getfavStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return favStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (favStatus \u003d\u003d true) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return \"\\u2665\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return \"\\u2661\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Fav // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    \u0026\u0026 favStatus \u003d\u003d (((Fav) other).favStatus)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(favStatus).hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 61
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Represents a Recipe\u0027s ingredient in its {@code IngredientList}. Guarantees:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Each ingredient should be of the form: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \"\u0027ing1, ing1qty\u0027.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \"Each ingredient-quantity pair must be separated by \u0027;\u0027. Spaces are optional.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            + \"Example: \u0027ing/bread, 2 slices; ham, 3 slices\u0027\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Quantity quantity2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Construct an Ingredient from {@code ingredientString}; the parameter is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * required to be non-null, and must follow a pattern."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param ingredientString the {@link String} to be decoded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Ingredient(String ingredientString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(ingredientString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cString\u003e ingredientParts \u003d Arrays.stream(ingredientString.split(\",\")).map(String::trim).collect("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        checkArgument(isValidName(ingredientParts.get(0)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        checkArgument(isValidName(ingredientParts.get(1)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.name \u003d ingredientParts.get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.quantity \u003d ingredientParts.get(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // new Quantity(ingredientParts.get(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns {@code true} if {@code nameString} is \u003cem\u003enot\u003c/em\u003e blank."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param nameString the {@link String} to be tested."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Boolean isValidName(String nameString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return !nameString.isBlank();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void setQuantity(String quantityString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.quantity \u003d quantityString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // new Quantity(quantityString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.name + \", \" + this.quantity;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                || (other instanceof Ingredient // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                        \u0026\u0026 name.equals(((Ingredient) other).name)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 68,
      "kevinswk94": 12
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/IngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Represents a Recipe\u0027s ingredients in the recipe book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class IngredientList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public final ArrayList\u003cIngredient\u003e ingredientData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs an ingredient list from {@code ingredientList}. Requires that the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * parameter be non-null. The parameter is guaranteed to be \u003cem\u003evalid\u003c/em\u003e, as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * every item in the list has already been individually checked by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link Ingredient#Ingredient(String)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param ingredientList a {@link List} of {@link Ingredient}s"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public IngredientList(List\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireAllNonNull(ingredientList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.ingredientData \u003d new ArrayList\u003cIngredient\u003e(ingredientList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Adds an ingredient to the ingredient list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param ingredient the ingredient to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ingredientData.add(ingredient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Deletes an ingredient from the ingredient list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param ingredient the ingredient to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void deleteIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ingredientData.remove(ingredient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public List\u003cIngredient\u003e asList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return List.copyOf(this.ingredientData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (other \u003d\u003d this || other instanceof IngredientList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 ingredientData.equals(((IngredientList) other).ingredientData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return ingredientData.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return ingredientData.stream().map(Ingredient::toString).collect(Collectors.joining(\";\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 51,
      "AdarshChugani": 2,
      "kevinswk94": 14
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Instruction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Represents a Recipe\u0027s instruction in the recipe book. Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * is valid as declared in {@link #isValidInstructions(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Instruction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Each instruction should be \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"a non-blank string.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public final String instructionString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs an {@code Instruction}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param instructionString a valid, non-null {@link String} that represents a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                          single line of instructions in a recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Instruction(String instructionString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(instructionString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        checkArgument(isValidInstruction(instructionString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.instructionString \u003d instructionString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns true if {@code instructionString} is a valid instruction, as specified by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link String#isBlank()}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean isValidInstruction(String instructionString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return !instructionString.isBlank();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.instructionString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                || (other instanceof Instruction // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                \u0026\u0026 instructionString.equals(((Instruction) other).instructionString)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.instructionString.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 50,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/InstructionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Represents a Recipe\u0027s instructions in the recipe book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class InstructionList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public final ArrayList\u003cInstruction\u003e instructionData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs an instruction list from {@code ingredientList}. Requires that the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * parameter be non-null. The parameter is guaranteed to be valid, as every item"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * in the list has already been individually checked by the Ingredient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param instructionList a {@link List} of {@link Instruction}s"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public InstructionList(List\u003cInstruction\u003e instructionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireAllNonNull(instructionList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.instructionData \u003d new ArrayList\u003cInstruction\u003e(instructionList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Adds an instruction from the instructions list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param instruction the instruction to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void addInstruction(Instruction instruction) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        instructionData.add(instruction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Deletes an instruction from the instructions list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param instruction the instruction to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void deleteInstruction(Instruction instruction) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        instructionData.remove(instruction);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public List\u003cInstruction\u003e asList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return List.copyOf(this.instructionData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!(other instanceof InstructionList)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return ((InstructionList) other).instructionData.equals(this.instructionData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return instructionData.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return instructionData.stream().map(Instruction::toString)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .collect(Collectors.joining(\";\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 52,
      "kevinswk94": 22
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Represents a Recipe\u0027s name in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 11,
      "-": 50
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Photograph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.commons.util.PhotographUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Wrapper class for {@link BufferedImage}. Represents a photo of a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link Recipe} that a user can possibly provide to the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Photograph {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final PhotographUtil IMAGE_UTIL \u003d PhotographUtil.imageUtil();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d IMAGE_UTIL.messageConstraints;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final Photograph PLACEHOLDER_PHOTOGRAPH \u003d new Photograph(IMAGE_UTIL.placeholderImage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final BufferedImage photoData;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs a {@code Photograph}, by reading from {@code relativePath}, and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * parsing the file at the path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imagePath a comma-separated list of strings representing the path"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                  tree."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Photograph(String... imagePath) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(FileUtil.absolutePathFrom(imagePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs a {@code Photograph}, by reading from {@code imagePath}, and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * parsing the file at the path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imagePath A {@link Path} that directs to the photograph file in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                  question."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Photograph(Path imagePath) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(FileUtil.streamFromPath(imagePath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs a {@link Photograph} by reading from {@code imageInputStream}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param imageInputStream The {@link InputStream} of this image; buffered and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                         high-performance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Photograph(InputStream imageInputStream) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(IMAGE_UTIL.getImage(imageInputStream));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Photograph(BufferedImage image) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(image);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.photoData \u003d image;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs a {@link Photograph} by reading data from {@code URL}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param url The {@link URL} that this recipe\u0027s photograph is located at."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Photograph(URL url) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireAllNonNull(url);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.photoData \u003d IMAGE_UTIL.getImage(url);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the {@link Path} that {@code recipe}\u0027s {@link Photograph} is to be"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * stored as, for use by CookBuddy. Uses the recipe name to generate an image."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * If {@code recipe} only has a placeholder image, then a default path is"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * returned."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param recipe The {@link Recipe} whose photograph file path is to be"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *               returned."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The file name that this {@link Photograph} is to be stored on disk"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *         as."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Path getImageFileName(Recipe recipe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (IMAGE_UTIL.isSameImage(this.photoData, IMAGE_UTIL.placeholderImage)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return FileUtil.relativePathFrom(\"placeholder\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return FileUtil.relativePathFrom("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    recipe.getName().toString().replaceAll(\"\\\\s+\", \"\").toLowerCase() + \"_\" + this.hashCode() + \".png\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an {@link InputStream} from this {@link Photograph}\u0027s image data, by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * calling {@link PhotographUtil#getImageInputStream(BufferedImage)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return An {@link InputStream} of this {@link Photograph}, buffered and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *         high-performance."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public InputStream getInputStream() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return IMAGE_UTIL.getImageInputStream(this.photoData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public BufferedImage getData() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.photoData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //return \"Photograph@\" + Integer.toHexString(this.photoData.hashCode()) + \": image \u003d\" + this.photoData"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // .toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return \"Photograph successfully added from path\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                || (other instanceof Photograph // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                        \u0026\u0026 IMAGE_UTIL.isSameImage(this.photoData, ((Photograph) other).photoData)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return IMAGE_UTIL.hashImage(this.photoData);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 7,
      "sharadhr": 121,
      "AdarshChugani": 3
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to model quantities used in creating {@code Ingredient}s used in each"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * recipe."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ingredient quantity must be a number\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"followed by a unit; spaces are optional. E.g: 12 g\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final Pattern VALID_QUANTITY_PATTERN \u003d Pattern.compile(\"\\\\d+(\\\\.(\\\\d+))? ?(\\\\w+)?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static final Pattern VALID_NUMERIC_PATTERN \u003d Pattern.compile(\"\\\\d+(\\\\.(\\\\d+))?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Float value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Unit unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Constructs a Quantity from {@code quantityString}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param quantityString a {@link String} that represents an"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                       {@link Ingredient}\u0027s quantity."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Quantity(String quantityString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(quantityString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        checkArgument(isValidQuantity(quantityString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.value \u003d Float.parseFloat(VALID_NUMERIC_PATTERN.matcher(quantityString).group(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.unit \u003d new Unit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns {@code true} if {@code quantityString} is a valid quantity String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param quantityString a string representing an {@link Ingredient} quantity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean isValidQuantity(String quantityString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return VALID_QUANTITY_PATTERN.matcher(quantityString).matches();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 47,
      "kevinswk94": 3
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Rating.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents the Rating of the recipe in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: immutable; rating is valid as declared in {@link #isValidRating(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Rating should be an integer \u003e\u003d 0 and \u003c\u003d 5\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public final int rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Serving size}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Rating(int rating) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Returns true if a given string is a valid serving size."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidRating(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d 5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 rating \u003d\u003d (((Rating) other).rating)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(rating).hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String ratingString \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        for (int i \u003d 0; i \u003c rating; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            ratingString +\u003d \"\\u2605\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        for (int i \u003d rating; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            ratingString +\u003d \"\\u2606\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return ratingString;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 57,
      "kevinswk94": 3
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Serving.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents the Serving size in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: immutable; serving is valid as declared in {@link #isValidServing(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Serving {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Serving size should be \u003e 0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public final int serving;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Serving size}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param serving A valid serving size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Serving(int serving) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(serving);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidServing(serving), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.serving \u003d serving;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Returns true if a given string is a valid serving size."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidServing(int test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Serving // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 serving \u003d\u003d (((Serving) other).serving)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(serving).hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return \"\\uD83C\\uDF74\" + \" : \" + serving;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //return \"\\uD83C\\uDF7D️\\uD83C\\uDF7D️\\uD83C\\uDF7D️\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //return \"\\uD83C\\uDF7D\" + \" : \" + serving;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52,
      "kevinswk94": 3
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents a Tag in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "kevinswk94": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Represents a Recipe\u0027s time in the recipe book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHour(int)}, (@Link #isValidMin(int)},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * {@Link #isValidSec(int)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_HOUR \u003d \"The recipe should be between 0 and 72 hours long, inclusive\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MIN \u003d \"Mins should be \u003c 60\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_SEC \u003d \"Secs should be \u003c 60\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private int min;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private int sec;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param hour A valid hour."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param min A valid minute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param sec A valid second."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public Time(int hour, int min, int sec) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(min);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        requireNonNull(sec);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidHour(hour), MESSAGE_CONSTRAINTS_HOUR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidMin(min), MESSAGE_CONSTRAINTS_MIN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        checkArgument(isValidSec(sec), MESSAGE_CONSTRAINTS_SEC);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.min \u003d min;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.sec \u003d sec;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidHour(int test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d 72);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidMin(int test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c 60);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static boolean isValidSec(int test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c 60);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void setTime(Time preptime) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        hour \u003d preptime.getHour();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        min \u003d preptime.getMin();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        sec \u003d preptime.getSec();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int getHour() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int getMin() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int getSec() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return sec;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if ((hour + min + sec) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d \"-\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (hour \u003c 10) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                toReturn +\u003d \"0\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d String.valueOf(hour);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d \":\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (min \u003c 10) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                toReturn +\u003d \"0\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d String.valueOf(min);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d \":\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (sec \u003c 10) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                toReturn +\u003d \"0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn +\u003d String.valueOf(sec);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    \u0026\u0026 hour \u003d\u003d (((Time) other).hour))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    \u0026\u0026 min \u003d\u003d (((Time) other).min)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                    \u0026\u0026 sec \u003d\u003d (((Time) other).sec); // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return String.valueOf(hour + min + sec).hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 115
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/attribute/Unit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A unit class to model units for each {@code Quantity}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Unit {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * UnitSymbol"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public enum UnitSymbol {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 13,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 11
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 5,
      "sharadhr": 1,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/main/java/cookbuddy/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import static cookbuddy.commons.util.FileUtil.getResourceAsInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Instruction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Contains utility methods for populating {@code RecipeBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Name name1 \u003d new Name(\"Ham Sandwich\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        IngredientList ingList1 \u003d new IngredientList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                List.of(new Ingredient(\"bread, 2 slices\"), new Ingredient(\"ham, 1 slice\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        InstructionList insList1 \u003d new InstructionList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                List.of(new Instruction(\"put ham between bread\"), new Instruction(\"serve on plate\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Photograph image1 \u003d new Photograph(getResourceAsInputStream(\"/images/hamsandwich_recipe.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Calorie calorie1 \u003d new Calorie(\"169\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Serving serving1 \u003d new Serving(3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Rating rating1 \u003d new Rating(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Difficulty difficulty1 \u003d new Difficulty(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Set\u003cTag\u003e tagSet1 \u003d getTagSet(\"breakfast\", \"lunch\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe recipe1 \u003d new Recipe(name1, ingList1, insList1, image1, calorie1, serving1, rating1, difficulty1,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tagSet1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Name name2 \u003d new Name(\"Idiot Sandwich\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        IngredientList ingList2 \u003d new IngredientList(List.of(new Ingredient(\"bread, 2 slices\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        InstructionList insList2 \u003d new InstructionList(List.of(new Instruction(\"put bread to opposite sides of head\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                new Instruction(\"Yell \u0027I am an idiot sandwich!\u0027\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Photograph image2 \u003d new Photograph(getResourceAsInputStream(\"/images/idiotsandwich_recipe.jpg\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Calorie calorie2 \u003d new Calorie(\"0\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Serving serving2 \u003d new Serving(2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Rating rating2 \u003d new Rating(4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Difficulty difficulty2 \u003d new Difficulty(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Set\u003cTag\u003e tagSet2 \u003d getTagSet(\"lunch\", \"dinner\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe recipe2 \u003d new Recipe(name2, ingList2, insList2, image2, calorie2, serving2, rating2, difficulty2,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tagSet2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new Recipe[] { recipe1, recipe2 };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static ReadOnlyRecipeBook getSampleRecipeBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook sampleAb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            sampleAb.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 7,
      "sharadhr": 25,
      "AdarshChugani": 16,
      "kevinswk94": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final String ingredients;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final String instructions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final Path imageFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final int serving;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final int rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final int difficulty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final String fav;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final String done;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name, @JsonProperty(\"ingredients\") String ingredients,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @JsonProperty(\"instructions\") String instructions, @JsonProperty(\"filePath\") Path imageFilePath,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @JsonProperty(\"calorie\") String calorie, @JsonProperty(\"serving\") int serving,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @JsonProperty(\"rating\") int rating, @JsonProperty(\"difficulty\") int difficulty,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @JsonProperty(\"fav\") String fav, @JsonProperty(\"done\") String done, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.instructions \u003d instructions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.imageFilePath \u003d imageFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.serving \u003d serving;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.fav \u003d fav;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ingredients \u003d source.getIngredients().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        instructions \u003d source.getInstructions().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        imageFilePath \u003d source.getPhotograph().getImageFileName(source);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        calorie \u003d source.getCalorie().calorie;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        serving \u003d source.getServing().serving;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        rating \u003d source.getRating().rating;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        difficulty \u003d source.getDifficulty().difficulty;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        fav \u003d source.getFavStatus().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        done \u003d source.getDoneStatus().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        time \u003d source.getPrepTime().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code Recipe} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                               the adapted recipe."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Recipe toModelType(Path imageStoragePath) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (ingredients \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientList.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // if (!IngredientList.isValidIngredients(ingredients)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // throw new IllegalValueException(IngredientList.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        final IngredientList modelIngredients \u003d ParserUtil.parseIngredients(ingredients);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (instructions \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InstructionList.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // if (!InstructionList.isValidInstructions(instructions)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // throw new IllegalValueException(InstructionList.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        final InstructionList modelInstructions \u003d ParserUtil.parseInstructions(instructions);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (imageFilePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Photograph.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!FileUtil.isValidPathString(imageFilePath.toString())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new IllegalValueException(Photograph.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Photograph modelPhotograph;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            modelPhotograph \u003d Photograph.IMAGE_UTIL.isPlaceHolderImage("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    FileUtil.joinPaths(imageStoragePath, imageFilePath)) ? Photograph.PLACEHOLDER_PHOTOGRAPH"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                            : new Photograph(FileUtil.joinPaths(imageStoragePath, imageFilePath));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            modelPhotograph \u003d Photograph.PLACEHOLDER_PHOTOGRAPH;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        final Calorie modelCalorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        final Serving modelServe \u003d new Serving(serving);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Recipe toReturn \u003d new Recipe(modelName, modelIngredients, modelInstructions, modelPhotograph, modelCalorie,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                modelServe, modelRating, modelDifficulty, modelTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (fav.equals(\"\\u2665\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn.favRecipe();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (done.equals(\"Yes\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn.attemptRecipe();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!time.equals(\"-\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            toReturn.setTime(ParserUtil.parseTime(time));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 14,
      "sharadhr": 42,
      "AdarshChugani": 38,
      "kevinswk94": 27,
      "-": 51
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/JsonRecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.commons.util.PhotographUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * A class to access RecipeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Path imagesPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath, Path imagesPath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.imagesPath \u003d imagesPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return readRecipeBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Similar to {@link #readRecipeBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonRecipeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!jsonRecipeBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(jsonRecipeBook.get().toModelType(imagesPath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Similar to {@link #saveRecipeBook(ReadOnlyRecipeBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path dataFilePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        FileUtil.createIfMissing(dataFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), dataFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        PhotographUtil.imageUtil().saveAllImages(recipeBook.getRecipeList(), imagesPath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "sharadhr": 8,
      "kevinswk94": 21,
      "-": 49
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/JsonSerializableRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * An Immutable RecipeBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "@JsonRootName(value \u003d \"recipeBook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyRecipeBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public RecipeBook toModelType(Path imagesPath) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType(imagesPath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (recipeBook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "sharadhr": 3,
      "kevinswk94": 21,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/RecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents a storage for {@link RecipeBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "kevinswk94": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public interface Storage extends RecipeBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Manages storage of RecipeBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public StorageManager(RecipeBookStorage recipeBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBookStorage.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return readRecipeBook(recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        saveRecipeBook(recipeBook, recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "kevinswk94": 19,
      "-": 55
    }
  },
  {
    "path": "src/main/java/cookbuddy/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Represents a storage for {@link cookbuddy.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Saves the given {@link cookbuddy.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private TextArea commandTextArea;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        setHandler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        commandTextArea.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToMonospace());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private void setHandler() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.commandTextArea.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            public void handle(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                String commandString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                if (keyEvent.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    commandString \u003d commandTextArea.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                        commandExecutor.execute(commandString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        commandHistory.addCommand(commandString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        commandHistory.resetIterator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                        commandTextArea.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                        ;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                } else if (keyEvent.getCode().equals(KeyCode.PAGE_UP)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    String text \u003d commandHistory.iterateNext();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    if (text !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        commandTextArea.setText(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                } else if (keyEvent.getCode().equals(KeyCode.PAGE_DOWN)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    String text \u003d commandHistory.iteratePrevious();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    if (text !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        commandTextArea.setText(text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Sets the command box style to use the default style: monospace black."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private void setStyleToMonospace() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        commandTextArea.setStyle(\"-fx-font-family: Consolas, \u0027Menlo\u0027, \u0027Hack\u0027, \u0027Liberation Mono\u0027, \u0027monospace\u0027;\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        commandTextArea.setStyle(\"-fx-text-fill: black;\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextArea.getStyleClass();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "         * @see cookbuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 27,
      "kevinswk94": 22,
      "-": 58
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import jfxtras.styles.jmetro.JMetro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import jfxtras.styles.jmetro.Style;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w12-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        new JMetro(Style.LIGHT).setScene(this.getRoot().getScene());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Displays the help window"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param toBeShown the message to be displayed in the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void show(String toBeShown) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (toBeShown.equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            helpMessage.setText(toBeShown);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        show();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void setCommandDescription(String commandDescription) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        helpMessage.setText(commandDescription);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "sharadhr": 3,
      "AdarshChugani": 18,
      "kevinswk94": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import jfxtras.styles.jmetro.JMetro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import jfxtras.styles.jmetro.Style;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final JMetro JMETRO \u003d new JMetro(Style.LIGHT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private RecipeView recipeView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private StackPane recipeViewPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        JMETRO.setAutomaticallyColorPanes(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        JMETRO.setScene(this.primaryStage.getScene());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void defaultFill(Recipe recipe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (logic.getFilteredRecipeList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            recipeView \u003d new RecipeView();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            recipeView \u003d new RecipeView(recipe);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        fillInfo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * fills in the ingredient/instruction fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void fillInfo() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.recipeViewPanelPlaceholder.getChildren().add(recipeView.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredRecipeList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Fills in information for the recipe"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (logic.getFilteredRecipeList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            recipeView \u003d new RecipeView();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            fillInfo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            defaultFill(logic.getFilteredRecipeList().get(0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Sets the command description of the help window"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param commandDescription the new command description."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static void setCommandDescription(String commandDescription) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        MainWindow.commandDescription \u003d commandDescription;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String toDisplay \u003d UiManager.getCommandDescription();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (!toDisplay.equals(\"\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            helpWindow.show(toDisplay);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            helpWindow.show(HelpWindow.HELP_MESSAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public RecipeListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @see cookbuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 4,
      "sharadhr": 21,
      "AdarshChugani": 38,
      "kevinswk94": 9,
      "-": 179
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RecipeBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private HBox title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label ingredients;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label instructions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label fav;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label timing;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label serving;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Label diff;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.cardPane.setStyle(\"-fx-background-color: transparent;\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.title.setStyle(\"-fx-background-color: transparent;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tags.setStyle(\"-fx-background-color: transparent;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        name.setText(recipe.getName().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        calorie.setText(\"Calorie: \" + recipe.getCalorie().toString() + \" kcal\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        fav.setText(recipe.getFavStatus().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        done.setText(\"Attempted: \" + recipe.getDoneStatus().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        timing.setText(\"\\uD83D\\uDD52: \" + recipe.getPrepTime().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        serving.setText(recipe.getServing().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        rating.setText(recipe.getRating().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        diff.setText(\"Difficulty: \" + recipe.getDifficulty().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        recipe.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "sharadhr": 13,
      "AdarshChugani": 79,
      "kevinswk94": 2
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/RecipeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        recipeListView.setItems(recipeList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 4,
      "sharadhr": 9,
      "kevinswk94": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/RecipeView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import cookbuddy.model.recipe.attribute.Instruction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * RecipeView"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class RecipeView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String FXML \u003d \"RecipeView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ImageView recipeImage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ListView\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ListView\u003cInstruction\u003e instructions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public RecipeView(Recipe recipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.name.setText(recipe.getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.ingredients.setItems(FXCollections.observableList(this.recipe.getIngredients().asList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.instructions.setItems(FXCollections.observableList(this.recipe.getInstructions().asList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.recipeImage.setImage(new Image(this.recipe.getPhotograph().getInputStream()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.ingredients.setStyle(\".list-cell:empty {-fx-background-color: transparent;}\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public RecipeView() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.recipe \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.name.setText(\"Welcome to CookBuddy!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "sharadhr": 46
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        resultDisplay.setStyle(\"-fx-font-family: Consolas, \u0027SF Mono\u0027, \u0027Menlo\u0027, \u0027Hack\u0027, \u0027Liberation Mono\u0027, \u0027monospace\u0027\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 1,
      "kevinswk94": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static Recipe viewedRecipe \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/recipe_book_32.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            if (logic.getFilteredRecipeList().size() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                viewedRecipe \u003d logic.getFilteredRecipeList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static void setCommandDescription (String commandDesc) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        commandDescription \u003d commandDesc;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static String getCommandDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return commandDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * changes the displayed recipe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param e the new recipe to be displayed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static void changeRecipe(Recipe e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        mainWindow.defaultFill(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        viewedRecipe \u003d e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @return the recipe that is being displayed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static Recipe getViewedRecipe() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return viewedRecipe;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static void removeRecipe() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 39,
      "kevinswk94": 6,
      "-": 78
    }
  },
  {
    "path": "src/main/java/cookbuddy/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cTextArea fx:id\u003d\"commandTextArea\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" promptText\u003d\"Enter commands here...\" styleClass\u003d\"text-area\" stylesheets\u003d\"@Extensions.css\" wrapText\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" alignment\u003d\"CENTER\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"600.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CookBuddy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003cImage url\u003d\"@/images/recipe_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "             \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" maxWidth\u003d\"210.0\" minWidth\u003d\"210.0\" prefWidth\u003d\"210.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"recipeViewPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9,
      "-": 40,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003cVBox fx:id\u003d\"cardPane\" alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"174.0\" prefHeight\u003d\"170.0\" prefWidth\u003d\"174.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "  \u003c!--was originally minHeight \u003d 105.0 --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cHBox fx:id\u003d\"title\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "               \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                  \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "               \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_big_label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"\\$rating\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003cLabel fx:id\u003d\"fav\" styleClass\u003d\"cell_icon_label\" text\u003d\"\\$fav\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003cLabel fx:id\u003d\"done\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$done\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "      \u003cLabel fx:id\u003d\"calorie\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$calorie\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003cLabel fx:id\u003d\"timing\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timing\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "      \u003cLabel fx:id\u003d\"serving\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$serving\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cLabel fx:id\u003d\"diff\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$diff\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "muhd97": 8,
      "sharadhr": 21,
      "AdarshChugani": 26,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "  \u003cListView fx:id\u003d\"recipeListView\" styleClass\u003d\"alternating-row-colors\" stylesheets\u003d\"@Extensions.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/RecipeView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cGridPane fx:id\u003d\"recipeViewGrid\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"250.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"272.20001220703125\" minWidth\u003d\"10.0\" prefWidth\u003d\"215.20000000000005\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"160.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"160.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"header\" text\u003d\"\\\\$first\" GridPane.columnSpan\u003d\"2147483647\" GridPane.halignment\u003d\"LEFT\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.valignment\u003d\"TOP\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cVBox fx:id\u003d\"ingredientBox\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cLabel fx:id\u003d\"ingredientLabel\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"item-title\" text\u003d\"Ingredients\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cListView fx:id\u003d\"ingredients\" prefHeight\u003d\"154.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"alternating-row-colors\" stylesheets\u003d\"@Extensions.css\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cImageView fx:id\u003d\"recipeImage\" fitHeight\u003d\"150.0\" fitWidth\u003d\"203.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"CENTER\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003cVBox fx:id\u003d\"instructionBox\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cLabel fx:id\u003d\"instructionLabel\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\".label\" text\u003d\"Instructions\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003cListView fx:id\u003d\"instructions\" prefHeight\u003d\"154.0\" prefWidth\u003d\"419.0\" styleClass\u003d\"alternating-row-colors\" stylesheets\u003d\"@Extensions.css\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 64
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonRecipeBookStorage addressBookStorage \u003d new JsonRecipeBookStorage("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // Setup LogicManager with JsonRecipeBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonRecipeBookStorage addressBookStorage \u003d new JsonRecipeBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // Execute new command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                NewCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe expectedRecipe \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.addRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) throws"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static class JsonRecipeBookIoExceptionThrowingStub extends JsonRecipeBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        private JsonRecipeBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 5,
      "-": 139,
      "kevinswk94": 23
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "-": 77,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/commands/ModifyCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * ModifyCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class ModifyCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe editedRecipe \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedRecipe).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String expectedMessage \u003d String.format(ModifyCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandSuccess(modifyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe lastRecipe \u003d model.getFilteredRecipeList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedRecipe \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).withTags("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withTags("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String expectedMessage \u003d String.format(ModifyCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.setRecipe(lastRecipe, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandSuccess(modifyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(INDEX_FIRST_PERSON, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String expectedMessage \u003d String.format(ModifyCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandSuccess(modifyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe recipeInFilteredList \u003d model.getFilteredRecipeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe editedRecipe \u003d new PersonBuilder(recipeInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String expectedMessage \u003d String.format(ModifyCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandSuccess(modifyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstRecipe).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertCommandFailure(modifyCommand, model, ModifyCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // edit recipe in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                new EditPersonDescriptorBuilder(recipeInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertCommandFailure(modifyCommand, model, ModifyCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandFailure(modifyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand modifyCommand \u003d new ModifyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertCommandFailure(modifyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        final ModifyCommand standardCommand \u003d new ModifyCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor copyDescriptor \u003d new ModifyCommand.EditRecipeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ModifyCommand commandWithSameValues \u003d new ModifyCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(standardCommand.equals(new ResetCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(standardCommand.equals(new ModifyCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(standardCommand.equals(new ModifyCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 24,
      "-": 115,
      "kevinswk94": 35
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 33
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "-": 123
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/logic/parser/RecipeBookParserTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.testutil.RecipeUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final RecipeBookParser parser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe recipe \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        NewCommand command \u003d (NewCommand) parser.parseCommand(RecipeUtil.getAddCommand(recipe));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(new NewCommand(recipe), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD) instanceof ResetCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD + \" 3\") instanceof ResetCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe recipe \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditPersonDescriptorBuilder(recipe).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModifyCommand command \u003d (ModifyCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                ModifyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + RecipeUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        .getEditRecipeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new ModifyCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 6,
      "-": 80,
      "kevinswk94": 16
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/model/recipe/PhoneTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 39
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.recipe.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // TODO: create tests for ingredients and instructions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 11,
      "-": 82,
      "kevinswk94": 4
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/storage/JsonRecipeBookStorageTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath)).readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonRecipeBookStorage jsonAddressBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        jsonAddressBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ReadOnlyRecipeBook readBack \u003d jsonAddressBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        original.addRecipe(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        original.removeRecipe(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        jsonAddressBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        original.addRecipe(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        jsonAddressBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void saveAddressBook(ReadOnlyRecipeBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    .saveRecipeBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new RecipeBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 8,
      "-": 86,
      "kevinswk94": 16
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/storage/JsonSerializableRecipeBookTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class JsonSerializableRecipeBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRecipeBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableRecipeBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "-": 35,
      "kevinswk94": 9
    }
  },
  {
    "path": "src/oldTests/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        JsonRecipeBookStorage addressBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "         * {@link JsonRecipeBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRecipeBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        storageManager.saveRecipeBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ReadOnlyRecipeBook retrieved \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(original, new RecipeBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertNotNull(storageManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "-": 58,
      "kevinswk94": 7
    }
  },
  {
    "path": "src/test/java/cookbuddy/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 5,
      "kevinswk94": 2,
      "-": 110
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(FileUtil.isValidPathString(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(FileUtil.isValidPathString(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPathString(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 5,
      "-": 18
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/PhotographUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class PhotographUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void isValidPlaceHolderImagePath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(PhotographUtil.isPlaceHolderImage(\"/images/recipe_placeholder.jpg\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e PhotographUtil.isPlaceHolderImage(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 21
    }
  },
  {
    "path": "src/test/java/cookbuddy/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void getters() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        CommandResult helperCommand \u003d new CommandResult(\"feedback\", true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        CommandResult exitCommand \u003d new CommandResult(\"feedback\", false, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(helperCommand.isShowHelp(), true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(exitCommand.isExit(), true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(commandResult.getFeedbackToUser(), \"feedback\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 13,
      "-": 53
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // _HAM_SANDWICH"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // _EGGS_ON_TOAST"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_NAME_HAM_SANDWICH \u003d \"Ham Sandwich\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_NAME_EGGS_ON_TOAST \u003d \"Eggs on Toast\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_INGREDIENTS_HAM_SANDWICH \u003d \"bread, 2 slices; ham, 1 slice\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_INGREDIENTS_EGGS_ON_TOAST \u003d \"bread, 2 slices; egg, 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_INSTRUCTIONS_HAM_SANDWICH \u003d \"spread cheese on both slides of bread; put slice of \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"ham between bread; serve on plate\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_INSTRUCTIONS_EGGS_ON_TOAST \u003d \"toast the 2 slices of bread; scramble the eggs; \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + \"put eggs on toasted bread; serve\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_CALORIE_HAM_SANDWICH \u003d \"300\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_CALORIE_EGGS_ON_TOAST \u003d \"200\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_SERVING_HAM_SANDWICH \u003d 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_SERVING_EGGS_ON_TOAST \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_RATING_HAM_SANDWICH \u003d 4; // Ratings: 0 - 5, 0 being no rating"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_RATING_EGGS_ON_TOAST \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_DIFFICULTY_HAM_SANDWICH \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int VALID_DIFFICULTY_EGGS_ON_TOAST \u003d 3;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_TAG_BREAKFAST \u003d \"breakfast\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_TAG_LUNCH \u003d \"lunch\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String VALID_TAG_DINNER \u003d \"dinner\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String PLACEHOLDER_IMAGE_PATH_STRING \u003d \"/images/recipe_placeholder.jpg\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_PHOTOGRAPH_EGGS_ON_TOAST \u003d PLACEHOLDER_IMAGE_PATH_STRING;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String VALID_PHOTOGRAPH_HAM_SANDWICH \u003d PLACEHOLDER_IMAGE_PATH_STRING;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_HOUR_HAM_SANDWICH \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_MIN_HAM_SANDWICH \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_SEC_HAM_SANDWICH \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_HOUR_EGGS_ON_TOAST \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_MIN_HAM_EGGS_ON_TOAST \u003d 5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final int VALID_SEC_EGGS_ON_TOAST \u003d 30;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String NAME_DESC_HAM_SANDWICH \u003d \" \" + PREFIX_NAME + VALID_NAME_HAM_SANDWICH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String NAME_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_NAME + VALID_NAME_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INGREDIENTS_DESC_HAM_SANDWICH \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \" \" + PREFIX_INGREDIENTS + VALID_INGREDIENTS_HAM_SANDWICH;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INGREDIENTS_DESC_EGGS_ON_TOAST \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \" \" + PREFIX_INGREDIENTS + VALID_INGREDIENTS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INSTRUCTIONS_DESC_HAM_SANDWICH \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \" \" + PREFIX_INSTRUCTIONS + VALID_INSTRUCTIONS_HAM_SANDWICH;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INSTRUCTIONS_DESC_EGGS_ON_TOAST \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \" \" + PREFIX_INSTRUCTIONS + VALID_INSTRUCTIONS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String CALORIE_DESC_HAM_SANDWICH \u003d \" \" + PREFIX_CALORIE + VALID_CALORIE_HAM_SANDWICH;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String CALORIE_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_CALORIE + VALID_CALORIE_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String SERVING_DESC_HAM_SANDWICH \u003d \" \" + PREFIX_SERVING + VALID_SERVING_HAM_SANDWICH;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String SERVING_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_SERVING + VALID_SERVING_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String RATING_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_RATING + VALID_RATING_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String RATING_DESC_HAM_SANDWICH \u003d \" \" + PREFIX_RATING + VALID_RATING_HAM_SANDWICH;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String DIFFICULTY_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String DIFFICULTY_DESC_HAM_SANDWICH \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_HAM_SANDWICH;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String PHOTOGRAPH_DESC_HAM_SANDWICH \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            \" \" + PREFIX_IMAGEFILEPATH + VALID_PHOTOGRAPH_HAM_SANDWICH;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String PHOTOGRAPH_DESC_EGGS_ON_TOAST \u003d \" \" + PREFIX_IMAGEFILEPATH"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            + VALID_PHOTOGRAPH_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // TODO: add RATING_DESC once Rating has been merged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String TAG_DESC_BREAKFAST \u003d \" \" + PREFIX_TAG + VALID_TAG_BREAKFAST;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String TAG_DESC_LUNCH \u003d \" \" + PREFIX_TAG + VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String TAG_DESC_DINNER \u003d \" \" + PREFIX_TAG + VALID_TAG_DINNER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Ham Sandwich\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INVALID_INGREDIENTS_DESC \u003d \" \" + PREFIX_INGREDIENTS + \" \"; // ingredients can\u0027t be blank"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public static final String BLANK_INSTRUCTIONS_DESC \u003d \" \" + PREFIX_INSTRUCTIONS + \"\"; // ingredients can\u0027t be"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    // \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INVALID_CALORIE_DESC \u003d \" \" + PREFIX_CALORIE + \"abc\"; // calorie can\u0027t be numeric"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INVALID_SERVING_DESC \u003d \" \" + PREFIX_SERVING + \"xyz\"; // serving can\u0027t be numeric"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // TODO: add INVALID_RATING once Rating has been merged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"lunch*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final ModifyCommand.EditRecipeDescriptor DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final ModifyCommand.EditRecipeDescriptor DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        DESC_HAM_SANDWICH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_HAM_SANDWICH).withTags("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        DESC_EGGS_ON_TOAST \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_EGGS_ON_TOAST).withTags("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_BREAKFAST, VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * - the recipe book, filtered recipe list and selected recipe in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBook expectedRecipeBook \u003d new RecipeBook(actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(expectedRecipeBook, actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * {@code model}\u0027s recipe book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        final String[] splitName \u003d recipe.getName().getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "AdarshChugani": 32,
      "kevinswk94": 79,
      "-": 66
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 39,
      "-": 71
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToDo \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_DONE_RECIPE_SUCCESS, recipeToDo.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.attemptRecipe(recipeToDo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void testEquality() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(doneCommand, new DoneCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/EditRecipeDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_CALORIE_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_DIFFICULTY_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_NAME_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_BREAKFAST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class EditRecipeDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        EditRecipeDescriptor descriptorWithSameValues \u003d new EditRecipeDescriptor(DESC_HAM_SANDWICH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(DESC_HAM_SANDWICH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(DESC_HAM_SANDWICH.equals(DESC_HAM_SANDWICH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(DESC_EGGS_ON_TOAST));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        EditRecipeDescriptor editedHamSandwich \u003d new EditRecipeDescriptorBuilder(DESC_HAM_SANDWICH)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            .withName(VALID_NAME_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different calorie -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        editedHamSandwich \u003d new EditRecipeDescriptorBuilder(DESC_HAM_SANDWICH).withCalorie(VALID_CALORIE_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        editedHamSandwich \u003d new EditRecipeDescriptorBuilder(DESC_HAM_SANDWICH)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        editedHamSandwich \u003d new EditRecipeDescriptorBuilder(DESC_HAM_SANDWICH).withTags(VALID_TAG_BREAKFAST).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(DESC_HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 56
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/FavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class FavCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToFav \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(FavCommand.MESSAGE_FAV_RECIPE_SUCCESS, recipeToFav.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.favRecipe(recipeToFav);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(favCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        FavCommand favCommand \u003d new FavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(favCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 45
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void get_help_message() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String commandWord \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        HelpCommand helpMessage \u003d new HelpCommand(commandWord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(commandWord, helpMessage.getCommandWord());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 29
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 11,
      "-": 28
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/NewCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code NewCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class NewCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_newRecipe_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(new NewCommand(validRecipe), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                String.format(NewCommand.MESSAGE_SUCCESS, validRecipe), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(new NewCommand(recipeInList), model, NewCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 46
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/NewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class NewCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NewCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelStubAcceptingRecipeAdded modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        CommandResult commandResult \u003d new NewCommand(validRecipe).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(String.format(NewCommand.MESSAGE_SUCCESS, validRecipe), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        NewCommand newCommand \u003d new NewCommand(validRecipe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecipe(validRecipe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(CommandException.class, NewCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e newCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe alice \u003d new RecipeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe bob \u003d new RecipeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        NewCommand addAliceCommand \u003d new NewCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        NewCommand addBobCommand \u003d new NewCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        NewCommand addAliceCommandCopy \u003d new NewCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public long count() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void attemptRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void unAttemptRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void favRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void unFavRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setTime(Recipe recipe, Time time) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return this.recipe.isSameRecipe(recipe);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * A Model stub that always accept the recipe being added."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSameRecipe);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return new RecipeBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 227
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/RandomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class RandomCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void equalityCheck() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        RandomCommand randomCom \u003d new RandomCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        RandomCommand sameVal \u003d randomCom;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        RandomCommand newRandom \u003d new RandomCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(randomCom, sameVal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        if (randomCom.getTargetIndex().equals(newRandom.getTargetIndex())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            assertEquals(randomCom, newRandom);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            assertNotEquals(randomCom, newRandom);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 35
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/ResetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class ResetCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_emptyRecipeBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(new ResetCommand(), model, ResetCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_nonEmptyRecipeBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(new ResetCommand(), model, ResetCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 32
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/TimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class TimeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void equalityCheck() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Time targetTime \u003d new Time(20, 20, 20);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        TimeCommand timeCommand \u003d new TimeCommand(targetIndex, targetTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(timeCommand, new TimeCommand(targetIndex, targetTime));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToSet \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        TimeCommand timeCommand \u003d new TimeCommand(INDEX_SECOND_RECIPE, new Time(20, 20, 20));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Time timeToSet \u003d new Time(20, 20, 20);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(TimeCommand.MESSAGE_TIME_RECIPE_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                recipeToSet.getName(), timeToSet);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.setTime(recipeToSet, new Time(20, 20, 20));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(timeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        TimeCommand timeCommand \u003d new TimeCommand(outOfBoundIndex, new Time(20, 20 , 20));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(timeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 63
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/UnFavCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UnFavCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToUnFav \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UnFavCommand unfavCommand \u003d new UnFavCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(UnFavCommand.MESSAGE_UNFAV_RECIPE_SUCCESS, recipeToUnFav.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.unFavRecipe(recipeToUnFav);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(unfavCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UnFavCommand unfavCommand \u003d new UnFavCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(unfavCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 45
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe recipeToUndo \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_UNDONE_RECIPE_SUCCESS, recipeToUndo.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedModel.unAttemptRecipe(recipeToUndo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UndoCommand undoneCommand \u003d new UndoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertCommandFailure(undoneCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void testEquality() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(undoCommand, new UndoCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 52
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static final String invalidIndex \u003d \"Index must be a non-zero unsigned integer.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static final String helpMessage_delete \u003d \"For a command summary, type \\\"help delete\\\"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static final String invalidFormat \u003d \"Invalid command format! \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertParseFailure(parser, \"a\", invalidFormat + invalidIndex + helpMessage_delete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 34
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String noIndex \u003d \"No index has been provided for the command!\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidIndex \u003d \"Index must be a non-zero unsigned integer.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String helpMessage \u003d \"For a command summary, type \\\"help done\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String helpMessage_undo \u003d \"For a command summary, type \\\"help undo\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidFormat \u003d \"Invalid command format! \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModifyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private UndoCommandParser undoParser \u003d new UndoCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void starting_recipe_equality() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(EGGS_ON_TOAST.getDoneStatus().equals(EGGS_ON_TOAST.getDoneStatus()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void starting_recipe_status() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(EGGS_ON_TOAST.getDoneStatus().equals(new Done(false)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void done_recipe_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        HAM_SANDWICH.attemptRecipe();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getDoneStatus().equals(new Done(true)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void undo_recipe_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        HAM_SANDWICH.unAttemptRecipe();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getDoneStatus().equals(new Done(false)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_done_invalidIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"abc\", invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_undo_invalidIndex() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(undoParser, \"abc\", invalidFormat + invalidIndex + helpMessage_undo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_done_noIndex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"\", invalidFormat + noIndex + helpMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_undo_noIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(undoParser, \"\", invalidFormat + noIndex + helpMessage_undo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_done_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        DoneCommand expectedCommand \u003d new DoneCommand(targetIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_undo_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UndoCommand expectedCommand \u003d new UndoCommand(targetIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(undoParser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 91
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/FavCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.UnFavCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Fav;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class FavCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String noIndex \u003d \"No index has been provided for the command!\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidIndex \u003d \"Index must be a non-zero unsigned integer.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String helpMessage \u003d \"For a command summary, type \\\"help fav\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String helpMessage_unfav \u003d \"For a command summary, type \\\"help unfav\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidFormat \u003d \"Invalid command format! \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModifyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private FavCommandParser parser \u003d new FavCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private UnFavCommandParser unFavParser \u003d new UnFavCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void starting_recipe_equality() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(EGGS_ON_TOAST.getFavStatus().equals(EGGS_ON_TOAST.getFavStatus()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void starting_recipe_status() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(EGGS_ON_TOAST.getFavStatus().equals(new Fav(false)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void fav_recipe_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        HAM_SANDWICH.favRecipe();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getFavStatus().equals(new Fav(true)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unFav_recipe_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        HAM_SANDWICH.unFavRecipe();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getFavStatus().equals(new Fav(false)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_fav_invalidIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"abc\", invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_unFav_invalidIndex() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(unFavParser, \"abc\", invalidFormat + invalidIndex + helpMessage_unfav);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_fav_noIndex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"\", invalidFormat + noIndex + helpMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_unFav_noIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(unFavParser, \"\", invalidFormat + noIndex + helpMessage_unfav);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_fav_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        FavCommand expectedCommand \u003d new FavCommand(targetIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_unFav_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        UnFavCommand expectedCommand \u003d new UnFavCommand(targetIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(unFavParser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 91
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static final String MESSAGE_ATTRIBUTE_ERROR \u003d \"Please search for 1 attribute at a time!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // no prefix specified"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertParseFailure(parser, \"find\", MESSAGE_ATTRIBUTE_ERROR);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_ATTRIBUTE_ERROR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 25
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/ModifyCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.BLANK_INSTRUCTIONS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.CALORIE_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.DIFFICULTY_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INGREDIENTS_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INGREDIENTS_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INSTRUCTIONS_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INSTRUCTIONS_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INVALID_INGREDIENTS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.NAME_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.NAME_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.PHOTOGRAPH_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.RATING_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.SERVING_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.TAG_DESC_BREAKFAST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.TAG_DESC_LUNCH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_CALORIE_HAM_SANDWICH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_DIFFICULTY_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INGREDIENTS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INGREDIENTS_HAM_SANDWICH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INSTRUCTIONS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INSTRUCTIONS_HAM_SANDWICH;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_NAME_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_NAME_HAM_SANDWICH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_PHOTOGRAPH_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_RATING_HAM_SANDWICH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_SERVING_HAM_SANDWICH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_BREAKFAST;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "public class ModifyCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String noIndex \u003d \"No index has been provided for the command!\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidIndex \u003d \"Index must be a non-zero unsigned integer.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String helpMessage \u003d \"For a command summary, type \\\"help modify\\\"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String invalidFormat \u003d \"Invalid command format! \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String noInstructions \u003d \"Recipes need to have instructions; please enter some instructions.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModifyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private ModifyCommandParser parser \u003d new ModifyCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EGGS_ON_TOAST, invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\", ModifyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"\", invalidFormat + noIndex + helpMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_EGGS_ON_TOAST, invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_EGGS_ON_TOAST, invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", invalidFormat + invalidIndex + helpMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INGREDIENTS_DESC, Ingredient.MESSAGE_CONSTRAINTS); //invalid ingredient"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + BLANK_INSTRUCTIONS_DESC, noInstructions); // invalid instr"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // invalid ingredient followed by valid instruction"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INGREDIENTS_DESC + INSTRUCTIONS_DESC_EGGS_ON_TOAST,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // valid ingredient followed by invalid instruction. The test case for invalid instruction followed by valid"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // ingredient is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INGREDIENTS_DESC_HAM_SANDWICH + INVALID_INGREDIENTS_DESC,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Recipe} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //ToDo: find a way to test tags."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_BREAKFAST + TAG_DESC_DINNER + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_LUNCH + TAG_EMPTY + TAG_DESC_DINNER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_BREAKFAST + TAG_DESC_LUNCH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_INGREDIENTS_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        + VALID_INSTRUCTIONS_EGGS_ON_TOAST, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENTS_DESC_EGGS_ON_TOAST + TAG_DESC_LUNCH"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + INSTRUCTIONS_DESC_HAM_SANDWICH + NAME_DESC_HAM_SANDWICH + CALORIE_DESC_HAM_SANDWICH"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + RATING_DESC_HAM_SANDWICH + DIFFICULTY_DESC_EGGS_ON_TOAST + SERVING_DESC_HAM_SANDWICH"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + PHOTOGRAPH_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_HAM_SANDWICH)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withInstructions(VALID_INSTRUCTIONS_HAM_SANDWICH)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withDifficulty(VALID_DIFFICULTY_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withServing(VALID_SERVING_HAM_SANDWICH)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withRating(VALID_RATING_HAM_SANDWICH)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withCalorie(VALID_CALORIE_HAM_SANDWICH)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withPhotograph(VALID_PHOTOGRAPH_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                targetIndex.getOneBased() + INGREDIENTS_DESC_EGGS_ON_TOAST + INSTRUCTIONS_DESC_HAM_SANDWICH"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        + TAG_DESC_LUNCH;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                new EditRecipeDescriptorBuilder().withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .withInstructions(VALID_INSTRUCTIONS_HAM_SANDWICH).withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // ingredients"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INGREDIENTS_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withIngredients(VALID_INGREDIENTS_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // instructions"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INSTRUCTIONS_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withInstructions(VALID_INSTRUCTIONS_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // serving"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SERVING_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withServing(VALID_SERVING_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withRating(VALID_RATING_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // calorie"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIE_DESC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withCalorie(VALID_CALORIE_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_BREAKFAST;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withTags(VALID_TAG_BREAKFAST).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENTS_DESC_HAM_SANDWICH + INSTRUCTIONS_DESC_HAM_SANDWICH"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + TAG_DESC_BREAKFAST + INGREDIENTS_DESC_HAM_SANDWICH + INSTRUCTIONS_DESC_HAM_SANDWICH"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + INGREDIENTS_DESC_EGGS_ON_TOAST + INSTRUCTIONS_DESC_EGGS_ON_TOAST + TAG_DESC_LUNCH;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                new EditRecipeDescriptorBuilder().withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .withInstructions(VALID_INSTRUCTIONS_EGGS_ON_TOAST).withTags(VALID_TAG_LUNCH)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_INGREDIENTS_DESC + INGREDIENTS_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INSTRUCTIONS_DESC_EGGS_ON_TOAST + INVALID_INGREDIENTS_DESC"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                + INGREDIENTS_DESC_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                new EditRecipeDescriptorBuilder().withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .withInstructions(VALID_INSTRUCTIONS_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand.EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        ModifyCommand expectedCommand \u003d new ModifyCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 254
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "package cookbuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_INGREDIENTS \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_INSTRUCTIONS \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_RATING \u003d \"12\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_SERVING \u003d \"-1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_CALORIE \u003d \"-100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"7\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String INVALID_TIME \u003d \"-1:-1:-1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    //TODO: Remove fields referencing person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_NAME \u003d \"Special Sandwich\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_INGREDIENTS \u003d \"ham, 2slices; cheese, 1 slice; bread, 2 slices\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_INSTRUCTIONS \u003d \"add ham to bread; add cheese; eat\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_RATING \u003d \"5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_SERVING \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_CALORIE \u003d \"1000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d \"2\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"easy\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"snack\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String VALID_TIME \u003d \"12:00:00\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseDifficulty_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDifficulty(INVALID_DIFFICULTY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTiming_invalidFormat_throwsNumberFormatException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(\"abc\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTiming_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTiming_validValue_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Time time \u003d new Time(12, 00, 00);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(time, (ParserUtil.parseTime(VALID_TIME)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseRating_validValue_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Rating testRating \u003d new Rating(5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(testRating, (ParserUtil.parseRating(VALID_RATING)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseRating_invalidType_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"abc\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Optional.of((VALID_TAG_1 + INVALID_TAG))));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Optional.of(VALID_TAG_1 + VALID_TAG_2));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1 + VALID_TAG_2)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 5,
      "AdarshChugani": 174
    }
  },
  {
    "path": "src/test/java/cookbuddy/logic/parser/RecipeBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.FavCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.UnFavCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class RecipeBookParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final RecipeBookParser parser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_reset() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD) instanceof ResetCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD) instanceof ResetCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_fav() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        FavCommand command \u003d (FavCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            FavCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new FavCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_unfav() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UnFavCommand command \u003d (UnFavCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            UnFavCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new UnFavCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_undone() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UndoCommand command \u003d (UndoCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            UndoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new UndoCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new ViewCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        DoneCommand command \u003d (DoneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            DoneCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(new DoneCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 108
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRecipeBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setRecipeBookFilePath_validPath_setsRecipeBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        modelManager.setRecipeBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(path, modelManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(modelManager.hasRecipe(HAM_SANDWICH));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        modelManager.addRecipe(HAM_SANDWICH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(modelManager.hasRecipe(HAM_SANDWICH));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder().withRecipe(HAM_SANDWICH).withRecipe(EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        RecipeBook differentAddressBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String[] keywords \u003d HAM_SANDWICH.getName().getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        differentUserPrefs.setDataFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "kevinswk94": 35,
      "-": 96
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/RecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(HAM_SANDWICH, editedHamSandwich);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBookStub newData \u003d new RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(HAM_SANDWICH));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.addRecipe(HAM_SANDWICH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(HAM_SANDWICH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.addRecipe(HAM_SANDWICH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 98
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setDataFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Collections.singletonList(\"Ham\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Ham Sandwich\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ham\", \"Sandwich\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Ham Sandwich\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ham\", \"Sandwich\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Egg Sandwich\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"hAm\", \"saNdwiCH\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Ham Sandwich\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Ham\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ham\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Egg Sandwich\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "kevinswk94": 14,
      "-": 56
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_HOUR_HAM_SANDWICH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INGREDIENTS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_INSTRUCTIONS_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_MIN_HAM_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_NAME_EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_SEC_HAM_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_BREAKFAST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipe.getTags().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(HAM_SANDWICH.isSameRecipe(HAM_SANDWICH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.isSameRecipe(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .withInstructions(VALID_INSTRUCTIONS_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withName(VALID_NAME_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same name, same instructions, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withIngredients(VALID_INGREDIENTS_EGGS_ON_TOAST).withTags("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same name, same ingredients, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withInstructions(VALID_INSTRUCTIONS_EGGS_ON_TOAST).withTags("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                VALID_TAG_BREAKFAST).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).addTime(VALID_HOUR_HAM_SANDWICH,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                VALID_MIN_HAM_SANDWICH, VALID_SEC_HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same name, same ingredients, same instructions, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_BREAKFAST).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(HAM_SANDWICH.isSameRecipe(editedHamSandwich));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void sameCalorieStringChecker() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getCalorie().toString().equals(HAM_SANDWICH.getCalorie().toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void equalCalorieStringChecker() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(HAM_SANDWICH.getCalorie().equals(new Calorie(\"300\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void equalCalorieHashChecker() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertTrue(new Calorie(\"200\").hashCode() \u003d\u003d new Calorie(\"200\").hashCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public void unEqualCalorieStringChecker() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        assertFalse(HAM_SANDWICH.getCalorie().toString().equals(new Calorie(\"200\").toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe hamSandwichBuilder \u003d new RecipeBuilder(HAM_SANDWICH).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(HAM_SANDWICH.equals(hamSandwichBuilder));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(HAM_SANDWICH.equals(HAM_SANDWICH));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.equals(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.equals(EGGS_ON_TOAST));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Recipe editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withName(VALID_NAME_EGGS_ON_TOAST).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // TODO: Check what happens when Recipes with same name have different ingredients and/or instructions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_BREAKFAST).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(HAM_SANDWICH.equals(editedHamSandwich));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 36,
      "kevinswk94": 82
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.logic.commands.CommandTestUtil.VALID_TAG_BREAKFAST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.EGGS_ON_TOAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.TypicalRecipes.HAM_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import cookbuddy.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void contains_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(HAM_SANDWICH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(HAM_SANDWICH));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void contains_recipeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_BREAKFAST)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(editedHamSandwich));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(HAM_SANDWICH));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, HAM_SANDWICH));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(HAM_SANDWICH, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(HAM_SANDWICH, HAM_SANDWICH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.setRecipe(HAM_SANDWICH, HAM_SANDWICH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        expectedUniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_editedRecipeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Recipe editedHamSandwich \u003d new RecipeBuilder(HAM_SANDWICH).withTags(VALID_TAG_BREAKFAST)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.setRecipe(HAM_SANDWICH, editedHamSandwich);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        expectedUniqueRecipeList.add(editedHamSandwich);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_editedRecipeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.setRecipe(HAM_SANDWICH, EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        expectedUniqueRecipeList.add(EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipe_editedRecipeHasNonUniqueIdentity_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipe(HAM_SANDWICH, EGGS_ON_TOAST));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void remove_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void remove_recipeDoesNotExist_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.remove(HAM_SANDWICH));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void remove_existingRecipe_removesRecipe() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.remove(HAM_SANDWICH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipes_nullUniqueRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((UniqueRecipeList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipes_uniqueRecipeList_replacesOwnListWithProvidedUniqueRecipeList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        expectedUniqueRecipeList.add(EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.setRecipes(expectedUniqueRecipeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((List\u003cRecipe\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.add(HAM_SANDWICH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d Collections.singletonList(EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        uniqueRecipeList.setRecipes(recipeList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        expectedUniqueRecipeList.add(EGGS_ON_TOAST);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setRecipes_listWithDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        List\u003cRecipe\u003e listWithDuplicateRecipes \u003d Arrays.asList(HAM_SANDWICH, HAM_SANDWICH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipes(listWithDuplicateRecipes));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            -\u003e uniqueRecipeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 169
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/CalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Calorie(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_invalidCalorie_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String invalidCalorie \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calorie(invalidCalorie));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void isValidCalorieAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // null calorie"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calorie.isValidCalorieAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid calorie"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Calorie.isValidCalorieAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Calorie.isValidCalorieAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Calorie.isValidCalorieAmount(\"ham*\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Calorie.isValidCalorieAmount(\"-3\")); // contains negative numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // valid calorie"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Calorie.isValidCalorieAmount(\"120\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Calorie.isValidCalorieAmount(\"123456\")); // large numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 38
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/DifficultyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DifficultyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Difficulty((Integer) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_invalidDifficulty_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        int invalidDifficulty \u003d 1000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Difficulty(invalidDifficulty));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void isValidDifficulty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Difficulty.isValidDifficulty((Integer) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(-1)); // negative integer (integer below left boundary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(9)); // integer above right boundary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // valid difficulty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(3)); // valid integer only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(0)); // valid left boundary integer only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(5)); // valid right boundary integer only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 37
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertFalse(Name.isValidName(\"ham*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(Name.isValidName(\"ham sandwich\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(Name.isValidName(\"ham sandwich 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(Name.isValidName(\"Ham Sandwich\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertTrue(Name.isValidName(\"Ham Sandwich with Onions and Lettuce\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 33,
      "kevinswk94": 6
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/RatingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Rating((Integer) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        int invalidRating \u003d 1000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating((Integer) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Rating.isValidRating(-1)); // negative integer (integer below left boundary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Rating.isValidRating(9)); // integer above right boundary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Rating.isValidRating(3)); // valid integer only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Rating.isValidRating(0)); // valid left boundary integer only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Rating.isValidRating(5)); // valid right boundary integer only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 37
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/ServingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class ServingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Serving((Integer) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void constructor_invalidServing_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        int invalidServing \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Serving(invalidServing));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void isValidServing() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // null serving"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Serving.isValidServing((Integer) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // invalid serving"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Serving.isValidServing(-1)); // invalid negative integer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Serving.isValidServing(-2147483647)); // invalid large negative integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertFalse(Serving.isValidServing(0)); // invalid number zero"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // valid serving"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Serving.isValidServing(1)); // valid integer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertTrue(Serving.isValidServing(2147483647)); // valid large integer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 37
    }
  },
  {
    "path": "src/test/java/cookbuddy/model/recipe/attribute/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "package cookbuddy.model.recipe.attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 24,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/EditRecipeDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Instruction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A utility class to help with building EditRecipeDescriptor objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class EditRecipeDescriptorBuilder {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private ModifyCommand.EditRecipeDescriptor descriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor \u003d new ModifyCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder(ModifyCommand.EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder(Recipe recipe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        descriptor.setName(recipe.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setIngredients(recipe.getIngredients());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setInstructions(recipe.getInstructions());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setImageFilePath(recipe.getPhotograph());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setCalorie(recipe.getCalorie());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setServing(recipe.getServing());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setRating(recipe.getRating());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setDifficulty(recipe.getDifficulty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        descriptor.setTags(recipe.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code IngredientList} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public EditRecipeDescriptorBuilder withIngredients(String ingredients) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                Stream.of(ingredients.trim().split(\";\")).map(String::trim).map(Ingredient::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor.setIngredients(new IngredientList(ingredientList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code InstructionList} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public EditRecipeDescriptorBuilder withInstructions(String instructions) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cInstruction\u003e instructionList \u003d (Stream.of(instructions.trim().split(\";\")).map(String::trim)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .map(Instruction::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor.setInstructions(new InstructionList(instructionList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Photograph} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public EditRecipeDescriptorBuilder withPhotograph(String photograph) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Photograph ph;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            ph \u003d new Photograph(photograph);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        descriptor.setImageFilePath(ph);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Calorie} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setCalorie(new Calorie(calorie));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Serving} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withServing(int serving) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setServing(new Serving(serving));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withRating(int rating) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withDifficulty(int difficulty) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.setDifficulty(new Difficulty(difficulty));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EditRecipeDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public ModifyCommand.EditRecipeDescriptor build() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 2,
      "AdarshChugani": 19,
      "kevinswk94": 78,
      "-": 45
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/RecipeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A utility class to help with building RecipeBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * {@code RecipeBook rb \u003d new RecipeBookBuilder().withRecipe(\"Ham Sandwich\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Adds a new {@code Recipe} to the {@code RecipeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 34
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.IngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Instruction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.InstructionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Photograph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Serving;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "import cookbuddy.model.recipe.attribute.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Ham Sandwich\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final List\u003cIngredient\u003e DEFAULT_INGREDIENT_LIST \u003d List.of(new Ingredient(\"bread, 2 slices\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            new Ingredient(\"ham, 1 slice\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final List\u003cInstruction\u003e DEFAULT_INSTRUCTION_LIST \u003d List.of("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            new Instruction(\"place ham between \" + \"slices of bread\"), new Instruction(\"eat\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Photograph DEFAULT_PHOTOGRAPH \u003d Photograph.PLACEHOLDER_PHOTOGRAPH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"300\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int DEFAULT_SERVING \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int DEFAULT_RATING \u003d 3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final int DEFAULT_DIFFICULTY \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private IngredientList ingredients;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private InstructionList instructions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Photograph photograph;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Serving serving;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Time timing;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ingredients \u003d new IngredientList(DEFAULT_INGREDIENT_LIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        instructions \u003d new InstructionList(DEFAULT_INSTRUCTION_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        photograph \u003d DEFAULT_PHOTOGRAPH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        serving \u003d new Serving(DEFAULT_SERVING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        name \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ingredients \u003d recipeToCopy.getIngredients();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        instructions \u003d recipeToCopy.getInstructions();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        photograph \u003d recipeToCopy.getPhotograph();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        calorie \u003d recipeToCopy.getCalorie();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        serving \u003d recipeToCopy.getServing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        rating \u003d recipeToCopy.getRating();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        difficulty \u003d recipeToCopy.getDifficulty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Name} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code IngredientList} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public RecipeBuilder withIngredients(String ingredients) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                Stream.of(ingredients.trim().split(\";\")).map(String::trim).map(Ingredient::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.ingredients \u003d new IngredientList(ingredientList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code InstructionList} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public RecipeBuilder withInstructions(String instructions) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        List\u003cInstruction\u003e instructionList \u003d (Stream.of(instructions.trim().split(\";\")).map(String::trim)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                .map(Instruction::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.instructions \u003d new InstructionList(instructionList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Photograph} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public RecipeBuilder withPhotograph(String photograph) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Photograph ph;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            ph \u003d new Photograph(photograph);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.photograph \u003d ph;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Serving} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withServing(int serving) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.serving \u003d new Serving(serving);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Rating} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withRating(int rating) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public RecipeBuilder withDifficulty(int difficulty) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * builds a Recipe."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @return the Recipe."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        Recipe toReturn \u003d new Recipe(name, ingredients, instructions, photograph, calorie, serving, rating, difficulty,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * adds a time to the recipe."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param h the hour component of the time."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param m the minute component of the time."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @param s the second component of the time."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "    public RecipeBuilder addTime(int h, int m, int s) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        this.timing \u003d new Time(h, m, s);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdarshChugani"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdarshChugani": 43,
      "kevinswk94": 143
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/RecipeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_IMAGEFILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_INSTRUCTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_SERVING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static cookbuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.ModifyCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.attribute.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * A utility class for Recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns an add command string for adding the {@code recipe}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static String getAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return NewCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the part of command string for the given {@code recipe}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_NAME + recipe.getName().getName() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_INGREDIENTS + recipe.getIngredients().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_INSTRUCTIONS + recipe.getInstructions().toString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_CALORIE + recipe.getCalorie().toString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_SERVING + recipe.getServing().toString() + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_RATING + recipe.getRating().toString() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY + recipe.getDifficulty().toString() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        sb.append(PREFIX_IMAGEFILEPATH + recipe.getPhotograph().toString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        recipe.getTags().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getName()).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getIngredients().ifPresent(ingredients -\u003e sb.append(PREFIX_INGREDIENTS)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .append(ingredients.toString()).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getInstructions().ifPresent(instructions -\u003e sb.append(PREFIX_INSTRUCTIONS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .append(instructions.toString()).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getCalorie().ifPresent(calorie -\u003e sb.append(PREFIX_CALORIE).append(calorie.toString()).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getServing().ifPresent(serving -\u003e sb.append(PREFIX_SERVING).append(serving.toString()).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.toString()).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        descriptor.getDifficulty().ifPresent(difficulty -\u003e sb.append(PREFIX_DIFFICULTY).append(difficulty.toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 5,
      "kevinswk94": 38,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the middle index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the last index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Returns the recipe in the {@code model}\u0027s recipe list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static Recipe getRecipe(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return model.getFilteredRecipeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3,
      "kevinswk94": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/cookbuddy/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.RecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import cookbuddy.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Recipe HAM_SANDWICH \u003d new RecipeBuilder().withName(CommandTestUtil.VALID_NAME_HAM_SANDWICH)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            .withIngredients(CommandTestUtil.VALID_INGREDIENTS_HAM_SANDWICH).withInstructions("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_INSTRUCTIONS_HAM_SANDWICH).withCalorie("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_CALORIE_HAM_SANDWICH).withServing(CommandTestUtil.VALID_SERVING_HAM_SANDWICH)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            .withRating(CommandTestUtil.VALID_RATING_HAM_SANDWICH).withDifficulty("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_DIFFICULTY_HAM_SANDWICH).withTags(CommandTestUtil.VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final Recipe EGGS_ON_TOAST \u003d new RecipeBuilder().withName(CommandTestUtil.VALID_NAME_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            .withIngredients(CommandTestUtil.VALID_INGREDIENTS_EGGS_ON_TOAST).withInstructions("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_INSTRUCTIONS_EGGS_ON_TOAST).withCalorie("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_CALORIE_EGGS_ON_TOAST).withServing("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_SERVING_EGGS_ON_TOAST).withRating(CommandTestUtil.VALID_RATING_EGGS_ON_TOAST)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            .withDifficulty(CommandTestUtil.VALID_DIFFICULTY_EGGS_ON_TOAST).withTags("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    CommandTestUtil.VALID_TAG_BREAKFAST, CommandTestUtil.VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    // TODO: Add more typical recipes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static final String KEYWORD_MATCHING_HAM \u003d \"Ham\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private TypicalRecipes() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns an {@code RecipeBook} with all the typical persons."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        RecipeBook rb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            rb.addRecipe(recipe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HAM_SANDWICH, EGGS_ON_TOAST));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 52
    }
  },
  {
    "path": "src/test/java/cookbuddy/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package cookbuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import cookbuddy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "kevinswk94": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "kevinswk94": 1
    }
  }
]
